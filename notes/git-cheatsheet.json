{"status":"seedling","statusIcon":"ðŸŒ±","title":"git-cheatsheet","description":"Some common scenarios and how to resolve them using git.","slug":"git-cheatsheet","publish":true,"lastmod":"2023-06-28T00:00:00.000Z","date":"2022-05-24T00:00:00.000Z","aliases":[null],"tags":["status/seedling"],"timeToRead":2,"internalLinks":[],"flashcards":[],"html":"<h2 id=\"amend-a-previous-commit\"><a href=\"#amend-a-previous-commit\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Amend a previous commit</h2>\n<p>Youâ€™ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then thereâ€™s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> commit --amend</code><!-- HTML_TAG_END --></pre>\n<h2 id=\"go-back-to-an-old-commit\"><a href=\"#go-back-to-an-old-commit\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Go back to an old commit</h2>\n<p>This command will rewind history locally to the specified git commit.</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> reset --hard <span class=\"token operator\">&lt;</span>commit hash<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n<p>If you want to erase the changes that followed on the remote copy, you can additionally run:</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> push -f</code><!-- HTML_TAG_END --></pre>\n<p>Which will force git to push your current history and overwrite whatever currently exists on remote.</p>\n<h2 id=\"merge-changes-from-branch-a-into-branch-b\"><a href=\"#merge-changes-from-branch-a-into-branch-b\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Merge changes from branch A into branch B</h2>\n<p>This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.</p>\n<p>First, make sure you have the latest remote changes locally.</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> fetch\n<span class=\"token function\">git</span> pull</code><!-- HTML_TAG_END --></pre>\n<p>Make sure you have the branch you want to merge changes <em>into</em> checked out locally:</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>BranchB<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n<p>And then merge the changes from branch A in:</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>BranchA<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n<h2 id=\"rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch\"><a href=\"#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Rebase changes in a branch onto a newer commit from the parent branch</h2>\n<p>This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.</p>\n<p>Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> checkout main\n<span class=\"token function\">git</span> fetch\n<span class=\"token function\">git</span> pull\n<span class=\"token function\">git</span> checkout delta\n<span class=\"token function\">git</span> fetch\n<span class=\"token function\">git</span> pull</code><!-- HTML_TAG_END --></pre>\n<p>The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:</p>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> checkout delta\n<span class=\"token function\">git</span> rebase main</code><!-- HTML_TAG_END --></pre>\n<h2 id=\"move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first\"><a href=\"#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Move changes from a protected branch to a feature branch after accidentally committing without switching branches first</h2>\n<p>Often I will pull latest from the <code>main</code> branch and start making changes for the ticket Iâ€™m working on. After some progress I will then commit my changes, forgetting that I didnâ€™t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I canâ€™t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways Iâ€™ve found to do this.</p>\n<p>Option 1 works conceptually by taking the following actions:</p>\n<ol><li>Undo my last commit to <code>main</code></li>\n<li>create &amp; checkout a new feature branch</li>\n<li>commit my changes to it</li></ol>\n<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\"><span class=\"token function\">git</span> reset --soft HEAD~1\n<span class=\"token function\">git</span> checkout -b feature/my-new-feature\n<span class=\"token function\">git</span> commit</code><!-- HTML_TAG_END --></pre>\n<p>Option 2:</p>\n<ol><li>Create a branch from my commit locally</li>\n<li>Push my new branch with changes</li>\n<li>Checkout my local <code>main</code> branch</li>\n<li>Reset it to the same commit as on <code>origin</code></li></ol>","css":{"code":"","map":null},"head":"","href":"/notes/git-cheatsheet/","component":{}}