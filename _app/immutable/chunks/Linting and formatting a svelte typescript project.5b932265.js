import{s as an,C as Ne,a5 as za,f as l,a as t,I as d,e as k,g as o,u as r,c as i,K as E,j as C,i as a,A as nn,d as n}from"./scheduler.73a07135.js";import{S as tn,i as ln,b as on,d as rn,m as pn,a as cn,t as dn,e as kn}from"./index.ba10b74b.js";import{g as En,a as Sa}from"./spread.8a54911c.js";import{M as hn}from"./MDSveXNoteLayout.47500dc4.js";function yn(hs){let p,m='Lately I‚Äôve been working on <a href="https://penguinsight.com" rel="nofollow">Penguinsight</a>. It‚Äôs a tool that helps teams building products for developers get precise &amp; actionable feedback on their docs from the people who have to use them. I‚Äôve been building Penguinsight solo, and it‚Äôs freeing to build everything myself and understand how it all works. I get a huge boost in <em>personal</em> productivity, but it‚Äôs not without downsides.',f,y,c='Often the downsides of working solo are‚Äôt a big issue for me. I understand <em>the importance of craftsmanship</em> in software development, and usually write great code. On rare occasion, I am even struck with divine inspiration; my body becomes a mere vessel used by the incomprehensible powers of the universe to transcribe code until 3 in the morning. There is no greater sensation; it is a <a href="https://en.wikipedia.org/wiki/Peak_experience" rel="nofollow">peak experience</a>. Staying up all night for an inspired coding session is absolutely worth doing sometimes.',h,u,Re='Anyway, after waking up exhausted for the third time last week to discovery some asshole merged poorly formatted code &amp; bugs into prod at 3am, it was time to act‚Ä¶ I got up and walked to a coffee shop. With blood flowing and bean juice in hand, I was resolved to reign in that maniac by any means necessary. Tests weren‚Äôt cutting it, so it was time to introduce some static analysis tools: a <a href="https://prettier.io" rel="nofollow">formatter</a> and <a href="https://eslint.org/" rel="nofollow">linter</a>.',Us,L,Be="This ended up being a bigger project than I expected for a few reasons:",Ys,A,Ge='<li>I needed to integrate <code>prettier-plugin-svelte</code> since started using <a href="https://zed.dev" rel="nofollow">zed</a> and no longer gett it via VS Code plugin</li> <li>ESLint upgraded to a new <a href="https://eslint.org/docs/latest/extend/plugin-migration-flat-config" rel="nofollow">flat config</a> format which I needed to learn</li> <li><a href="https://github.com/typescript-eslint/typescript-eslint/issues/8211" rel="nofollow">typescript-eslint doesn‚Äôt support the latest eslint 9.0.0 yet</a>, which naturally I discovered after trying to use the eslint 9 üòÖ</li> <li>There is a new <a href="https://sveltejs.github.io/eslint-plugin-svelte/migration/" rel="nofollow">eslint-plugin-svelte</a> which replaced <code>eslint-plugin-svelte3</code></li>',Js,M,Ve="Here‚Äôs how I got it all up and running!",Qs,g,We='<a aria-hidden="true" tabindex="-1" href="#setting-up-prettier"><span class="icon icon-link"></span></a><a href="#setting-up-prettier" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Setting up prettier',Zs,P,Ue="Prettier handles file formatting. I prefer to have things formatted consistently and I don‚Äôt want to think about it, so I configure my editor to format files on save. This has the added benefit of also saving my files when I use <code>cmd+s</code> as a ‚Äúformat code‚Äù hotkey. Nifty!",Ks,v,Ye='<a aria-hidden="true" tabindex="-1" href="#installing-prettier-packages"><span class="icon icon-link"></span></a><a href="#installing-prettier-packages" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Installing prettier packages',Xs,I,Je="From the top, here‚Äôs the setup. First, install all the dependencies for formatting (I‚Äôve specified version I know work together). Since these are dev tools, using <code>-D</code> ensures they don‚Äôt get bundled into application code.",se,ys,$a=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -D</span><span style="color:#032F62;--shiki-dark:#CE9178"> prettier@3.2.5</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -D</span><span style="color:#032F62;--shiki-dark:#CE9178"> prettier-plugin-organize-imports@3.2.4</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -D</span><span style="color:#032F62;--shiki-dark:#CE9178"> prettier-plugin-svelte@3.2.2</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -D</span><span style="color:#032F62;--shiki-dark:#CE9178"> prettier-plugin-tailwindcss@0.5.13</span></span></code></pre>`,fs,us,Na=`<pre class="code-copy-target hidden">npm i -D prettier@3.2.5
npm i -D prettier-plugin-organize-imports@3.2.4
npm i -D prettier-plugin-svelte@3.2.2
npm i -D prettier-plugin-tailwindcss@0.5.13</pre>`,Cs,j,Qe="I use svelte and tailwind, so their respective plugins are self-explanatory. I like <code>prettier-plugin-organize-imports</code> because most of the time import order is irrelevant, using the plugin to order them minimizes changes for cleaner PR diffs.",ee,b,Ze='<a aria-hidden="true" tabindex="-1" href="#configuring-prettier"><span class="icon icon-link"></span></a><a href="#configuring-prettier" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Configuring prettier',ae,q,Ke="With the dependencies all installed, it‚Äôs time to get prettier setup! There are a few options for the prettier config file, but I prefer <code>prettier.config.js</code> for a couple reasons:",ne,z,Xe="<li>I can import JSDoc typings to get intellisense, which helps me fill out my config options</li> <li>It‚Äôs more convenient if all the tooling config files are <code>*.config.js</code> for matching patterns</li>",te,S,sa="Here‚Äôs my <code>prettier.config.js</code> file contents:",ie,ms,Ra=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0" js twoslash><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">/** </span><span style="color:#D73A49;--shiki-dark:#569CD6">@type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> &#123;import("prettier").Config&#125;</span><span style="color:#6A737D;--shiki-dark:#6A9955"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">const</span><span style="color:#005CC5;--shiki-dark:#9CDCFE"> config</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	useTabs:</span><span style="color:#005CC5;--shiki-dark:#569CD6"> true</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	singleQuote:</span><span style="color:#005CC5;--shiki-dark:#569CD6"> true</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	trailingComma:</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'none'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	bracketSameLine:</span><span style="color:#005CC5;--shiki-dark:#569CD6"> true</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	plugins:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">		'prettier-plugin-svelte'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">		'prettier-plugin-tailwindcss'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">		'prettier-plugin-organize-imports'</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	],</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">	// This tells prettier to handle svelte files separately</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	overrides:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			files:</span><span style="color:#032F62;--shiki-dark:#CE9178"> '*.svelte'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			options:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123; </span><span style="color:#24292E;--shiki-dark:#9CDCFE">parser:</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'svelte'</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#125;;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">export</span><span style="color:#D73A49;--shiki-dark:#C586C0"> default</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> config</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"></span></code></pre>`,gs,vs,Ba=`<pre class="code-copy-target hidden">/** @type &#123;import("prettier").Config&#125; */
const config = &#123;
	useTabs: true,
	singleQuote: true,
	trailingComma: 'none',
	bracketSameLine: true,
	plugins: [
		'prettier-plugin-svelte',
		'prettier-plugin-tailwindcss',
		'prettier-plugin-organize-imports'
	],
	// This tells prettier to handle svelte files separately
	overrides: [
		&#123;
			files: '*.svelte',
			options: &#123; parser: 'svelte' &#125;
		&#125;
	]
&#125;;
export default config;
</pre>`,bs,O,ea="My reasoning for these preferences:",le,$,aa="<li>tabs are less characters than the equivalent spaces, and can be customized to render differently for people who prefer more spaces/indentation</li> <li>Single quotes add less visual noise than double quotes</li> <li>Less trailing commas means less syntax on screen, particularly syntax which does nothing</li> <li>Brackets on the same line means more code on screen and looks cleaner</li>",oe,N,na="The <code>overrides</code> is necessary for svelte files to be parsed correctly. It overrides the default parser with the <code>svelte</code> parser for files with the <code>.svelte</code> extension.",re,w,ta='<a aria-hidden="true" tabindex="-1" href="#prettier-ignore-file"><span class="icon icon-link"></span></a><a href="#prettier-ignore-file" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Prettier ignore file',pe,R,ia="I have a number of files which I <strong>don‚Äôt</strong> want to format. Those are defined in a <code>.prettierignore</code> file. My list denotes files that are generated programmatically or which are not maintained by me, such as the <code>node_modules</code>. Here‚Äôs the list:",ce,ws,Ga=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span>node_modules/**</span></span>
<span class="line"><span>build/**</span></span>
<span class="line"><span>.svelte-kit/**</span></span>
<span class="line"><span>.env</span></span>
<span class="line"><span>.env.*</span></span>
<span class="line"><span>.vscode/**</span></span>
<span class="line"><span>static/**</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Ignore files for PNPM, NPM and YARN</span></span>
<span class="line"><span>pnpm-lock.yaml</span></span>
<span class="line"><span>package-lock.json</span></span>
<span class="line"><span>yarn.lock</span></span></code></pre>`,Ds,Fs,Va=`<pre class="code-copy-target hidden">node_modules/**
build/**
.svelte-kit/**
.env
.env.*
.vscode/**
static/**

# Ignore files for PNPM, NPM and YARN
pnpm-lock.yaml
package-lock.json
yarn.lock</pre>`,_s,D,la='<a aria-hidden="true" tabindex="-1" href="#running-prettier-via-npm-scripts"><span class="icon icon-link"></span></a><a href="#running-prettier-via-npm-scripts" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Running prettier via npm scripts',de,B,oa="At this point, prettier is configured and ready to run. I like to add npm scripts for a couple actions - linting and formatting - for convenience. In <code>package.json</code> add the <code>&quot;lint&quot;</code> and <code>&quot;format&quot;</code> commands:",ke,xs,Wa=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">	"scripts"</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> : &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">		"lint"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: </span><span style="color:#032F62;--shiki-dark:#CE9178">"prettier --check '&#123;src,tests&#125;/**/*.&#123;js,ts,svelte&#125;'"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">		"format"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: </span><span style="color:#032F62;--shiki-dark:#CE9178">"prettier --write '&#123;src,tests&#125;/**/*.&#123;js,ts,svelte&#125;'"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#125;</span></span></code></pre>`,Ts,Hs,Ua=`<pre class="code-copy-target hidden">&#123;
	"scripts" : &#123;
		"lint": "prettier --check '&#123;src,tests&#125;/**/*.&#123;js,ts,svelte&#125;'",
		"format": "prettier --write '&#123;src,tests&#125;/**/*.&#123;js,ts,svelte&#125;'",
	&#125;
&#125;</pre>`,Ls,G,ra=`I specify the glob patterns in quotes so that the shell doesn‚Äôt expand them. This way it‚Äôs left to prettier to expand, which will work consistently across OSes and shell environments. The glob will match all files with a <code>js</code>, <code>ts</code>, or <code>svelte</code> extension that are in the <code>src</code>
or <code>tests</code> folders. These can be customized per project.`,Ee,V,pa="<code>npm run lint</code> will run prettier to <em>check</em> all the matched files in the project and report if any have incorrect styling. I find this most helpful in CICD workflows where code won‚Äôt be changed; I want to fail the build early if it doesn‚Äôt match the style convention.",he,W,ca="<code>npm run format</code> uses prettier to <em>format</em> all the project files. This will change them on disk. I use it as a final check after making changes or if my editor isn‚Äôt configured to format on edit or save.",ye,U,da="Speaking of configuring an editor to format on save‚Ä¶",fe,F,ka='<a aria-hidden="true" tabindex="-1" href="#configuring-zed-to-format-on-save-using-prettier"><span class="icon icon-link"></span></a><a href="#configuring-zed-to-format-on-save-using-prettier" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Configuring zed to format on save using prettier',ue,Y,Ea='If you install <a href="https://zed.dev/" rel="nofollow">zed</a> now, this will be configured by default. If you have had zed installed since before ~April 2024, you‚Äôll want to make one small change to zed settings.',Ce,J,ha="from zed, you can do <code>cmd+shift+p</code> to open the command palette and select <code>zed: open settings</code>, or you can directly open the settings file at <code>~/.config/zed/settings.json</code>:",me,As,Ya=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">  "formatter"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: </span><span style="color:#032F62;--shiki-dark:#CE9178">"auto"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#125;</span></span></code></pre>`,Ms,Ps,Ja=`<pre class="code-copy-target hidden">&#123;
  "formatter": "auto",
&#125;</pre>`,Is,Q,ya="Now <code>&quot;auto&quot;</code> is the default setting in zed, so for new installs this isn‚Äôt relevant.",ge,_,fa='<a aria-hidden="true" tabindex="-1" href="#static-code-analysis-for-svelte--typescript-using-eslint"><span class="icon icon-link"></span></a><a href="#static-code-analysis-for-svelte--typescript-using-eslint" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Static code analysis for svelte &amp; typescript using eslint',ve,Z,ua='I absolutely love static code analysis tooling. When I was a C++ developer working in games, I found the <a href="https://pvs-studio.com/en/blog/posts/cpp/0249/" rel="nofollow">PVS Studio blog post about unreal engine</a> impactful, and read many other articles from them. Their blog sold me on the value of static analysis, but I wasn‚Äôt the only one! Shortly after the unreal blog post was published, Epic Games hired them for a full audit of Unreal Engine‚Äôs source code which at the time had recently released its source code.',be,K,Ca="Now that I do web development, the tech stack and tools are different but my love of static code analysis remains strong as ever. I use typescript over javascript wherever possible, and eslint is the gold standard for static code analysis for both TS and JS.",we,x,ma='<a aria-hidden="true" tabindex="-1" href="#installing-eslint-and-plugins"><span class="icon icon-link"></span></a><a href="#installing-eslint-and-plugins" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Installing eslint and plugins',De,X,ga="As of this writing (April 2024), the latest version of eslint (9.0.0) isn‚Äôt supported by the <code>typescript-eslint</code> plugin, so I use the latest compatible version. As with prettier, the linting tools are only for development so I use <code>--save-dev</code> (or <code>-D</code> for short). Here‚Äôs the commands to install eslint and the plugins I use for typescript &amp; svelte projects:",Fe,js,Qa=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --save-dev</span><span style="color:#032F62;--shiki-dark:#CE9178"> eslint@8.56.0</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --save-dev</span><span style="color:#032F62;--shiki-dark:#CE9178"> eslint-config-prettier@8.10.0</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --save-dev</span><span style="color:#032F62;--shiki-dark:#CE9178"> eslint-plugin-prettier@5.1.3</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --save-dev</span><span style="color:#032F62;--shiki-dark:#CE9178"> eslint-plugin-svelte@2.37.0</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --save-dev</span><span style="color:#032F62;--shiki-dark:#CE9178"> typescript-eslint@7.6.0</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">npm</span><span style="color:#032F62;--shiki-dark:#CE9178"> i</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --save-dev</span><span style="color:#032F62;--shiki-dark:#CE9178"> globals</span></span></code></pre>`,qs,zs,Za=`<pre class="code-copy-target hidden">npm i --save-dev eslint@8.56.0
npm i --save-dev eslint-config-prettier@8.10.0
npm i --save-dev eslint-plugin-prettier@5.1.3
npm i --save-dev eslint-plugin-svelte@2.37.0
npm i --save-dev typescript-eslint@7.6.0
npm i --save-dev globals</pre>`,Ss,T,va='<a aria-hidden="true" tabindex="-1" href="#configuring-eslint"><span class="icon icon-link"></span></a><a href="#configuring-eslint" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Configuring eslint',_e,ss,ba="Switching to the flat config was a rough adjustment. Some nuances and tricks I found helpful to know about are:",xe,es,wa='<li>The configuration objects cascade, and if multiple config objects match a file the later ones override the early ones</li> <li><code>typescript-eslint</code> exports a <code>config</code> function whose parameters are typed eslint config objects. Super helpful!</li> <li><a href="https://eslint.org/docs/latest/use/configure/configuration-files#globally-ignoring-files-with-ignores" rel="nofollow">Globally ignore files</a> by adding a config object with only the <code>ignores</code> key set. This replaces the <code>.eslintignore</code> file of old.</li> <li><code>globals</code> has the global type definitions for a bunch of environments. This is needed for <a href="https://typescript-eslint.io/getting-started/typed-linting" rel="nofollow">linting with type information</a></li>',Te,as,Da="Here‚Äôs how I‚Äôve gotten all the plugins to work together, plus a couple overrides I‚Äôm using in my <code>eslint.config.js</code>:",He,Os,Ka=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0" js twoslash><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">import</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> js</span><span style="color:#D73A49;--shiki-dark:#C586C0"> from</span><span style="color:#032F62;--shiki-dark:#CE9178"> '@eslint/js'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">import</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> eslintConfigPrettier</span><span style="color:#D73A49;--shiki-dark:#C586C0"> from</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'eslint-config-prettier'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">import</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> eslintPluginSvelte</span><span style="color:#D73A49;--shiki-dark:#C586C0"> from</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'eslint-plugin-svelte'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">import</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> globals</span><span style="color:#D73A49;--shiki-dark:#C586C0"> from</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'globals'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">import</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> svelteParser</span><span style="color:#D73A49;--shiki-dark:#C586C0"> from</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'svelte-eslint-parser'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">import</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> tsEslint</span><span style="color:#D73A49;--shiki-dark:#C586C0"> from</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'typescript-eslint'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">export</span><span style="color:#D73A49;--shiki-dark:#C586C0"> default</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> tsEslint</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#6F42C1;--shiki-dark:#DCDCAA">config</span><span style="color:#24292E;--shiki-dark:#E6E6E6">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	js</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">configs</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">recommended</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#D4D4D4">	...</span><span style="color:#24292E;--shiki-dark:#9CDCFE">tsEslint</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">configs</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">recommendedTypeChecked</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">		// configure the ts parser for ts files</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		files:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'**/*.ts'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		languageOptions:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			parser:</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> tsEslint</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">parser</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			parserOptions:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				project:</span><span style="color:#005CC5;--shiki-dark:#569CD6"> true</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				tsconfigRootDir:</span><span style="color:#D73A49;--shiki-dark:#C586C0"> import</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#005CC5;--shiki-dark:#9CDCFE">meta</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">dirname</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		files:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'*.js'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#032F62;--shiki-dark:#CE9178">'*.config.ts'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#D4D4D4">		...</span><span style="color:#24292E;--shiki-dark:#9CDCFE">tsEslint</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">configs</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">disableTypeChecked</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;,</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#D4D4D4">	...</span><span style="color:#24292E;--shiki-dark:#9CDCFE">eslintPluginSvelte</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">configs</span><span style="color:#24292E;--shiki-dark:#E6E6E6">[</span><span style="color:#032F62;--shiki-dark:#CE9178">'flat/recommended'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#D4D4D4">	...</span><span style="color:#24292E;--shiki-dark:#9CDCFE">eslintPluginSvelte</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">configs</span><span style="color:#24292E;--shiki-dark:#E6E6E6">[</span><span style="color:#032F62;--shiki-dark:#CE9178">'flat/prettier'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">		// dev tools and server logic run in node environments</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		files:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'**/*.server.ts'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#032F62;--shiki-dark:#CE9178">'*.config.ts'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#032F62;--shiki-dark:#CE9178">'*.config.js'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		languageOptions:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			globals:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#D4D4D4">				...</span><span style="color:#24292E;--shiki-dark:#9CDCFE">globals</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">node</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		files:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'**/*.svelte'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		languageOptions:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">			// mounted svelte components run in the browser</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			globals:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#D4D4D4">				...</span><span style="color:#24292E;--shiki-dark:#9CDCFE">globals</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">browser</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			&#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			ecmaVersion:</span><span style="color:#005CC5;--shiki-dark:#B5CEA8"> 2022</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			sourceType:</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'module'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">			// setup the svelte parser and give it the ts parser config</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			parser:</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> svelteParser</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			parserOptions:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				parser:</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> tsEslint</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">parser</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">				// needed so ts parser won't skip svelte files</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				extraFileExtensions:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'.svelte'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">				// svelte files need both &#96;tsconfig&#96;s</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				project:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'tsconfig.json'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#032F62;--shiki-dark:#CE9178">'.svelte-kit/tsconfig.json'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				tsconfigRootDir:</span><span style="color:#D73A49;--shiki-dark:#C586C0"> import</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#005CC5;--shiki-dark:#9CDCFE">meta</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">dirname</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		rules:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">			// ignore the $$Props types in shadcn-svelte</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'@typescript-eslint/no-unused-vars'</span><span style="color:#24292E;--shiki-dark:#9CDCFE">:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">				'error'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">				&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">					varsIgnorePattern:</span><span style="color:#032F62;--shiki-dark:#CE9178"> '^</span><span style="color:#005CC5;--shiki-dark:#D7BA7D">\\</span><span style="color:#032F62;--shiki-dark:#CE9178">$</span><span style="color:#005CC5;--shiki-dark:#D7BA7D">\\</span><span style="color:#032F62;--shiki-dark:#CE9178">$(Props|Events|Slots|Generic)'</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">				&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		files:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span><span style="color:#032F62;--shiki-dark:#CE9178">'tests/**/*.ts'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		rules:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'no-empty-pattern'</span><span style="color:#24292E;--shiki-dark:#9CDCFE">:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">				'error'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">				&#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">					// I use &#96;&#123;&#125;&#96; when defining vitest fixtures</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">					allowObjectPatternsAsParameters:</span><span style="color:#005CC5;--shiki-dark:#569CD6"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">				&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		ignores:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'.svelte-kit'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'.vercel'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'.github'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'.storybook'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'.vscode'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'build'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'static'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'package'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'coverage'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#CE9178">			'node_modules'</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">	// this only disables rules; it goes last to win the cascade</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">	eslintConfigPrettier</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">);</span></span>
<span class="line"></span></code></pre>`,$s,Ns,Xa=`<pre class="code-copy-target hidden">import js from '@eslint/js';
import eslintConfigPrettier from 'eslint-config-prettier';
import eslintPluginSvelte from 'eslint-plugin-svelte';
import globals from 'globals';
import svelteParser from 'svelte-eslint-parser';
import tsEslint from 'typescript-eslint';

export default tsEslint.config(
	js.configs.recommended,
	...tsEslint.configs.recommendedTypeChecked,
	&#123;
		// configure the ts parser for ts files
		files: ['**/*.ts'],
		languageOptions: &#123;
			parser: tsEslint.parser,
			parserOptions: &#123;
				project: true,
				tsconfigRootDir: import.meta.dirname
			&#125;
		&#125;
	&#125;,
	&#123;
		files: ['*.js', '*.config.ts'],
		...tsEslint.configs.disableTypeChecked
	&#125;,
	...eslintPluginSvelte.configs['flat/recommended'],
	...eslintPluginSvelte.configs['flat/prettier'],
	&#123;
		// dev tools and server logic run in node environments
		files: ['**/*.server.ts', '*.config.ts', '*.config.js'],
		languageOptions: &#123;
			globals: &#123;
				...globals.node
			&#125;
		&#125;
	&#125;,
	&#123;
		files: ['**/*.svelte'],
		languageOptions: &#123;
			// mounted svelte components run in the browser
			globals: &#123;
				...globals.browser
			&#125;,
			ecmaVersion: 2022,
			sourceType: 'module',
			// setup the svelte parser and give it the ts parser config
			parser: svelteParser,
			parserOptions: &#123;
				parser: tsEslint.parser,
				// needed so ts parser won't skip svelte files
				extraFileExtensions: ['.svelte'],
				// svelte files need both &#96;tsconfig&#96;s
				project: ['tsconfig.json', '.svelte-kit/tsconfig.json'],
				tsconfigRootDir: import.meta.dirname
			&#125;
		&#125;,
		rules: &#123;
			// ignore the $$Props types in shadcn-svelte
			'@typescript-eslint/no-unused-vars': [
				'error',
				&#123;
					varsIgnorePattern: '^\\$\\$(Props|Events|Slots|Generic)'
				&#125;
			]
		&#125;
	&#125;,
	&#123;
		files: ['tests/**/*.ts'],
		rules: &#123;
			'no-empty-pattern': [
				'error',
				&#123;
					// I use &#96;&#123;&#125;&#96; when defining vitest fixtures
					allowObjectPatternsAsParameters: true
				&#125;
			]
		&#125;
	&#125;,
	&#123;
		ignores: [
			'.svelte-kit',
			'.vercel',
			'.github',
			'.storybook',
			'.vscode',
			'build',
			'static',
			'package',
			'coverage',
			'node_modules'
		]
	&#125;,
	// this only disables rules; it goes last to win the cascade
	eslintConfigPrettier
);
</pre>`,Rs,ns,Fa="It was a bit tedious figuring out which config presets are provided as a single config object (<code>eslintConfigPrettier</code> and <code>js.configs.recommended</code>) and which provided multiple config objects and needed to be spread into the <code>tsEslint.config()</code> call.",Le,ts,_a='The <code>&#39;@typescript-eslint/no-unused-vars</code> override for <code>.svelte</code> files is because of a pattern used in <a href="https://www.shadcn-svelte.com/" rel="nofollow">shadcn-svelte</a> to type component props.',Ae,is,xa="The config for svelte files is the most tricky one. The parser needs to be set to the svelte parser. The svelte parser needs to be passed <code>parserOptions</code> which include a parser to use for the <code>&lt;script&gt;</code> blocks in svelte components. I use typescript in them, so it needs the <code>tsEslint.parser</code>, which in turn needs the <code>tsconfig</code> files and the root directory. I found it was necessary to provide both the root <code>tsconfig.json</code> as well as the one in <code>.svelte-kit/</code>.",Me,ls,Ta="Most of the config I think is pretty straightforward once you see it, but getting it all working was a tedious exercise. I‚Äôd suggest copy + pasting it and modifying to suit your needs.",Pe,os,Ha="One notable <em>omission</em> from the config is the prettier plugin. I previously used it, but opted to use prettier separately instead. Formatting and linting are separate concepts, and the general consensus among software engineers trends towards handling them separately. This decision results in faster eslint runs because it doesn‚Äôt need to parse every file a second time with prettier to check formatting. It also means less dependencies and avoids the need for another integration.",Ie,H,La='<a aria-hidden="true" tabindex="-1" href="#adding-a-lint-command-to-packagejson"><span class="icon icon-link"></span></a><a href="#adding-a-lint-command-to-packagejson" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Adding a lint command to <code>package.json</code>',je,rs,Aa="With everything configured, the last steps are to add a command to run the linter and fire it up!",qe,ps,Ma="Crack open the <code>package.json</code> file and add a couple commands to the <code>&quot;scripts&quot;</code> config:",ze,Bs,sn=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">	"scripts"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: &#123;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">		"lint"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: </span><span style="color:#032F62;--shiki-dark:#CE9178">"eslint . --report-unused-disable-directives"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">		"lint:fix"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: </span><span style="color:#032F62;--shiki-dark:#CE9178">"eslint . --fix"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">		// Add this one if you want to always run prettier before linting</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#9CDCFE">		"prelint"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">: </span><span style="color:#032F62;--shiki-dark:#CE9178">"npm run format"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">		// other scripts...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">&#125;</span></span></code></pre>`,Gs,Vs,en=`<pre class="code-copy-target hidden">&#123;
	"scripts": &#123;
		"lint": "eslint . --report-unused-disable-directives",
		"lint:fix": "eslint . --fix",
		// Add this one if you want to always run prettier before linting
		"prelint": "npm run format",
		// other scripts...
	&#125;
&#125;</pre>`,Ws,cs,Pa="The <code>&quot;prelint&quot;</code> script, if specified, will always be run before the <code>&quot;lint&quot;</code> and <code>&quot;lint:fix&quot;</code> commands. It‚Äôs a super convenient way to ensure prettier runs before eslint. I also like that It reuses the existing <code>&quot;format&quot;</code> script rather than rewriting it in a second place with something like <code>&quot;prettier --write . &amp;&amp; eslint .&quot;</code>. DRY code and all that.",Se,ds,Ia="Personally, I don‚Äôt use the <code>&quot;prelint&quot;</code> script in my own projects. I often run the formatter once, but I run the linter multiple times as I work through my linter issues and want to recheck the code. The <code>&quot;prelint&quot;</code> script takes a little while to run, and I‚Äôd rather not wait for it each time.",Oe,ks,ja="Now that everything is set up, crack open your CLI of choice and run <code>npm run lint</code> to get a bunch of automated feedback on your code. Happy hacking!",$e,Es,qa='I‚Äôve found them invaluable on solo projects like this blog and <a href="https://penguinsight.com" rel="nofollow">Penguinsight</a>. It‚Äôs nice to know that my code is getting reviewed by another set of eyes, even if those eyes are a robot living in a GitHub Action workflow.';return{c(){p=l("p"),p.innerHTML=m,f=t(),y=l("p"),y.innerHTML=c,h=t(),u=l("p"),u.innerHTML=Re,Us=t(),L=l("p"),L.textContent=Be,Ys=t(),A=l("ul"),A.innerHTML=Ge,Js=t(),M=l("p"),M.textContent=Ve,Qs=t(),g=l("h2"),g.innerHTML=We,Zs=t(),P=l("p"),P.innerHTML=Ue,Ks=t(),v=l("h3"),v.innerHTML=Ye,Xs=t(),I=l("p"),I.innerHTML=Je,se=t(),ys=new d(!1),fs=k(),us=new d(!1),Cs=t(),j=l("p"),j.innerHTML=Qe,ee=t(),b=l("h3"),b.innerHTML=Ze,ae=t(),q=l("p"),q.innerHTML=Ke,ne=t(),z=l("ol"),z.innerHTML=Xe,te=t(),S=l("p"),S.innerHTML=sa,ie=t(),ms=new d(!1),gs=k(),vs=new d(!1),bs=t(),O=l("p"),O.textContent=ea,le=t(),$=l("ul"),$.innerHTML=aa,oe=t(),N=l("p"),N.innerHTML=na,re=t(),w=l("h3"),w.innerHTML=ta,pe=t(),R=l("p"),R.innerHTML=ia,ce=t(),ws=new d(!1),Ds=k(),Fs=new d(!1),_s=t(),D=l("h3"),D.innerHTML=la,de=t(),B=l("p"),B.innerHTML=oa,ke=t(),xs=new d(!1),Ts=k(),Hs=new d(!1),Ls=t(),G=l("p"),G.innerHTML=ra,Ee=t(),V=l("p"),V.innerHTML=pa,he=t(),W=l("p"),W.innerHTML=ca,ye=t(),U=l("p"),U.textContent=da,fe=t(),F=l("h3"),F.innerHTML=ka,ue=t(),Y=l("p"),Y.innerHTML=Ea,Ce=t(),J=l("p"),J.innerHTML=ha,me=t(),As=new d(!1),Ms=k(),Ps=new d(!1),Is=t(),Q=l("p"),Q.innerHTML=ya,ge=t(),_=l("h2"),_.innerHTML=fa,ve=t(),Z=l("p"),Z.innerHTML=ua,be=t(),K=l("p"),K.textContent=Ca,we=t(),x=l("h3"),x.innerHTML=ma,De=t(),X=l("p"),X.innerHTML=ga,Fe=t(),js=new d(!1),qs=k(),zs=new d(!1),Ss=t(),T=l("h3"),T.innerHTML=va,_e=t(),ss=l("p"),ss.textContent=ba,xe=t(),es=l("ol"),es.innerHTML=wa,Te=t(),as=l("p"),as.innerHTML=Da,He=t(),Os=new d(!1),$s=k(),Ns=new d(!1),Rs=t(),ns=l("p"),ns.innerHTML=Fa,Le=t(),ts=l("p"),ts.innerHTML=_a,Ae=t(),is=l("p"),is.innerHTML=xa,Me=t(),ls=l("p"),ls.textContent=Ta,Pe=t(),os=l("p"),os.innerHTML=Ha,Ie=t(),H=l("h3"),H.innerHTML=La,je=t(),rs=l("p"),rs.textContent=Aa,qe=t(),ps=l("p"),ps.innerHTML=Ma,ze=t(),Bs=new d(!1),Gs=k(),Vs=new d(!1),Ws=t(),cs=l("p"),cs.innerHTML=Pa,Se=t(),ds=l("p"),ds.innerHTML=Ia,Oe=t(),ks=l("p"),ks.innerHTML=ja,$e=t(),Es=l("p"),Es.innerHTML=qa,this.h()},l(s){p=o(s,"P",{["data-svelte-h"]:!0}),r(p)!=="svelte-19d6agz"&&(p.innerHTML=m),f=i(s),y=o(s,"P",{["data-svelte-h"]:!0}),r(y)!=="svelte-59w2ri"&&(y.innerHTML=c),h=i(s),u=o(s,"P",{["data-svelte-h"]:!0}),r(u)!=="svelte-lm5whe"&&(u.innerHTML=Re),Us=i(s),L=o(s,"P",{["data-svelte-h"]:!0}),r(L)!=="svelte-103q6e1"&&(L.textContent=Be),Ys=i(s),A=o(s,"UL",{["data-svelte-h"]:!0}),r(A)!=="svelte-197t2v5"&&(A.innerHTML=Ge),Js=i(s),M=o(s,"P",{["data-svelte-h"]:!0}),r(M)!=="svelte-tqz6zv"&&(M.textContent=Ve),Qs=i(s),g=o(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(g)!=="svelte-4xfkqc"&&(g.innerHTML=We),Zs=i(s),P=o(s,"P",{["data-svelte-h"]:!0}),r(P)!=="svelte-1f9kghm"&&(P.innerHTML=Ue),Ks=i(s),v=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(v)!=="svelte-1dpq7w0"&&(v.innerHTML=Ye),Xs=i(s),I=o(s,"P",{["data-svelte-h"]:!0}),r(I)!=="svelte-1rw47hk"&&(I.innerHTML=Je),se=i(s),ys=E(s,!1),fs=k(),us=E(s,!1),Cs=i(s),j=o(s,"P",{["data-svelte-h"]:!0}),r(j)!=="svelte-k4ds2e"&&(j.innerHTML=Qe),ee=i(s),b=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(b)!=="svelte-1gwxumn"&&(b.innerHTML=Ze),ae=i(s),q=o(s,"P",{["data-svelte-h"]:!0}),r(q)!=="svelte-aovl55"&&(q.innerHTML=Ke),ne=i(s),z=o(s,"OL",{["data-svelte-h"]:!0}),r(z)!=="svelte-volqe7"&&(z.innerHTML=Xe),te=i(s),S=o(s,"P",{["data-svelte-h"]:!0}),r(S)!=="svelte-2v77kd"&&(S.innerHTML=sa),ie=i(s),ms=E(s,!1),gs=k(),vs=E(s,!1),bs=i(s),O=o(s,"P",{["data-svelte-h"]:!0}),r(O)!=="svelte-w9a446"&&(O.textContent=ea),le=i(s),$=o(s,"UL",{["data-svelte-h"]:!0}),r($)!=="svelte-1s995mp"&&($.innerHTML=aa),oe=i(s),N=o(s,"P",{["data-svelte-h"]:!0}),r(N)!=="svelte-1wrrzwo"&&(N.innerHTML=na),re=i(s),w=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(w)!=="svelte-1gv59yo"&&(w.innerHTML=ta),pe=i(s),R=o(s,"P",{["data-svelte-h"]:!0}),r(R)!=="svelte-110zqo9"&&(R.innerHTML=ia),ce=i(s),ws=E(s,!1),Ds=k(),Fs=E(s,!1),_s=i(s),D=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(D)!=="svelte-18knu64"&&(D.innerHTML=la),de=i(s),B=o(s,"P",{["data-svelte-h"]:!0}),r(B)!=="svelte-1yogda2"&&(B.innerHTML=oa),ke=i(s),xs=E(s,!1),Ts=k(),Hs=E(s,!1),Ls=i(s),G=o(s,"P",{["data-svelte-h"]:!0}),r(G)!=="svelte-13eid77"&&(G.innerHTML=ra),Ee=i(s),V=o(s,"P",{["data-svelte-h"]:!0}),r(V)!=="svelte-bj6mdb"&&(V.innerHTML=pa),he=i(s),W=o(s,"P",{["data-svelte-h"]:!0}),r(W)!=="svelte-1os89jn"&&(W.innerHTML=ca),ye=i(s),U=o(s,"P",{["data-svelte-h"]:!0}),r(U)!=="svelte-1p5zcp8"&&(U.textContent=da),fe=i(s),F=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(F)!=="svelte-n7ws53"&&(F.innerHTML=ka),ue=i(s),Y=o(s,"P",{["data-svelte-h"]:!0}),r(Y)!=="svelte-j7r4fg"&&(Y.innerHTML=Ea),Ce=i(s),J=o(s,"P",{["data-svelte-h"]:!0}),r(J)!=="svelte-12ek43x"&&(J.innerHTML=ha),me=i(s),As=E(s,!1),Ms=k(),Ps=E(s,!1),Is=i(s),Q=o(s,"P",{["data-svelte-h"]:!0}),r(Q)!=="svelte-qxxwsp"&&(Q.innerHTML=ya),ge=i(s),_=o(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(_)!=="svelte-1yp82k2"&&(_.innerHTML=fa),ve=i(s),Z=o(s,"P",{["data-svelte-h"]:!0}),r(Z)!=="svelte-13jc2pd"&&(Z.innerHTML=ua),be=i(s),K=o(s,"P",{["data-svelte-h"]:!0}),r(K)!=="svelte-1dqgyon"&&(K.textContent=Ca),we=i(s),x=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(x)!=="svelte-1rxrh2j"&&(x.innerHTML=ma),De=i(s),X=o(s,"P",{["data-svelte-h"]:!0}),r(X)!=="svelte-1jy7x7i"&&(X.innerHTML=ga),Fe=i(s),js=E(s,!1),qs=k(),zs=E(s,!1),Ss=i(s),T=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(T)!=="svelte-1uday53"&&(T.innerHTML=va),_e=i(s),ss=o(s,"P",{["data-svelte-h"]:!0}),r(ss)!=="svelte-1d3xafx"&&(ss.textContent=ba),xe=i(s),es=o(s,"OL",{["data-svelte-h"]:!0}),r(es)!=="svelte-18dbg18"&&(es.innerHTML=wa),Te=i(s),as=o(s,"P",{["data-svelte-h"]:!0}),r(as)!=="svelte-uraean"&&(as.innerHTML=Da),He=i(s),Os=E(s,!1),$s=k(),Ns=E(s,!1),Rs=i(s),ns=o(s,"P",{["data-svelte-h"]:!0}),r(ns)!=="svelte-ka0m9m"&&(ns.innerHTML=Fa),Le=i(s),ts=o(s,"P",{["data-svelte-h"]:!0}),r(ts)!=="svelte-1d643sl"&&(ts.innerHTML=_a),Ae=i(s),is=o(s,"P",{["data-svelte-h"]:!0}),r(is)!=="svelte-1q8phol"&&(is.innerHTML=xa),Me=i(s),ls=o(s,"P",{["data-svelte-h"]:!0}),r(ls)!=="svelte-c26n3y"&&(ls.textContent=Ta),Pe=i(s),os=o(s,"P",{["data-svelte-h"]:!0}),r(os)!=="svelte-1l2j2ko"&&(os.innerHTML=Ha),Ie=i(s),H=o(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(H)!=="svelte-fockc6"&&(H.innerHTML=La),je=i(s),rs=o(s,"P",{["data-svelte-h"]:!0}),r(rs)!=="svelte-1hso8ru"&&(rs.textContent=Aa),qe=i(s),ps=o(s,"P",{["data-svelte-h"]:!0}),r(ps)!=="svelte-tt1l48"&&(ps.innerHTML=Ma),ze=i(s),Bs=E(s,!1),Gs=k(),Vs=E(s,!1),Ws=i(s),cs=o(s,"P",{["data-svelte-h"]:!0}),r(cs)!=="svelte-1s2v09t"&&(cs.innerHTML=Pa),Se=i(s),ds=o(s,"P",{["data-svelte-h"]:!0}),r(ds)!=="svelte-1piesm5"&&(ds.innerHTML=Ia),Oe=i(s),ks=o(s,"P",{["data-svelte-h"]:!0}),r(ks)!=="svelte-1bw5zzv"&&(ks.innerHTML=ja),$e=i(s),Es=o(s,"P",{["data-svelte-h"]:!0}),r(Es)!=="svelte-d01a4z"&&(Es.innerHTML=qa),this.h()},h(){C(g,"id","setting-up-prettier"),C(v,"id","installing-prettier-packages"),ys.a=fs,us.a=Cs,C(b,"id","configuring-prettier"),ms.a=gs,vs.a=bs,C(w,"id","prettier-ignore-file"),ws.a=Ds,Fs.a=_s,C(D,"id","running-prettier-via-npm-scripts"),xs.a=Ts,Hs.a=Ls,C(F,"id","configuring-zed-to-format-on-save-using-prettier"),As.a=Ms,Ps.a=Is,C(_,"id","static-code-analysis-for-svelte--typescript-using-eslint"),C(x,"id","installing-eslint-and-plugins"),js.a=qs,zs.a=Ss,C(T,"id","configuring-eslint"),Os.a=$s,Ns.a=Rs,C(H,"id","adding-a-lint-command-to-packagejson"),Bs.a=Gs,Vs.a=Ws},m(s,e){a(s,p,e),a(s,f,e),a(s,y,e),a(s,h,e),a(s,u,e),a(s,Us,e),a(s,L,e),a(s,Ys,e),a(s,A,e),a(s,Js,e),a(s,M,e),a(s,Qs,e),a(s,g,e),a(s,Zs,e),a(s,P,e),a(s,Ks,e),a(s,v,e),a(s,Xs,e),a(s,I,e),a(s,se,e),ys.m($a,s,e),a(s,fs,e),us.m(Na,s,e),a(s,Cs,e),a(s,j,e),a(s,ee,e),a(s,b,e),a(s,ae,e),a(s,q,e),a(s,ne,e),a(s,z,e),a(s,te,e),a(s,S,e),a(s,ie,e),ms.m(Ra,s,e),a(s,gs,e),vs.m(Ba,s,e),a(s,bs,e),a(s,O,e),a(s,le,e),a(s,$,e),a(s,oe,e),a(s,N,e),a(s,re,e),a(s,w,e),a(s,pe,e),a(s,R,e),a(s,ce,e),ws.m(Ga,s,e),a(s,Ds,e),Fs.m(Va,s,e),a(s,_s,e),a(s,D,e),a(s,de,e),a(s,B,e),a(s,ke,e),xs.m(Wa,s,e),a(s,Ts,e),Hs.m(Ua,s,e),a(s,Ls,e),a(s,G,e),a(s,Ee,e),a(s,V,e),a(s,he,e),a(s,W,e),a(s,ye,e),a(s,U,e),a(s,fe,e),a(s,F,e),a(s,ue,e),a(s,Y,e),a(s,Ce,e),a(s,J,e),a(s,me,e),As.m(Ya,s,e),a(s,Ms,e),Ps.m(Ja,s,e),a(s,Is,e),a(s,Q,e),a(s,ge,e),a(s,_,e),a(s,ve,e),a(s,Z,e),a(s,be,e),a(s,K,e),a(s,we,e),a(s,x,e),a(s,De,e),a(s,X,e),a(s,Fe,e),js.m(Qa,s,e),a(s,qs,e),zs.m(Za,s,e),a(s,Ss,e),a(s,T,e),a(s,_e,e),a(s,ss,e),a(s,xe,e),a(s,es,e),a(s,Te,e),a(s,as,e),a(s,He,e),Os.m(Ka,s,e),a(s,$s,e),Ns.m(Xa,s,e),a(s,Rs,e),a(s,ns,e),a(s,Le,e),a(s,ts,e),a(s,Ae,e),a(s,is,e),a(s,Me,e),a(s,ls,e),a(s,Pe,e),a(s,os,e),a(s,Ie,e),a(s,H,e),a(s,je,e),a(s,rs,e),a(s,qe,e),a(s,ps,e),a(s,ze,e),Bs.m(sn,s,e),a(s,Gs,e),Vs.m(en,s,e),a(s,Ws,e),a(s,cs,e),a(s,Se,e),a(s,ds,e),a(s,Oe,e),a(s,ks,e),a(s,$e,e),a(s,Es,e)},p:nn,d(s){s&&(n(p),n(f),n(y),n(h),n(u),n(Us),n(L),n(Ys),n(A),n(Js),n(M),n(Qs),n(g),n(Zs),n(P),n(Ks),n(v),n(Xs),n(I),n(se),n(fs),ys.d(),us.d(),n(Cs),n(j),n(ee),n(b),n(ae),n(q),n(ne),n(z),n(te),n(S),n(ie),n(gs),ms.d(),vs.d(),n(bs),n(O),n(le),n($),n(oe),n(N),n(re),n(w),n(pe),n(R),n(ce),n(Ds),ws.d(),Fs.d(),n(_s),n(D),n(de),n(B),n(ke),n(Ts),xs.d(),Hs.d(),n(Ls),n(G),n(Ee),n(V),n(he),n(W),n(ye),n(U),n(fe),n(F),n(ue),n(Y),n(Ce),n(J),n(me),n(Ms),As.d(),Ps.d(),n(Is),n(Q),n(ge),n(_),n(ve),n(Z),n(be),n(K),n(we),n(x),n(De),n(X),n(Fe),n(qs),js.d(),zs.d(),n(Ss),n(T),n(_e),n(ss),n(xe),n(es),n(Te),n(as),n(He),n($s),Os.d(),Ns.d(),n(Rs),n(ns),n(Le),n(ts),n(Ae),n(is),n(Me),n(ls),n(Pe),n(os),n(Ie),n(H),n(je),n(rs),n(qe),n(ps),n(ze),n(Gs),Bs.d(),Vs.d(),n(Ws),n(cs),n(Se),n(ds),n(Oe),n(ks),n($e),n(Es))}}}function fn(hs){let p,m;const f=[hs[0],Oa];let y={$$slots:{default:[yn]},$$scope:{ctx:hs}};for(let c=0;c<f.length;c+=1)y=Ne(y,f[c]);return p=new hn({props:y}),{c(){on(p.$$.fragment)},l(c){rn(p.$$.fragment,c)},m(c,h){pn(p,c,h),m=!0},p(c,[h]){const u=h&1?En(f,[h&1&&Sa(c[0]),h&0&&Sa(Oa)]):{};h&2&&(u.$$scope={dirty:h,ctx:c}),p.$set(u)},i(c){m||(cn(p.$$.fragment,c),m=!0)},o(c){dn(p.$$.fragment,c),m=!1},d(c){kn(p,c)}}}const Oa={title:"Linting and formatting a svelte project",description:"Pulling together a bunch of language tools can be a bother, but I find automated formatting & code review tools are worth the hassle.",slug:"lint-format-svelte",publish:!0,lastmod:"2024-04-15T00:00:00.000Z",date:"2024-04-13T00:00:00.000Z",aliases:null,tags:["status/budding","topic/webdev"],timeToRead:10,internalLinks:[],flashcards:[]};function un(hs,p,m){return hs.$$set=f=>{m(0,p=Ne(Ne({},p),za(f)))},p=za(p),[p]}class bn extends tn{constructor(p){super(),ln(this,p,un,fn,an,{})}}export{bn as default,Oa as metadata};
