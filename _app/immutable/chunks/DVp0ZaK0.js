import{t as $,a as T}from"./Bj2ZHtgv.js";import"./DBHxkW5N.js";import{s as a,f as M,R}from"./fxLts69-.js";import{h as e}from"./RJ7APweJ.js";import{l as P,s as S}from"./BMf7CqPI.js";import{M as H}from"./B3eZfqHO.js";const w={title:"git-cheatsheet",description:"Some common scenarios and how to resolve them using git.",slug:"notes/git-cheatsheet",publish:!0,lastmod:"2023-06-28T00:00:00.000Z",date:"2022-05-24T00:00:00.000Z",aliases:null,tags:["status/seedling"],readTime:5,internalLinks:[],flashcards:[]},{title:z,description:F,slug:U,publish:W,lastmod:X,date:J,aliases:K,tags:Q,readTime:V,internalLinks:aa,flashcards:ea}=w;var L=$('<h2 id="create-a-branch-with-current-changes"><a aria-hidden="true" tabindex="-1" href="#create-a-branch-with-current-changes"><span class="icon icon-link"></span></a><a href="#create-a-branch-with-current-changes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Create a branch with current changes</h2> <p>Sometimes I’m working on a problem and end up side-tracked and solve another problem, but forgot to switch branches first. Doh! This one is an easy fix:</p> <ol><li>Create a new branch and checkout to it (single step)</li> <li>Stage the changes</li> <li>Commit changes to it</li> <li>Push the branch to the remote/tracking</li></ol> <!><!> <h2 id="amend-a-previous-commit"><a aria-hidden="true" tabindex="-1" href="#amend-a-previous-commit"><span class="icon icon-link"></span></a><a href="#amend-a-previous-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Amend a previous commit</h2> <p>You’ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then there’s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.</p> <!><!> <p>If you’ve already <code>git push</code>ed the original commit, <em>amend</em>ing it would change history and isn’t allowed with <code>git push</code> by default. However, this can be overcome by forcing the push to overwrite the old commit in history with the amended commit.</p> <!><!> <h2 id="go-back-to-an-old-commit"><a aria-hidden="true" tabindex="-1" href="#go-back-to-an-old-commit"><span class="icon icon-link"></span></a><a href="#go-back-to-an-old-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Go back to an old commit</h2> <p>This command will rewind history locally to the specified git commit.</p> <!><!> <p>If you want to erase the changes that followed on the remote copy, you can additionally run:</p> <!><!> <p>Which will force git to push your current history and overwrite whatever currently exists on remote.</p> <h2 id="merge-changes-from-branch-a-into-branch-b"><a aria-hidden="true" tabindex="-1" href="#merge-changes-from-branch-a-into-branch-b"><span class="icon icon-link"></span></a><a href="#merge-changes-from-branch-a-into-branch-b" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Merge changes from branch A into branch B</h2> <p>This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.</p> <p>First, make sure you have the latest remote changes locally.</p> <!><!> <p>Make sure you have the branch you want to merge changes <em>into</em> checked out locally:</p> <!><!> <p>And then merge the changes from branch A in:</p> <!><!> <h2 id="rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"><a aria-hidden="true" tabindex="-1" href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"><span class="icon icon-link"></span></a><a href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Rebase changes in a branch onto a newer commit from the parent branch</h2> <p>This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.</p> <p>Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:</p> <!><!> <p>The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:</p> <!><!> <h2 id="move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"><a aria-hidden="true" tabindex="-1" href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"><span class="icon icon-link"></span></a><a href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Move changes from a protected branch to a feature branch after accidentally committing without switching branches first</h2> <p>Often I will pull latest from the <code>main</code> branch and start making changes for the ticket I’m working on. After some progress I will then commit my changes, forgetting that I didn’t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I can’t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways I’ve found to do this.</p> <p>Option 1 works conceptually by taking the following actions:</p> <ol><li>Undo my last commit to <code>main</code></li> <li>create & checkout a new feature branch</li> <li>commit my changes to it</li></ol> <!><!> <p>Option 2:</p> <ol><li>Create a branch from my commit locally</li> <li>Push my new branch with changes</li> <li>Checkout my local <code>main</code> branch</li> <li>Reset it to the same commit as on <code>origin</code></li></ol>',1);function sa(D,x){const _=P(x,["children","$$slots","$$events","$$legacy"]);H(D,S(()=>_,w,{children:(E,O)=>{var s=L(),i=a(M(s),6);e(i,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -b</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-second-feature</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> add</span><span style="color:#B56959;--shiki-dark:#C98A7D"> .</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -m</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">Moving these changes to their own branch</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -u</span><span style="color:#B56959;--shiki-dark:#C98A7D"> origin</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-second-feature</span></span></code></pre>`);var n=a(i);e(n,()=>`<pre class="code-copy-target hidden">git checkout -b feature/my-second-feature
git add .
git commit -m "Moving these changes to their own branch"
git push -u origin feature/my-second-feature</pre>`);var t=a(n,6);e(t,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --amend</span></span></code></pre>');var o=a(t);e(o,()=>'<pre class="code-copy-target hidden">git commit --amend</pre>');var r=a(o,4);e(r,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --force</span></span></code></pre>');var c=a(r);e(c,()=>'<pre class="code-copy-target hidden">git push --force</pre>');var l=a(c,6);e(l,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> reset</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --hard</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">commit</span><span style="color:#B56959;--shiki-dark:#C98A7D"> has</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">h</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>');var h=a(l);e(h,()=>'<pre class="code-copy-target hidden">git reset --hard &lt;commit hash&gt;</pre>');var d=a(h,4);e(d,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -f</span></span></code></pre>');var p=a(d);e(p,()=>'<pre class="code-copy-target hidden">git push -f</pre>');var k=a(p,10);e(k,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span></code></pre>`);var m=a(k);e(m,()=>`<pre class="code-copy-target hidden">git fetch
git pull</pre>`);var g=a(m,4);e(g,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Branch</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">B</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>');var f=a(g);e(f,()=>'<pre class="code-copy-target hidden">git checkout &lt;BranchB&gt;</pre>');var y=a(f,4);e(y,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> merge</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Branch</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">A</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>');var u=a(y);e(u,()=>'<pre class="code-copy-target hidden">git merge &lt;BranchA&gt;</pre>');var b=a(u,8);e(b,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> delta</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span></code></pre>`);var A=a(b);e(A,()=>`<pre class="code-copy-target hidden">git checkout main
git fetch
git pull
git checkout delta
git fetch
git pull</pre>`);var v=a(A,4);e(v,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> delta</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> rebase</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span></code></pre>`);var B=a(v);e(B,()=>`<pre class="code-copy-target hidden">git checkout delta
git rebase main</pre>`);var C=a(B,10);e(C,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> reset</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --soft</span><span style="color:#B56959;--shiki-dark:#C98A7D"> HEAD~1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -b</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-new-feature</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span></span></code></pre>`);var I=a(C);e(I,()=>`<pre class="code-copy-target hidden">git reset --soft HEAD~1
git checkout -b feature/my-new-feature
git commit</pre>`),R(4),T(E,s)},$$slots:{default:!0}}))}export{sa as default,w as metadata};
