import{s as R,C as x,a5 as M,f as y,a as k,I as P,g as D,u as C,c as d,K as j,i,d as p,A as X}from"./scheduler.73a07135.js";import{S as z,i as Q,b as N,d as O,m as V,a as Y,t as Z,e as G}from"./index.ba10b74b.js";import{g as W,a as q}from"./spread.8a54911c.js";import{M as ss}from"./MDSveXNoteLayout.09f3dd40.js";import{T as as}from"./Table.fd88fd70.js";function es(h){let a,r="<tr><th></th> <th>Nominal</th> <th>Structural</th></tr>",o,n,t="<tr><td>Languages</td> <td>C, C++, Java, C#</td> <td>TypeScript, Go</td></tr> <tr><td>Type compatibility requirements</td> <td>Structure and name</td> <td>Structure</td></tr> <tr><td>Specificity</td> <td>Strict</td> <td>Flexible</td></tr>";return{c(){a=y("thead"),a.innerHTML=r,o=k(),n=y("tbody"),n.innerHTML=t},l(e){a=D(e,"THEAD",{["data-svelte-h"]:!0}),C(a)!=="svelte-rsxkvl"&&(a.innerHTML=r),o=d(e),n=D(e,"TBODY",{["data-svelte-h"]:!0}),C(n)!=="svelte-1m6m8v6"&&(n.innerHTML=t)},m(e,c){i(e,a,c),i(e,o,c),i(e,n,c)},p:X,d(e){e&&(p(a),p(o),p(n))}}}function ts(h){let a,r="Typescript uses an approach to types called “structural typing”. Structural types are compatible if they share the same structure: the same named members and those members have the same types. This differs from languages such as C &amp; C++ which use an approach called “nominal typing.” Nominal types are only equivalent if they share the same structure <strong>and name</strong>. Here’s a quick reference:",o,n,t,e,c="I find it easiest to understand how structural types work with code examples:",g,A,J=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> A</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123; </span><span style="color:#E36209;--shiki-dark:#9CDCFE">a</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> number</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#125;;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> B</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123; </span><span style="color:#E36209;--shiki-dark:#9CDCFE">a</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> number</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#E36209;--shiki-dark:#9CDCFE">b</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// &#96;a1&#96; is explicitly typed as an &#96;A&#96; object</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> a1</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> A</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123; </span><span style="color:#24292E;--shiki-dark:#9CDCFE">a:</span><span style="color:#005CC5;--shiki-dark:#B5CEA8"> 123</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#125;;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// &#96;a2&#96; is not explicitly typed as &#96;A&#96;...</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> a2</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123; </span><span style="color:#24292E;--shiki-dark:#9CDCFE">a:</span><span style="color:#005CC5;--shiki-dark:#B5CEA8"> 321</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#125;;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// But its structure matches,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// so it can be assigned to a type &#96;A&#96; object</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">a1</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> a2</span><span style="color:#24292E;--shiki-dark:#E6E6E6">; </span><span style="color:#6A737D;--shiki-dark:#6A9955">// Valid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// &#96;b&#96; is explicitly typed as a &#96;B&#96; object</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> b</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> B</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> &#123;</span><span style="color:#24292E;--shiki-dark:#9CDCFE">a:</span><span style="color:#005CC5;--shiki-dark:#B5CEA8"> 135</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#24292E;--shiki-dark:#9CDCFE">b:</span><span style="color:#032F62;--shiki-dark:#CE9178"> "abc"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">&#125;;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// &#96;b&#96; can be assigned to an &#96;A&#96; object </span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">// because it is a superset of the structure of A</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">a2</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> b</span><span style="color:#24292E;--shiki-dark:#E6E6E6">; </span><span style="color:#6A737D;--shiki-dark:#6A9955">// Valid</span></span></code></pre>`,b,E,$="This approach is really convenient on the web where it’s common for data to come from external APIs; they may change the data provided. Structural typing makes it easy to handle extra data. In the <code>a2 = b</code> example above, the extra data on <code>b</code> is “sliced” off, narrowing it to an <code>A</code> object. The extra field on <code>B</code> doesn’t cause any issues! This makes it easy to opt-in to using additional data on a type when I’m ready, and to continue working until then.",w,u,H="TypeScript type compatibility can <em>reduce clarity</em> that a developer could otherwise provide using a named type. This might be an issue when trying to distinguish between <em>structurally</em> equivalent types that are <em>nominally</em> different. As an example, consider a <code>UserID</code> and <code>PostID</code> that are both represented as strings:",F,_,K=`<pre class="shiki shiki-themes github-light slack-dark twoslash lsp" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0" ts twoslash highlight="[object Object]"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> </span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> UserID</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>UserID</span></span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> </span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> PostID</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>PostID</span></span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> </span><span style="color:#24292E;--shiki-dark:#9CDCFE"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> user</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>user</span></span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> </span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> UserID</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>UserID</span></span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#032F62;--shiki-dark:#CE9178"> "allan"</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> </span><span style="color:#24292E;--shiki-dark:#9CDCFE"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> post</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>post</span></span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> </span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">type</span><span style="color:#6F42C1;--shiki-dark:#4EC9B0"> PostID</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>PostID</span></span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> </span><span style="color:#24292E;--shiki-dark:#9CDCFE"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> user</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">:</span><span style="color:#005CC5;--shiki-dark:#4EC9B0"> string</span></span></code></span>user</span></span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span></code></pre>`,v,m,I="These are two different <em>named</em> types but because they are <em>structurally</em> identical TypeScript will allow you to assign a <code>UserID</code> value to a <code>PostID</code> object. Yikes! Compatibility makes problems like this possible.",T,f,L='Fortunately, it can be solved in TypeScript. <a href="/notes/Type%20branding%20removes%20structural%20type%20compatibility/">Type branding removes structural type compatibility</a>, and can be used to prevent this type of problem.',B;return n=new as({props:{$$slots:{default:[es]},$$scope:{ctx:h}}}),{c(){a=y("p"),a.innerHTML=r,o=k(),N(n.$$.fragment),t=k(),e=y("p"),e.textContent=c,g=k(),A=new P(!1),b=k(),E=y("p"),E.innerHTML=$,w=k(),u=y("p"),u.innerHTML=H,F=k(),_=new P(!1),v=k(),m=y("p"),m.innerHTML=I,T=k(),f=y("p"),f.innerHTML=L,this.h()},l(s){a=D(s,"P",{["data-svelte-h"]:!0}),C(a)!=="svelte-2kmkxw"&&(a.innerHTML=r),o=d(s),O(n.$$.fragment,s),t=d(s),e=D(s,"P",{["data-svelte-h"]:!0}),C(e)!=="svelte-44hwdv"&&(e.textContent=c),g=d(s),A=j(s,!1),b=d(s),E=D(s,"P",{["data-svelte-h"]:!0}),C(E)!=="svelte-1lw6j2q"&&(E.innerHTML=$),w=d(s),u=D(s,"P",{["data-svelte-h"]:!0}),C(u)!=="svelte-rhottr"&&(u.innerHTML=H),F=d(s),_=j(s,!1),v=d(s),m=D(s,"P",{["data-svelte-h"]:!0}),C(m)!=="svelte-5ewpk0"&&(m.innerHTML=I),T=d(s),f=D(s,"P",{["data-svelte-h"]:!0}),C(f)!=="svelte-1yxotue"&&(f.innerHTML=L),this.h()},h(){A.a=b,_.a=v},m(s,l){i(s,a,l),i(s,o,l),V(n,s,l),i(s,t,l),i(s,e,l),i(s,g,l),A.m(J,s,l),i(s,b,l),i(s,E,l),i(s,w,l),i(s,u,l),i(s,F,l),_.m(K,s,l),i(s,v,l),i(s,m,l),i(s,T,l),i(s,f,l),B=!0},p(s,l){const S={};l&2&&(S.$$scope={dirty:l,ctx:s}),n.$set(S)},i(s){B||(Y(n.$$.fragment,s),B=!0)},o(s){Z(n.$$.fragment,s),B=!1},d(s){s&&(p(a),p(o),p(t),p(e),p(g),A.d(),p(b),p(E),p(w),p(u),p(F),_.d(),p(v),p(m),p(T),p(f)),G(n,s)}}}function ns(h){let a,r;const o=[h[0],U];let n={$$slots:{default:[ts]},$$scope:{ctx:h}};for(let t=0;t<o.length;t+=1)n=x(n,o[t]);return a=new ss({props:n}),{c(){N(a.$$.fragment)},l(t){O(a.$$.fragment,t)},m(t,e){V(a,t,e),r=!0},p(t,[e]){const c=e&1?W(o,[e&1&&q(t[0]),e&0&&q(U)]):{};e&2&&(c.$$scope={dirty:e,ctx:t}),a.$set(c)},i(t){r||(Y(a.$$.fragment,t),r=!0)},o(t){Z(a.$$.fragment,t),r=!1},d(t){G(a,t)}}}const U={title:"Structural types increase data compatibility",description:"Structural types are only concerned with the shape of data, rather than the names of types. This makes data types more compatible.",slug:"structural-types-increase-compatibility",publish:!0,lastmod:"2024-02-04T00:00:00.000Z",date:"2024-02-04T00:00:00.000Z",aliases:null,tags:["status/seedling","topic/typescript"],timeToRead:2,internalLinks:["/notes/Type%20branding%20removes%20structural%20type%20compatibility/"],flashcards:[]};function ls(h,a,r){return h.$$set=o=>{r(0,a=x(x({},a),M(o)))},a=M(a),[a]}class ks extends z{constructor(a){super(),Q(this,a,ls,ns,R,{})}}export{ks as default,U as metadata};
