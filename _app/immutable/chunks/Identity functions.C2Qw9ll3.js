import{s as pa,p as vs,q as Ys,e as r,a as p,H as c,u as h,c as t,m as k,g as e,v as d,o as Js,i as n,n as ea,f as o}from"./scheduler.ewBkyc9q.js";import{S as ia,i as ra,c as ta,a as ka,m as ca,t as ha,b as da,d as ya}from"./index.DpmaPz1F.js";import{g as Aa,a as Ps}from"./spread.CgU5AtxT.js";import{M as Ba}from"./MDSveXNoteLayout.VxS_OZiY.js";function Da(H){let l,u="Identity functions are a tool to improve type information. They take the form of a function that provides TypeScript with extra type information and typically have a return value that is identical to argument passed to them. Typically identity functions are used to either provide a library’s users with better type information, or for a library to get better type information from a user. In both cases, the goal seems to be improving ease of use and developer experience.",B,y,i='<a aria-hidden="true" tabindex="-1" href="#providing-type-hints-to-api-consumers"><span class="icon icon-link"></span></a><a href="#providing-type-hints-to-api-consumers" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Providing type hints to API consumers',A,D,Es="Libraries with many configuration options commonly use an identity function to make it easier for users to configure them. This is typically done by exporting a function with a name like <code>defineConfig()</code>. It will take a parameter typed identically to the library’s configuration object. Since this tells the IDE what values exist on the object, it can display those options to the users. I much prefer this in-editor experience to tabbing back and forth between my code and the docs. Some tools I use that take this approach are:",ts,f,bs='<li><a href="https://typescript-eslint.io/packages/typescript-eslint#config" rel="nofollow">typescript-eslint</a></li> <li><a href="https://vitejs.dev/config/#config-intellisense" rel="nofollow">vite’s defineConfig</a></li>',ks,w,Fs="For example, compare the intellisense help with and without Vite’s <code>defineConfig()</code>:",cs,S,qs=`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash filename="vite.config.ts" data-tsplay="https://typescriptlang.org/play/#code/JYWwDg9gTgLgBAbzgEwKYDNgDtUGEJaYDmcAvnOlBCHAOQBuwMqtAUOwPQdwACANhCIAuOADkIcbMz59gAZ1RYFAbjgAVAJ5hUAZQDGUYGHjIIqOVlrwA1lggB3ODAAW8yXLgBDOI2Zw9BMRwEABGAFaoejAAdOwBSvDxxACMcAC8iHAhngoitBy0ZMqc3PyCImiYOPiEwES0HmCeUJ4gqMxQ7k5aqMjRcABCqM4QfMgi9J6yyP6BdcHGwARyAIQlvHYAolBUUHKs8XKJc0QATOkoGNh4JwAUSNm5dAVkAJTFXHBf3z+-f-9fAB6AB92KwgA"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> defineConfig</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">config</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">UserConfig</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> UserConfig</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91">3</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> overloads</span><span style="color:#999999;--shiki-dark:#666666">)</span></code><div class="twoslash-popup-docs">Type helper to make it easier to use vite.config.ts
accepts a direct 
&#123;@link 
UserConfig
&#125;
 object, or a function that returns it.
The function receives a 
&#123;@link 
ConfigEnv
&#125;
 object.</div></span>defineConfig</span></span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">vite</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span><div class="twoslash-tag-line twoslash-tag-log-line"><span class="twoslash-tag-icon tag-log-icon"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M17 22v-8h-4v2h2v6h-3v2h8v-2zM16 8a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 16 8"></path><path fill="currentColor" d="M26 28H6a2.002 2.002 0 0 1-2-2V6a2.002 2.002 0 0 1 2-2h20a2.002 2.002 0 0 1 2 2v20a2.002 2.002 0 0 1-2 2M6 6v20h20V6Z"></path></svg></span>No intellisense; TypeScript doesn't know this is a vite config object.</div><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash filename="vite.config.ts"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">config1</span><span style="color:#999999;--shiki-dark:#666666">: &#123;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    base</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>config1</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123; </span><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">base</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>base</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">/</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666"> &#125;;</span></span>
<span class="line"></span>
<span class="line"></span><div class="twoslash-tag-line twoslash-tag-log-line"><span class="twoslash-tag-icon tag-log-icon"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M17 22v-8h-4v2h2v6h-3v2h8v-2zM16 8a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 16 8"></path><path fill="currentColor" d="M26 28H6a2.002 2.002 0 0 1-2-2V6a2.002 2.002 0 0 1 2-2h20a2.002 2.002 0 0 1 2 2v20a2.002 2.002 0 0 1-2 2M6 6v20h20V6Z"></path></svg></span>defineConfig's parameter is typed. Behold: valid config options!</div><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">config2</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">UserConfig</span></code></span>config2</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> </span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> defineConfig</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">config</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">UserConfig</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> UserConfig</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91">3</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> overloads</span><span style="color:#999999;--shiki-dark:#666666">)</span></code><div class="twoslash-popup-docs">Type helper to make it easier to use vite.config.ts
accepts a direct 
&#123;@link 
UserConfig
&#125;
 object, or a function that returns it.
The function receives a 
&#123;@link 
ConfigEnv
&#125;
 object.</div></span>defineConfig</span></span><span style="color:#999999;--shiki-dark:#666666">(&#123; </span><span style="color:#998418;--shiki-dark:#B8A965"><span>b<span class="twoslash-completion-cursor"><ul class="twoslash-completion-list"><li><span class="twoslash-completions-icon completions-property"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M12.1 2a9.8 9.8 0 0 0-5.4 1.6l6.4 6.4a2.1 2.1 0 0 1 .2 3a2.1 2.1 0 0 1-3-.2L3.7 6.4A9.84 9.84 0 0 0 2 12.1a10.14 10.14 0 0 0 10.1 10.1a10.9 10.9 0 0 0 2.6-.3l6.7 6.7a5 5 0 0 0 7.1-7.1l-6.7-6.7a10.9 10.9 0 0 0 .3-2.6A10 10 0 0 0 12.1 2m8 10.1a7.61 7.61 0 0 1-.3 2.1l-.3 1.1l.8.8l6.7 6.7a2.88 2.88 0 0 1 .9 2.1A2.72 2.72 0 0 1 27 27a2.9 2.9 0 0 1-4.2 0l-6.7-6.7l-.8-.8l-1.1.3a7.61 7.61 0 0 1-2.1.3a8.27 8.27 0 0 1-5.7-2.3A7.63 7.63 0 0 1 4 12.1a8.33 8.33 0 0 1 .3-2.2l4.4 4.4a4.14 4.14 0 0 0 5.9.2a4.14 4.14 0 0 0-.2-5.9L10 4.2a6.45 6.45 0 0 1 2-.3a8.27 8.27 0 0 1 5.7 2.3a8.49 8.49 0 0 1 2.4 5.9"></path></svg></span><span><span class="twoslash-completions-matched">b</span><span class="twoslash-completions-unmatched">ase</span></span></li><li><span class="twoslash-completions-icon completions-property"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M12.1 2a9.8 9.8 0 0 0-5.4 1.6l6.4 6.4a2.1 2.1 0 0 1 .2 3a2.1 2.1 0 0 1-3-.2L3.7 6.4A9.84 9.84 0 0 0 2 12.1a10.14 10.14 0 0 0 10.1 10.1a10.9 10.9 0 0 0 2.6-.3l6.7 6.7a5 5 0 0 0 7.1-7.1l-6.7-6.7a10.9 10.9 0 0 0 .3-2.6A10 10 0 0 0 12.1 2m8 10.1a7.61 7.61 0 0 1-.3 2.1l-.3 1.1l.8.8l6.7 6.7a2.88 2.88 0 0 1 .9 2.1A2.72 2.72 0 0 1 27 27a2.9 2.9 0 0 1-4.2 0l-6.7-6.7l-.8-.8l-1.1.3a7.61 7.61 0 0 1-2.1.3a8.27 8.27 0 0 1-5.7-2.3A7.63 7.63 0 0 1 4 12.1a8.33 8.33 0 0 1 .3-2.2l4.4 4.4a4.14 4.14 0 0 0 5.9.2a4.14 4.14 0 0 0-.2-5.9L10 4.2a6.45 6.45 0 0 1 2-.3a8.27 8.27 0 0 1 5.7 2.3a8.49 8.49 0 0 1 2.4 5.9"></path></svg></span><span><span class="twoslash-completions-matched">b</span><span class="twoslash-completions-unmatched">uild</span></span></li></ul></span></span></span><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#B07D48;--shiki-dark:#BD976A">UserConfig</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">base</span><span style="color:#AB5959;--shiki-dark:#CB7676">?:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#AB5959;--shiki-dark:#CB7676"> undefined</span></code><div class="twoslash-popup-docs">Base public path when served in development or production.</div><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@default</span><span class="twoslash-popup-docs-tag-value">'/'</span></span></div></span>ase</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">/</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666"> &#125;);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre>`,Q,L,Os=`<pre class="code-copy-target hidden">import &#123; defineConfig &#125; from 'vite'


// @log: No intellisense; TypeScript doesn't know this is a vite config object.

const config1 = &#123; base: '/' &#125;;

// @log: defineConfig's parameter is typed. Behold: valid config options!

// @noErrors
const config2 = defineConfig(&#123; base: '/' &#125;);
//                              ^|


</pre>`,U,C,Rs="I hope the identity function approach rapidly gains popularity. The <em>developer experience</em> is excellent, and it uses simple syntax that is easy to understand. I find it much more intuitive than JSDoc type import annotations.",hs,g,Ts='<a aria-hidden="true" tabindex="-1" href="#getting-narrower-type-information-from-api-consumers"><span class="icon icon-link"></span></a><a href="#getting-narrower-type-information-from-api-consumers" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Getting narrower type information from API consumers',ds,m,xs="Imagine you are building a basic router. It needs to know the path and handler for each route, and it takes an array of objects with these values. Trivially, that might look something like this:",ys,N,Gs=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBASg9gV2NAvFA3gKAJBgIbAAWAXFAM7ABOAlgHYDmA3DoXrQCYA2ElpAFADoheSvTKk2IANoBdAJQoAfFEmYAvpgBmCWgGNg1OLSgARCJroR4SCGT6VEycbEcRZcrNkoRgCSsYcbMmYNTCA"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Route</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">	path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">	handler</span><span style="color:#999999;--shiki-dark:#666666">: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[])=> </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> DefineRoutes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">[])&#123;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> routes</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre>`,K,Y,Vs=`<pre class="code-copy-target hidden">type Route = &#123;
	path: string;
	handler: (...args: any[])=&gt; any
&#125;
function DefineRoutes(routes: Route[])&#123;
	return routes;
&#125;

</pre>`,J,v,Ms="This straightforward approach will produce a runtime array of values, but the type system doesn’t know the <em>exact</em> paths or <em>exact</em> parameters for each route. TypeScript only knows that paths are strings and handlers are functions. Hovering over the highlighted values below reveals that TypeScript knows only their broad types.",As,P,Ws=`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBASg9gV2NAvFA3gKAJBgIbAAWAXFAM7ABOAlgHYDmA3DoXrQCYA2ElpAFADoheSvTKk2IANoBdAJQoAfFEmYAvpgBmCWgGNg1OLSgARCJroR4SCGT6VEycbEcRZcrNkoRgCSsYcbMmYNAHpQqABaaN0kaMjMXSMKKECnKDQzC1orVzspLCgiqHwiUgByUMIITk44UIB3OEpOdnKAGihMcKKAPX7ezGKoVg5uXig+AFtbMjx6CFIKGgYFZRmyOYWBbgYiboioAeOh4rVOwuLSkihK+jg4dgAjEAhQqYfaDq6eo4HToqjLg8fhrdBhQ7Hf5qeSYIA"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">[]</span></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> </span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> DefineRoutes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">[]):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Route</span><span style="color:#999999;--shiki-dark:#666666">[]</span></code></span>DefineRoutes</span></span><span style="color:#999999;--shiki-dark:#666666">([&#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    </span><span class="twoslash-highlighted"><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">path</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>path</span></span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">, </span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    </span><span class="twoslash-highlighted"><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">handler</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[])</span><span style="color:#999999;--shiki-dark:#666666"> =></span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span></code></span>handler</span></span></span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">message</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>message</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">)=> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">message</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>message</span></span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#B07D48;--shiki-dark:#BD976A">String</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">: </span><span style="color:#B07D48;--shiki-dark:#BD976A">number</span></code><div class="twoslash-popup-docs">Returns the length of a String object.</div></span>length</span></span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &#125;,</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    </span><span class="twoslash-highlighted"><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">path</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>path</span></span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">, </span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    </span><span class="twoslash-highlighted"><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">handler</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[])</span><span style="color:#999999;--shiki-dark:#666666"> =></span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span></code></span>handler</span></span></span><span style="color:#999999;--shiki-dark:#666666">: ()=>&#123;&#125;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;])</span></span>
<span class="line"></span></code></pre>`,j,q,zs=`<pre class="code-copy-target hidden">type Route = &#123;
	path: string;
	handler: (...args: any[])=&gt; any
&#125;
function DefineRoutes(routes: Route[])&#123;
	return routes;
&#125;
// ---cut---
const routes = DefineRoutes([&#123;
    path: '/hello/world', 
//  ^^^^
    handler: (message: string)=&gt; message.length
//  ^^^^^^^
    &#125;, &#123;
    path: '/goodbye/moon', 
//  ^^^^
    handler: ()=&gt;&#123;&#125;
//  ^^^^^^^
&#125;])
</pre>`,O,E,_s="Now let’s build a version of this API where the type system has extremely narrow types for each value. That can provide many benefits that are impossible otherwise:",Bs,b,Is="<li>A type safe API that only allows calls to a route that match the route handler’s signature</li> <li>When specifying a route, instead of any string being allowed it could be limited to only <em>defined</em> routes, which would all pop up as suggestions in the intellisense</li>",Ds,F,Hs="<code>Router</code> will need to be a generic so the type system can infer narrower types. Specifically, it needs to narrow in three ways:",us,R,Ss='<li>The <code>Route.path</code> values must be narrowed to <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types" rel="nofollow">string literals</a></li> <li>The <code>Route.handler</code> values must be narrowly typed as their exact function signature</li> <li>Both 1&amp;2 need to happen separately for each value in the array</li>',gs,T,Qs='To do this requires a <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#const-type-parameters" rel="nofollow"><code>const</code> type parameter</a> (introduced in TypeScript 5.0) and until TS 5.3 it requires using a <code>ReadonlyArray</code> as well. This should do it:',fs,G,Xs=`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBASg9gV2NAvFA3gKAJBgIbAAWAXFAM7ABOAlgHYDmA3DoXrQCYA2ElpAFADoheSvTKk2IANoBdAJQoAfFEmYAvpgBmCWgGNg1OLSgARCJroR4SCGQA8uoxSgAVa8jJQIAD2QdPMBB47EacIACClJR4IHbuEIqKfJSIHqRuqbZyWAD0OVAFhUXFxQB65eUlVUUVtXX15TiUEMAIlMYpNmTMGphAA"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Route</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    handler</span><span style="color:#999999;--shiki-dark:#666666">: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[]) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>Route</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">	</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">path</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>path</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">	</span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">handler</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[])</span><span style="color:#999999;--shiki-dark:#666666"> =></span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span></code></span>handler</span></span><span style="color:#999999;--shiki-dark:#666666">: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">args</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span><span style="color:#999999;--shiki-dark:#666666">[]</span></code></span>args</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[])=> </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> </span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> DefineRoutes</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span></code></span>DefineRoutes</span></span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span class="twoslash-highlighted"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> TRoutes</span><span style="color:#59873A;--shiki-dark:#80A665"> in</span><span style="color:#59873A;--shiki-dark:#80A665"> DefineRoutes</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span></code></span>TRoutes</span></span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">interface</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#999999;--shiki-dark:#666666">></span></code></span>ReadonlyArray</span></span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Route</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    handler</span><span style="color:#999999;--shiki-dark:#666666">: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[]) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>Route</span></span><span style="color:#999999;--shiki-dark:#666666">></span></span><span style="color:#999999;--shiki-dark:#666666">>(</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">routes</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const </span><span style="color:#B07D48;--shiki-dark:#BD976A">TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends ReadonlyArray&#x3C;Route></span></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> TRoutes</span><span style="color:#59873A;--shiki-dark:#80A665"> in</span><span style="color:#59873A;--shiki-dark:#80A665"> DefineRoutes</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span></code></span>TRoutes</span></span><span style="color:#999999;--shiki-dark:#666666">)&#123;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">routes</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const </span><span style="color:#B07D48;--shiki-dark:#BD976A">TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends ReadonlyArray&#x3C;Route></span></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre>`,V,W,Zs=`<pre class="code-copy-target hidden">type Route = &#123;
	path: string;
	handler: (...args: any[])=&gt; any
&#125;
function DefineRoutes&lt;const TRoutes extends ReadonlyArray&lt;Route&gt;&gt;(routes: TRoutes)&#123;
//                    ^^^^^                 ^^^^^^^^^^^^^^^^^^^^
	return routes;
&#125;

</pre>`,z,x,Ls="The <code>const</code> type parameter tells TypeScript to infer the narrowest type possible. It does a great job at it, too. Check them out for the same call to <code>Router</code> as above, but using the new typing for it:",ws,X,$s=`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBASg9gV2NAvFA3gKAJBgIbAAWAXFAM7ABOAlgHYDmA3DoXrQCYA2ElpAFADoheSvTKk2IANoBdAJQoAfFEmYAvpgBmCWgGNg1OLSgARCJroR4SCGQA8uoxSgAVa8jJQIAD2QdPMBB47EacIACClJR4IHbuEIqKfJSIHqRuqbZyWNiUEMAIlMYpNmTMGgD0FVAAtHW6SHU1mI60ziUeUGhmFrRWmWR8UlhQo1D4RKQA5BWEEJyccBUA7nCUnOxTADRQmFWjAHpHB5hjUKwc3LxQfAC2tmR49BCkFDQMCsr3ZI-PAtwMIh7apQY5g05jNQ7EZjCYkKAzehwODsABGIAgFVuyNo212+1BxwhowuXB4-E+6EqILBRLU8kwjMZQA"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;, &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]</span></span></code></pre></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> </span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> DefineRoutes</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;,</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;, &#123;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]):</span><span style="color:#AB5959;--shiki-dark:#CB7676"> readonly</span><span style="color:#999999;--shiki-dark:#666666"> [...]</span></span></code></pre></code></span>DefineRoutes</span></span><span style="color:#999999;--shiki-dark:#666666">([&#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    </span><span class="twoslash-highlighted"><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">path</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span></code></span>path</span></span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">, </span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    </span><span class="twoslash-highlighted"><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">handler</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =></span><span style="color:#B07D48;--shiki-dark:#BD976A"> number</span></code></span>handler</span></span></span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">message</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>message</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">)=> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">message</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>message</span></span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#B07D48;--shiki-dark:#BD976A">String</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">: </span><span style="color:#B07D48;--shiki-dark:#BD976A">number</span></code><div class="twoslash-popup-docs">Returns the length of a String object.</div></span>length</span></span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &#125;,</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    </span><span class="twoslash-highlighted"><span style="color:#998418;--shiki-dark:#B8A965"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">path</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span></code></span>path</span></span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">, </span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    </span><span class="twoslash-highlighted"><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">handler</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =></span><span style="color:#AB5959;--shiki-dark:#CB7676"> void</span></code></span>handler</span></span></span><span style="color:#999999;--shiki-dark:#666666">: ()=>&#123;&#125;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre>`,Z,$,sa=`<pre class="code-copy-target hidden">type Route = &#123;
	path: string;
	handler: (...args: any[])=&gt; any
&#125;
function DefineRoutes&lt;const TRoutes extends ReadonlyArray&lt;Route&gt;&gt;(routes: TRoutes)&#123;
	return routes;
&#125;
// ---cut---
const routes = DefineRoutes([&#123;
    path: '/hello/world', 
//  ^^^^
    handler: (message: string)=&gt; message.length
//  ^^^^^^^
    &#125;, &#123;
    path: '/goodbye/moon', 
//  ^^^^
    handler: ()=&gt;&#123;&#125;
//  ^^^^^^^
&#125;])




</pre>`,ss,M,Us="Notice that both the <code>path</code> and <code>handler</code> values are getting typed as narrowly as possible. That makes it possible to do all sorts of cool things with them:",Cs,as,aa=`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBASg9gV2NAvFA3gKAJBgIbAAWAXFAM7ABOAlgHYDmA3DoXrQCYA2ElpAFADoheSvTKk2IANoBdAJQoAfFEmYAvpgBmCWgGNg1OLSgARCJroR4SCGQA8uoxSgAVa8jJQIAD2QdPMBB47EacIACClJR4IHbuEIqKfJSIHqRuqbZyWNiUEMAIlMYpNmTMGo60ziUeUGhmFrRWmWR8UlhQnVD4RKQA5AD0hBCcnHADAO5wlJzsfQA0UJgDA50AehtrmF1QrBzcvFB8ALa2ZHj0EKQUNAwKyqdk55cC3AxEy6tQmz-bXWqLDpdHokKCDehwODsABGIAgA2OkNoCyWK3Wmz+nT2XB4-Hu6A0aO+Pw26nknygAFpqbokNTKZgKQABMb0UjxTzUTx4KCgSBQHSGYxwTS84bdAiETz4J4Qdi8uBQAAG8UofDkSswfOgHLqvPAEBFUBqtiktAQx2hPBkUj6IL6Mgp6N+mCAA"><code><span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span class="twoslash-highlighted"><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Routes</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666"> |</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span></code></span>Routes</span></span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> typeof</span><span style="color:#B07D48;--shiki-dark:#BD976A"> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;, &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]</span></span></code></pre></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">number</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">]</span></span><div class="twoslash-tag-line twoslash-tag-log-line"><span class="twoslash-tag-icon tag-log-icon"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M17 22v-8h-4v2h2v6h-3v2h8v-2zM16 8a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 16 8"></path><path fill="currentColor" d="M26 28H6a2.002 2.002 0 0 1-2-2V6a2.002 2.002 0 0 1 2-2h20a2.002 2.002 0 0 1 2 2v20a2.002 2.002 0 0 1-2 2M6 6v20h20V6Z"></path></svg></span>Routes is a type union of the paths passed to &#96;Router()&#96;</div><span class="line"></span>
<span class="line"></span></code></pre>`,ns,os,na=`<pre class="code-copy-target hidden">type Route = &#123;
	path: string;
	handler: (...args: any[])=&gt; any
&#125;
function DefineRoutes&lt;const TRoutes extends ReadonlyArray&lt;Route&gt;&gt;(routes: TRoutes)&#123;
	return routes;
&#125;
const routes = DefineRoutes([&#123;
    path: '/hello/world', 
//  ^^^^
    handler: (message: string)=&gt; message.length
//  ^^^^^^^
    &#125;, &#123;
    path: '/goodbye/moon', 
//  ^^^^
    handler: ()=&gt;&#123;&#125;
//  ^^^^^^^
&#125;])
// ---cut---

// @log: Routes is a type union of the paths passed to &#96;Router()&#96;
type Routes = typeof routes[number]['path']
//   ^^^^^^

</pre>`,ls,_,Ns="If you brave slightly gnarlier TypeScript, you can get some truly incredible results:",ms,ps,oa=`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBASg9gV2NAvFA3gKAJBgIbAAWAXFAM7ABOAlgHYDmA3DoXrQCYA2ElpAFADoheSvTKk2IANoBdAJQoAfFEmYAvpgBmCWgGNg1OLSgARCJroR4SCGQA8uoxSgAVa8jJQIAD2QdPMBB47EacIACClJR4IHbuEIqKfJSIHqRuqbZyWNiUEMAIlMYpNmTMGo60ziUeUGhmFrRWmWR8UlhQnVD4RKQA5AD0hBCcnHADAO5wlJzsfQA0UJgDA50AehtrmF1QrBzcvFB8ALa2ZHj0EKQUNAwKyqdk55cC3AxEy6tQmz-bXWqLDpdHokKCDehwODsABGIAgA2OkNoCyWK3Wmz+nT2XB4-Hu6A0aO+Pw26nknygAAExvRSPFPNRPHgoKBIFAdIZjHBNCzht0CIRPPgnhB2Cy4FAAAbxSh8OSSzCYVnQel1FngCDcqA1WxSWgIY7QngyKR9EF9GQU9G-NEAWntuiQ9ttFOpcFpUAAwnkCNBmTrKFAtegQaRsQc1PzqJQyIrtHoDEYoABZPAAa2aNkodgypS8vgg-lgQRCtDCkWisXiiT4fx14lzHm2cgwdfyhWKLQExzwYGSmSUfHQUh1AhBMlIo-DPDUchbeE8f2HLigdFc9L1BqNlBkKk8LlN5pkE9cpunlAtanKmEq1UygbQqYzMv7pTkzFdNIkHC8C+oYVXWgADc4AzXkIGOKAJmoIhuhSSBA2Vcg8E0fIQEVANTSGEYxkmaZZgtPg+gAcTyfI6DEABCPo5CtHZvgAH0VTAgA"><code><span class="line"></span><div class="twoslash-tag-line twoslash-tag-log-line"><span class="twoslash-tag-icon tag-log-icon"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M17 22v-8h-4v2h2v6h-3v2h8v-2zM16 8a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 16 8"></path><path fill="currentColor" d="M26 28H6a2.002 2.002 0 0 1-2-2V6a2.002 2.002 0 0 1 2-2h20a2.002 2.002 0 0 1 2 2v20a2.002 2.002 0 0 1-2 2M6 6v20h20V6Z"></path></svg></span>Create a router of &#123;path: handler&#125; pairs</div><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> </span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> MakeRouter</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#AB5959;--shiki-dark:#CB7676"> in</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">]]: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">handler</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span></code></span>MakeRouter</span></span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> TRoutes</span><span style="color:#59873A;--shiki-dark:#80A665"> in</span><span style="color:#59873A;--shiki-dark:#80A665"> MakeRouter</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#AB5959;--shiki-dark:#CB7676"> in</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">]]: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">handler</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span></code></span>TRoutes</span></span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">interface</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#999999;--shiki-dark:#666666">></span></code></span>ReadonlyArray</span></span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Route</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    handler</span><span style="color:#999999;--shiki-dark:#666666">: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[]) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>Route</span></span><span style="color:#999999;--shiki-dark:#666666">>>(</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">routes</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> TRoutes</span><span style="color:#B07D48;--shiki-dark:#BD976A"> extends</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A">Route</span><span style="color:#999999;--shiki-dark:#666666">></span></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> TRoutes</span><span style="color:#59873A;--shiki-dark:#80A665"> in</span><span style="color:#59873A;--shiki-dark:#80A665"> MakeRouter</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#AB5959;--shiki-dark:#CB7676"> in</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">]]: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">handler</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span></code></span>TRoutes</span></span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666"> )</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">routes</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> TRoutes</span><span style="color:#B07D48;--shiki-dark:#BD976A"> extends</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A">Route</span><span style="color:#999999;--shiki-dark:#666666">></span></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A">Route</span><span style="color:#999999;--shiki-dark:#666666">>.</span><span style="color:#59873A;--shiki-dark:#80A665">map</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;&#123;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    [</span><span style="color:#B07D48;--shiki-dark:#BD976A">x</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">]: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[]) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;>(</span><span style="color:#59873A;--shiki-dark:#80A665">callbackfn</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">index</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">array</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Route</span><span style="color:#999999;--shiki-dark:#666666">[]) => &#123;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    [</span><span style="color:#B07D48;--shiki-dark:#BD976A">x</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">]: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[]) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> thisArg</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    [</span><span style="color:#B07D48;--shiki-dark:#BD976A">x</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">]: (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[]) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;[]</span></span></code></pre></code><div class="twoslash-popup-docs">Calls a defined callback function on each element of an array, and returns an array that contains the results.</div><div class="twoslash-popup-docs twoslash-popup-docs-tags"><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.</span></span><span class="twoslash-popup-docs-tag"><span class="twoslash-popup-docs-tag-name">@param</span><span class="twoslash-popup-docs-tag-value">thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.</span></span></div></span>map</span></span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">route</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Route</span></code></span>route</span></span><span style="color:#999999;--shiki-dark:#666666">=>(&#123;[</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">route</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Route</span></code></span>route</span></span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">path</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> string</span></code></span>path</span></span><span style="color:#999999;--shiki-dark:#666666">]: </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">route</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Route</span></code></span>route</span></span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#59873A;--shiki-dark:#80A665">handler</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">any</span><span style="color:#999999;--shiki-dark:#666666">[])</span><span style="color:#999999;--shiki-dark:#666666"> =></span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span></code></span>handler</span></span><span style="color:#999999;--shiki-dark:#666666">&#125;))</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> </span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &#123;[</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> T</span></code></span>T</span></span><span style="color:#AB5959;--shiki-dark:#CB7676"> in</span><span style="color:#B07D48;--shiki-dark:#BD976A"> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> TRoutes</span><span style="color:#59873A;--shiki-dark:#80A665"> in</span><span style="color:#59873A;--shiki-dark:#80A665"> MakeRouter</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ReadonlyArray</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Route</span><span style="color:#999999;--shiki-dark:#666666">>>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">TRoutes</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#AB5959;--shiki-dark:#CB7676"> in</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> TRoutes</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">]]: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">T</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">handler</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span></code></span>TRoutes</span></span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">number</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> T</span></code></span>T</span></span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">]]</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">: </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parameter</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> T</span></code></span>T</span></span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">handler</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">]&#125;;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">router</span><span style="color:#999999;--shiki-dark:#666666">: &#123;</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>router</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> </span><span style="color:#59873A;--shiki-dark:#80A665"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> MakeRouter</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;,</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]>(</span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;, &#123;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]):</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>MakeRouter</span></span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">routes</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">readonly</span><span style="color:#999999;--shiki-dark:#666666"> [&#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;, &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    readonly</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;]</span></span></code></pre></code></span>routes</span></span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"></span><div class="twoslash-tag-line twoslash-tag-log-line"><span class="twoslash-tag-icon tag-log-icon"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M17 22v-8h-4v2h2v6h-3v2h8v-2zM16 8a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 16 8"></path><path fill="currentColor" d="M26 28H6a2.002 2.002 0 0 1-2-2V6a2.002 2.002 0 0 1 2-2h20a2.002 2.002 0 0 1 2 2v20a2.002 2.002 0 0 1-2 2M6 6v20h20V6Z"></path></svg></span>and easily invoke them with proper type safety</div><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">router</span><span style="color:#999999;--shiki-dark:#666666">: &#123;</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">: (</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">) => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    "</span><span style="color:#B56959;--shiki-dark:#C98A7D">/goodbye/moon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">: () => </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&#125;</span></span></code></pre></code></span>router</span></span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D"><span>/<span class="twoslash-completion-cursor"><ul class="twoslash-completion-list"><li><span class="twoslash-completions-icon completions-property"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M12.1 2a9.8 9.8 0 0 0-5.4 1.6l6.4 6.4a2.1 2.1 0 0 1 .2 3a2.1 2.1 0 0 1-3-.2L3.7 6.4A9.84 9.84 0 0 0 2 12.1a10.14 10.14 0 0 0 10.1 10.1a10.9 10.9 0 0 0 2.6-.3l6.7 6.7a5 5 0 0 0 7.1-7.1l-6.7-6.7a10.9 10.9 0 0 0 .3-2.6A10 10 0 0 0 12.1 2m8 10.1a7.61 7.61 0 0 1-.3 2.1l-.3 1.1l.8.8l6.7 6.7a2.88 2.88 0 0 1 .9 2.1A2.72 2.72 0 0 1 27 27a2.9 2.9 0 0 1-4.2 0l-6.7-6.7l-.8-.8l-1.1.3a7.61 7.61 0 0 1-2.1.3a8.27 8.27 0 0 1-5.7-2.3A7.63 7.63 0 0 1 4 12.1a8.33 8.33 0 0 1 .3-2.2l4.4 4.4a4.14 4.14 0 0 0 5.9.2a4.14 4.14 0 0 0-.2-5.9L10 4.2a6.45 6.45 0 0 1 2-.3a8.27 8.27 0 0 1 5.7 2.3a8.49 8.49 0 0 1 2.4 5.9"></path></svg></span><span><span class="twoslash-completions-matched">/</span><span class="twoslash-completions-unmatched">goodbye/moon</span></span></li><li><span class="twoslash-completions-icon completions-property"><svg viewBox="0 0 32 32"><path fill="currentColor" d="M12.1 2a9.8 9.8 0 0 0-5.4 1.6l6.4 6.4a2.1 2.1 0 0 1 .2 3a2.1 2.1 0 0 1-3-.2L3.7 6.4A9.84 9.84 0 0 0 2 12.1a10.14 10.14 0 0 0 10.1 10.1a10.9 10.9 0 0 0 2.6-.3l6.7 6.7a5 5 0 0 0 7.1-7.1l-6.7-6.7a10.9 10.9 0 0 0 .3-2.6A10 10 0 0 0 12.1 2m8 10.1a7.61 7.61 0 0 1-.3 2.1l-.3 1.1l.8.8l6.7 6.7a2.88 2.88 0 0 1 .9 2.1A2.72 2.72 0 0 1 27 27a2.9 2.9 0 0 1-4.2 0l-6.7-6.7l-.8-.8l-1.1.3a7.61 7.61 0 0 1-2.1.3a8.27 8.27 0 0 1-5.7-2.3A7.63 7.63 0 0 1 4 12.1a8.33 8.33 0 0 1 .3-2.2l4.4 4.4a4.14 4.14 0 0 0 5.9.2a4.14 4.14 0 0 0-.2-5.9L10 4.2a6.45 6.45 0 0 1 2-.3a8.27 8.27 0 0 1 5.7 2.3a8.49 8.49 0 0 1 2.4 5.9"></path></svg></span><span><span class="twoslash-completions-matched">/</span><span class="twoslash-completions-unmatched">hello/world</span></span></li></ul></span></span></span><span style="color:#B56959;--shiki-dark:#C98A7D">hello/world</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">](</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">Greetings!</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre>`,es,is,la=`<pre class="code-copy-target hidden">type Route = &#123;
	path: string;
	handler: (...args: any[])=&gt; any
&#125;
function DefineRoutes&lt;const TRoutes extends ReadonlyArray&lt;Route&gt;&gt;(routes: TRoutes)&#123;
	return routes;
&#125;
const routes = DefineRoutes([&#123;
    path: '/hello/world', 
//  ^^^^
    handler: (message: string)=&gt; message.length
//  ^^^^^^^
    &#125;, &#123;
    path: '/goodbye/moon', 
//  ^^^^
    handler: ()=&gt;&#123;&#125;
//  ^^^^^^^
&#125;])
// @log: Routes is a type union of the paths passed to &#96;Router()&#96;

type Routes = typeof routes[number]['path']
//   ^^^^^^
// ---cut---
// @log: Create a router of &#123;path: handler&#125; pairs

function MakeRouter&lt;TRoutes extends ReadonlyArray&lt;Route&gt;&gt;(
  routes:TRoutes
 ) &#123;
  return routes.map(route=&gt;(&#123;[route.path]: route.handler&#125;)) as 
  &#123;[T in TRoutes[number] as T['path']]: T['handler']&#125;;
&#125;
const router = MakeRouter(routes);

// @log: and easily invoke them with proper type safety

router['/hello/world']('Greetings!')
//       ^|


</pre>`,rs,I,Ks="Pretty nifty, eh? It could be fun to build a router API that provides a nice client object and outputs bindings for popular backend frameworks like Express, fastify, and hono by doing type transformations on the input routes.";return{c(){l=r("p"),l.textContent=u,B=p(),y=r("h2"),y.innerHTML=i,A=p(),D=r("p"),D.innerHTML=Es,ts=p(),f=r("ul"),f.innerHTML=bs,ks=p(),w=r("p"),w.innerHTML=Fs,cs=p(),S=new c(!1),Q=h(),L=new c(!1),U=p(),C=r("p"),C.innerHTML=Rs,hs=p(),g=r("h2"),g.innerHTML=Ts,ds=p(),m=r("p"),m.textContent=xs,ys=p(),N=new c(!1),K=h(),Y=new c(!1),J=p(),v=r("p"),v.innerHTML=Ms,As=p(),P=new c(!1),j=h(),q=new c(!1),O=p(),E=r("p"),E.textContent=_s,Bs=p(),b=r("ul"),b.innerHTML=Is,Ds=p(),F=r("p"),F.innerHTML=Hs,us=p(),R=r("ol"),R.innerHTML=Ss,gs=p(),T=r("p"),T.innerHTML=Qs,fs=p(),G=new c(!1),V=h(),W=new c(!1),z=p(),x=r("p"),x.innerHTML=Ls,ws=p(),X=new c(!1),Z=h(),$=new c(!1),ss=p(),M=r("p"),M.innerHTML=Us,Cs=p(),as=new c(!1),ns=h(),os=new c(!1),ls=p(),_=r("p"),_.textContent=Ns,ms=p(),ps=new c(!1),es=h(),is=new c(!1),rs=p(),I=r("p"),I.textContent=Ks,this.h()},l(s){l=t(s,"P",{"data-svelte-h":!0}),k(l)!=="svelte-29oivh"&&(l.textContent=u),B=e(s),y=t(s,"H2",{id:!0,"data-svelte-h":!0}),k(y)!=="svelte-1dec0jz"&&(y.innerHTML=i),A=e(s),D=t(s,"P",{"data-svelte-h":!0}),k(D)!=="svelte-2rbqje"&&(D.innerHTML=Es),ts=e(s),f=t(s,"UL",{"data-svelte-h":!0}),k(f)!=="svelte-1slv5it"&&(f.innerHTML=bs),ks=e(s),w=t(s,"P",{"data-svelte-h":!0}),k(w)!=="svelte-cnxy17"&&(w.innerHTML=Fs),cs=e(s),S=d(s,!1),Q=h(),L=d(s,!1),U=e(s),C=t(s,"P",{"data-svelte-h":!0}),k(C)!=="svelte-1v0k9tc"&&(C.innerHTML=Rs),hs=e(s),g=t(s,"H2",{id:!0,"data-svelte-h":!0}),k(g)!=="svelte-muikiu"&&(g.innerHTML=Ts),ds=e(s),m=t(s,"P",{"data-svelte-h":!0}),k(m)!=="svelte-k6lrmt"&&(m.textContent=xs),ys=e(s),N=d(s,!1),K=h(),Y=d(s,!1),J=e(s),v=t(s,"P",{"data-svelte-h":!0}),k(v)!=="svelte-fnoiew"&&(v.innerHTML=Ms),As=e(s),P=d(s,!1),j=h(),q=d(s,!1),O=e(s),E=t(s,"P",{"data-svelte-h":!0}),k(E)!=="svelte-h40ul5"&&(E.textContent=_s),Bs=e(s),b=t(s,"UL",{"data-svelte-h":!0}),k(b)!=="svelte-gyv5x6"&&(b.innerHTML=Is),Ds=e(s),F=t(s,"P",{"data-svelte-h":!0}),k(F)!=="svelte-1lm0xw6"&&(F.innerHTML=Hs),us=e(s),R=t(s,"OL",{"data-svelte-h":!0}),k(R)!=="svelte-e9hn07"&&(R.innerHTML=Ss),gs=e(s),T=t(s,"P",{"data-svelte-h":!0}),k(T)!=="svelte-1nh4jc2"&&(T.innerHTML=Qs),fs=e(s),G=d(s,!1),V=h(),W=d(s,!1),z=e(s),x=t(s,"P",{"data-svelte-h":!0}),k(x)!=="svelte-1qe73x9"&&(x.innerHTML=Ls),ws=e(s),X=d(s,!1),Z=h(),$=d(s,!1),ss=e(s),M=t(s,"P",{"data-svelte-h":!0}),k(M)!=="svelte-t44mj3"&&(M.innerHTML=Us),Cs=e(s),as=d(s,!1),ns=h(),os=d(s,!1),ls=e(s),_=t(s,"P",{"data-svelte-h":!0}),k(_)!=="svelte-g39x6v"&&(_.textContent=Ns),ms=e(s),ps=d(s,!1),es=h(),is=d(s,!1),rs=e(s),I=t(s,"P",{"data-svelte-h":!0}),k(I)!=="svelte-1xt4njg"&&(I.textContent=Ks),this.h()},h(){Js(y,"id","providing-type-hints-to-api-consumers"),S.a=Q,L.a=U,Js(g,"id","getting-narrower-type-information-from-api-consumers"),N.a=K,Y.a=J,P.a=j,q.a=O,G.a=V,W.a=z,X.a=Z,$.a=ss,as.a=ns,os.a=ls,ps.a=es,is.a=rs},m(s,a){n(s,l,a),n(s,B,a),n(s,y,a),n(s,A,a),n(s,D,a),n(s,ts,a),n(s,f,a),n(s,ks,a),n(s,w,a),n(s,cs,a),S.m(qs,s,a),n(s,Q,a),L.m(Os,s,a),n(s,U,a),n(s,C,a),n(s,hs,a),n(s,g,a),n(s,ds,a),n(s,m,a),n(s,ys,a),N.m(Gs,s,a),n(s,K,a),Y.m(Vs,s,a),n(s,J,a),n(s,v,a),n(s,As,a),P.m(Ws,s,a),n(s,j,a),q.m(zs,s,a),n(s,O,a),n(s,E,a),n(s,Bs,a),n(s,b,a),n(s,Ds,a),n(s,F,a),n(s,us,a),n(s,R,a),n(s,gs,a),n(s,T,a),n(s,fs,a),G.m(Xs,s,a),n(s,V,a),W.m(Zs,s,a),n(s,z,a),n(s,x,a),n(s,ws,a),X.m($s,s,a),n(s,Z,a),$.m(sa,s,a),n(s,ss,a),n(s,M,a),n(s,Cs,a),as.m(aa,s,a),n(s,ns,a),os.m(na,s,a),n(s,ls,a),n(s,_,a),n(s,ms,a),ps.m(oa,s,a),n(s,es,a),is.m(la,s,a),n(s,rs,a),n(s,I,a)},p:ea,d(s){s&&(o(l),o(B),o(y),o(A),o(D),o(ts),o(f),o(ks),o(w),o(cs),o(Q),S.d(),L.d(),o(U),o(C),o(hs),o(g),o(ds),o(m),o(ys),o(K),N.d(),Y.d(),o(J),o(v),o(As),o(j),P.d(),q.d(),o(O),o(E),o(Bs),o(b),o(Ds),o(F),o(us),o(R),o(gs),o(T),o(fs),o(V),G.d(),W.d(),o(z),o(x),o(ws),o(Z),X.d(),$.d(),o(ss),o(M),o(Cs),o(ns),as.d(),os.d(),o(ls),o(_),o(ms),o(es),ps.d(),is.d(),o(rs),o(I))}}}function ua(H){let l,u;const B=[H[0],js];let y={$$slots:{default:[Da]},$$scope:{ctx:H}};for(let i=0;i<B.length;i+=1)y=vs(y,B[i]);return l=new Ba({props:y}),{c(){ta(l.$$.fragment)},l(i){ka(l.$$.fragment,i)},m(i,A){ca(l,i,A),u=!0},p(i,[A]){const D=A&1?Aa(B,[A&1&&Ps(i[0]),A&0&&Ps(js)]):{};A&2&&(D.$$scope={dirty:A,ctx:i}),l.$set(D)},i(i){u||(ha(l.$$.fragment,i),u=!0)},o(i){da(l.$$.fragment,i),u=!1},d(i){ya(l,i)}}}const js={title:"Identity functions",description:"Identity functions make it possible to provide a much better developer experience at API boundaries by improving the type",slug:"notes/identity-functions",publish:!0,lastmod:"2024-05-19T00:00:00.000Z",date:"2024-05-18T00:00:00.000Z",aliases:null,tags:["status/seedling"],readTime:5,internalLinks:[],flashcards:[]};function ga(H,l,u){return H.$$set=B=>{u(0,l=vs(vs({},l),Ys(B)))},l=Ys(l),[l]}class va extends ia{constructor(l){super(),ra(this,l,ga,ua,pa,{})}}export{va as default,js as metadata};
