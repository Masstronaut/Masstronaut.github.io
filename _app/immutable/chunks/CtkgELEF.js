import"./Bzak7iHL.js";import"./BjZVtCDr.js";import{f as j,a as q,Y as r,b as t,s as e,Z as o}from"./BJtFNpt7.js";import{h as s}from"./DwXm9gtm.js";import{l as z,s as F}from"./IBUSOwbe.js";import{M as U}from"./CpyZtllO.js";import{H as n}from"./aajwPsyS.js";const L={title:"git-cheatsheet",description:"Some common scenarios and how to resolve them using git.",slug:"notes/git-cheatsheet",publish:!0,lastmod:"2023-06-28T00:00:00.000Z",date:"2022-05-24T00:00:00.000Z",aliases:null,tags:["status/seedling"],readTime:5,internalLinks:[],flashcards:[]},{title:ie,description:te,slug:oe,publish:re,lastmod:ne,date:ce,aliases:le,tags:de,readTime:he,internalLinks:pe,flashcards:ke}=L;var W=j("<!> <p>Sometimes I’m working on a problem and end up side-tracked and solve another problem, but forgot to switch branches first. Doh! This one is an easy fix:</p> <ol><li>Create a new branch and checkout to it (single step)</li> <li>Stage the changes</li> <li>Commit changes to it</li> <li>Push the branch to the remote/tracking</li></ol> <!><!> <!> <p>You’ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then there’s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.</p> <!><!> <p>If you’ve already <code>git push</code>ed the original commit, <em>amend</em>ing it would change history and isn’t allowed with <code>git push</code> by default. However, this can be overcome by forcing the push to overwrite the old commit in history with the amended commit.</p> <!><!> <!> <p>This command will rewind history locally to the specified git commit.</p> <!><!> <p>If you want to erase the changes that followed on the remote copy, you can additionally run:</p> <!><!> <p>Which will force git to push your current history and overwrite whatever currently exists on remote.</p> <!> <p>This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.</p> <p>First, make sure you have the latest remote changes locally.</p> <!><!> <p>Make sure you have the branch you want to merge changes <em>into</em> checked out locally:</p> <!><!> <p>And then merge the changes from branch A in:</p> <!><!> <!> <p>This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.</p> <p>Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:</p> <!><!> <p>The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:</p> <!><!> <!> <p>Often I will pull latest from the <code>main</code> branch and start making changes for the ticket I’m working on. After some progress I will then commit my changes, forgetting that I didn’t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I can’t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways I’ve found to do this.</p> <p>Option 1 works conceptually by taking the following actions:</p> <ol><li>Undo my last commit to <code>main</code></li> <li>create & checkout a new feature branch</li> <li>commit my changes to it</li></ol> <!><!> <p>Option 2:</p> <ol><li>Create a branch from my commit locally</li> <li>Push my new branch with changes</li> <li>Checkout my local <code>main</code> branch</li> <li>Reset it to the same commit as on <code>origin</code></li></ol>",1);function me(O,Y){const Z=z(Y,["children","$$slots","$$events","$$legacy"]);U(O,F(()=>Z,()=>L,{children:(G,X)=>{var l=W(),d=q(l);n(d,{id:"create-a-branch-with-current-changes",children:(a,c)=>{o();var i=r("Create a branch with current changes");t(a,i)},$$slots:{default:!0}});var h=e(d,6);s(h,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -b</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-second-feature</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> add</span><span style="color:#B56959;--shiki-dark:#C98A7D"> .</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -m</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">Moving these changes to their own branch</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -u</span><span style="color:#B56959;--shiki-dark:#C98A7D"> origin</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-second-feature</span></span></code></pre>`);var p=e(h);s(p,()=>`<pre class="code-copy-target hidden">git checkout -b feature/my-second-feature
git add .
git commit -m "Moving these changes to their own branch"
git push -u origin feature/my-second-feature</pre>`);var k=e(p,2);n(k,{id:"amend-a-previous-commit",children:(a,c)=>{o();var i=r("Amend a previous commit");t(a,i)},$$slots:{default:!0}});var m=e(k,4);s(m,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --amend</span></span></code></pre>');var g=e(m);s(g,()=>'<pre class="code-copy-target hidden">git commit --amend</pre>');var y=e(g,4);s(y,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --force</span></span></code></pre>');var f=e(y);s(f,()=>'<pre class="code-copy-target hidden">git push --force</pre>');var u=e(f,2);n(u,{id:"go-back-to-an-old-commit",children:(a,c)=>{o();var i=r("Go back to an old commit");t(a,i)},$$slots:{default:!0}});var A=e(u,4);s(A,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> reset</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --hard</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">commit</span><span style="color:#B56959;--shiki-dark:#C98A7D"> has</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">h</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>');var b=e(A);s(b,()=>'<pre class="code-copy-target hidden">git reset --hard &lt;commit hash&gt;</pre>');var v=e(b,4);s(v,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -f</span></span></code></pre>');var B=e(v);s(B,()=>'<pre class="code-copy-target hidden">git push -f</pre>');var C=e(B,4);n(C,{id:"merge-changes-from-branch-a-into-branch-b",children:(a,c)=>{o();var i=r("Merge changes from branch A into branch B");t(a,i)},$$slots:{default:!0}});var D=e(C,6);s(D,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span></code></pre>`);var w=e(D);s(w,()=>`<pre class="code-copy-target hidden">git fetch
git pull</pre>`);var _=e(w,4);s(_,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Branch</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">B</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>');var $=e(_);s($,()=>'<pre class="code-copy-target hidden">git checkout &lt;BranchB&gt;</pre>');var x=e($,4);s(x,()=>'<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> merge</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Branch</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">A</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>');var E=e(x);s(E,()=>'<pre class="code-copy-target hidden">git merge &lt;BranchA&gt;</pre>');var I=e(E,2);n(I,{id:"rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch",children:(a,c)=>{o();var i=r("Rebase changes in a branch onto a newer commit from the parent branch");t(a,i)},$$slots:{default:!0}});var P=e(I,6);s(P,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> delta</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span></code></pre>`);var T=e(P);s(T,()=>`<pre class="code-copy-target hidden">git checkout main
git fetch
git pull
git checkout delta
git fetch
git pull</pre>`);var M=e(T,4);s(M,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> delta</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> rebase</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span></code></pre>`);var R=e(M);s(R,()=>`<pre class="code-copy-target hidden">git checkout delta
git rebase main</pre>`);var H=e(R,2);n(H,{id:"move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first",children:(a,c)=>{o();var i=r("Move changes from a protected branch to a feature branch after accidentally committing without switching branches first");t(a,i)},$$slots:{default:!0}});var S=e(H,8);s(S,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> reset</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --soft</span><span style="color:#B56959;--shiki-dark:#C98A7D"> HEAD~1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -b</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-new-feature</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span></span></code></pre>`);var N=e(S);s(N,()=>`<pre class="code-copy-target hidden">git reset --soft HEAD~1
git checkout -b feature/my-new-feature
git commit</pre>`),o(4),t(G,l)},$$slots:{default:!0}}))}export{me as default,L as metadata};
