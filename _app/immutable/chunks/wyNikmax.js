import{t as n,a as l}from"./Bj2ZHtgv.js";import"./DBHxkW5N.js";import{R as r}from"./fxLts69-.js";import{l as p,s as h}from"./BMf7CqPI.js";import{M as d}from"./B9NPcEX5.js";const e={title:"The publishing pipeline for allandeutsch.com",description:"An overview of how I avoided needing to copy+paste my notes into blogging software to publish them.",slug:"notes/publishing-this-site",publish:!0,lastmod:"2024-02-07T00:00:00.000Z",date:"2021-10-04T00:00:00.000Z",aliases:null,tags:["topic/webdev","status/budding","taxonomy/blog"],readTime:6,internalLinks:["/notes/slugs-make-links-readable"],flashcards:[]},{title:w,description:v,slug:k,publish:I,lastmod:T,date:x,aliases:S,tags:_,readTime:$,internalLinks:A,flashcards:O}=e;var u=n('<p>Like any good PM, I opted to start from the ideal user experience. This was unusually easy since I am the only user; talk about putting the <em>personal</em> in personal computing!</p> <p>My ideal workflow for publishing is to author my notes in <a href="https://obsidian.md" rel="nofollow">Obsidian</a> on any device and control publishing them to my website using a frontmatter property in each note. Step by step, this looks something like:</p> <ol><li>I edit my notes locally on any device of my choice using Obsidian</li> <li>Sync notes across devices using automatic git backups</li> <li>I can add <code>publish: true</code> to any note’s frontmatter to <strong>opt-in</strong> to publishing the note (default to private)</li> <li>Git commits to my private notes repo triggers an automated workflow to build & deploy notes opted-in to publishing</li></ol> <h2 id="structuring-the-build-pipeline"><a aria-hidden="true" tabindex="-1" href="#structuring-the-build-pipeline"><span class="icon icon-link"></span></a><a href="#structuring-the-build-pipeline" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Structuring the build pipeline</h2> <p>Because I want my notes to be private by default, they exist in their own private git repo. The SvelteKit code for this site is private, though I hope to open-source it one day. That leaves the site deployment, which is hosted using my GitHub account’s <a href="https://github.com/Masstronaut/Masstronaut.github.io" rel="nofollow">GitHub Pages repo</a> and pushed to automatically by my GitHub Actions workflow.</p> <p>Here’s an overview of what happens in the CI workflow:</p> <ol><li>Commits to either the private notes or private site code repos trigger a build</li> <li>The build action pulls the private notes and processes them for publishing: <ol><li>A python script deletes all notes not opted-in for publishing</li> <li>The remaining notes are run through <a href="https://github.com/zoni/obsidian-export" rel="nofollow">obsidian-export</a> to convert them from Obsidian markdown to <a href="https://commonmark.org/" rel="nofollow">Commonmark</a></li></ol></li> <li>The site’s SvelteKit code is pulled from another repo</li> <li>The processed notes are dumped into a <code>content</code> folder</li> <li>The SvelteKit site is built using the <a href="https://www.npmjs.com/package/@sveltejs/adapter-static" rel="nofollow">static adapter</a></li> <li>The completed build is pushed to my GitHub Pages repo</li></ol> <p>This entire process takes around 2 minutes from start to finish. I’ve noticed that sometimes GitHub takes another minute or two to distribute the latest build across the Pages CDN.</p> <h2 id="initiating-builds"><a aria-hidden="true" tabindex="-1" href="#initiating-builds"><span class="icon icon-link"></span></a><a href="#initiating-builds" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Initiating builds</h2> <p>My build pipeline is fully automated, but that’s not the only piece. I generally don’t need to manually author commits, either. While I generally avoid committing broken code, notes don’t really have a broken state that would fail to compile. A half-written note is in a valid state for backing up to git, so notes are a great candidate for automatic git commits.</p> <p>I achieve automated commits in 2 ways, depending on the device. On a computer, I use the <a href="https://github.com/denolehov/obsidian-git" rel="nofollow">obisidian-git</a> plugin. It’s easy to set up and works great. I have it configured to automatically backup my notes to git every 30 minutes if there are any changes, and it provides a command to manually trigger a backup too.</p> <p>On mobile & tablet devices, though, it’s not so great. iOS and Android lack a native git client for the plugin to use, so it ships with a JS implementation of git that is very slow. I didn’t like this approach, so opted for a different workflow.</p> <p>On mobile & tablet, I use a combination of <a href="https://workingcopy.app/" rel="nofollow">Working Copy</a> as a git client and Apple Shortcuts to operate it. I have 2 shortcuts:</p> <ol><li>A button shortcut that replaces my Obsidian app icon. When tapped, it: <ol><li>Pulls the git repo containing my notes, then</li> <li>Launches obsidian once the pull is completed</li></ol></li> <li>An automated shortcut that pushes all changes to my notes repo when I leave the Obsidian app</li></ol> <p>I’ve found this setup makes it extremely easy to get content published and shared with people on demand.</p> <h2 id="specifying-publishing-details-for-notes"><a aria-hidden="true" tabindex="-1" href="#specifying-publishing-details-for-notes"><span class="icon icon-link"></span></a><a href="#specifying-publishing-details-for-notes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Specifying publishing details for notes</h2> <p>The last detail worth covering is how I specify metadata for published notes. TL;DR: I use frontmatter.</p> <p>All the metadata on this and other notes is specified in the frontmatter. <a href="/notes/slugs-make-links-readable">Slugs make links readable</a>, so I specify my slugs in the frontmatter. For this note that frontmatter is <code>slug: publishing-this-site</code>. Really simple! I do similar for the created date, last modified date, title, description, etc. I use <a href="https://mdsvex.pngwn.io/" rel="nofollow">mdsvex</a> to process my markdown into svelte components, and it makes the frontmatter metadata available so I can easily use it when rendering the page.</p> <p>Hopefully this overview inspires you to build your own publishing pipeline and put the <em>personal</em> back in <em>personal computing</em>. If you have any questions/comments/feedback, please <a href="https://twitter.com/AllanDeutsch" rel="nofollow">reach out to me on Twitter</a>!</p>',1);function H(t,i){const o=p(i,["children","$$slots","$$events","$$legacy"]);d(t,h(()=>o,e,{children:(a,c)=>{var s=u();r(36),l(a,s)},$$slots:{default:!0}}))}export{H as default,e as metadata};
