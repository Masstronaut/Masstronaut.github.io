import{s as R,p as q,q as B,e as d,a as g,c,m as h,g as v,o as $,i as s,n as Z,f as a}from"./scheduler.ewBkyc9q.js";import{S as j,i as F,c as U,a as X,m as G,t as J,b as K,d as Q}from"./index.DpmaPz1F.js";import{g as V,a as E}from"./spread.CgU5AtxT.js";import{M as W}from"./MDSveXNoteLayout.DziYIlvs.js";function Y(T){let t,u="Iâ€™ve observed that the learning process has 4 generalized steps:",p,l,n="<li>Inputs are received and processed.</li> <li>The input processing system runs to produce an output.</li> <li>The output is evaluated.</li> <li>Evaluation results are incorporated back into the input processing system.</li>",r,o,A='<a aria-hidden="true" tabindex="-1" href="#examples-of-the-learning-process"><span class="icon icon-link"></span></a><a href="#examples-of-the-learning-process" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Examples of the learning process',b,_,D="The learning process seems to be common in domains rich with knowledge workers. Tech being a prominent example, has two extremely popular implementations of the learning process:",L,m,z='<a aria-hidden="true" tabindex="-1" href="#agile-sprints"><span class="icon icon-link"></span></a><a href="#agile-sprints" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a><em>Agile sprint</em>s',H,x,I="<li>During sprint planning, feature requests and bugs are received as inputs. These inputs get processed into <em>User stories</em> which have valuable metadata like estimated completion time and priority. The team then decides which tasks will produce the best output at the end of the sprint.</li> <li>During the sprint, the team does the work outlined in the user stories they selected in sprint planning (this is the input being processed to produce an output).</li> <li>At the sprint review, delivered work is evaluated against the <em>Definition of done</em> from the committed user stories.</li> <li>At the sprint retrospectives, the team uses the insights of how they did during the current sprint to figure out ways of refining their process for the next sprint.</li>",M,f,O='<a aria-hidden="true" tabindex="-1" href="#feed-forward-back-propagation-neural-networks"><span class="icon icon-link"></span></a><a href="#feed-forward-back-propagation-neural-networks" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Feed-forward <em>Back-propagation</em> <em>Neural networks</em>',y,w,P="<li>Inputs values are provided to the input neurons</li> <li>The inputs are fed forward through the neural network to produce values at each output node</li> <li>The output is scored.</li> <li>Results from scoring the output are sent back through the neural network so connection weights can be tweaked to produce better results using Back-propagation.</li>",C,k,S='Related: <a href="/notes/world-recursive">The world is recursive</a>.';return{c(){t=d("p"),t.textContent=u,p=g(),l=d("ol"),l.innerHTML=n,r=g(),o=d("h2"),o.innerHTML=A,b=g(),_=d("p"),_.textContent=D,L=g(),m=d("h2"),m.innerHTML=z,H=g(),x=d("ol"),x.innerHTML=I,M=g(),f=d("h2"),f.innerHTML=O,y=g(),w=d("ol"),w.innerHTML=P,C=g(),k=d("p"),k.innerHTML=S,this.h()},l(e){t=c(e,"P",{"data-svelte-h":!0}),h(t)!=="svelte-1hw56t7"&&(t.textContent=u),p=v(e),l=c(e,"OL",{"data-svelte-h":!0}),h(l)!=="svelte-li9y2q"&&(l.innerHTML=n),r=v(e),o=c(e,"H2",{id:!0,"data-svelte-h":!0}),h(o)!=="svelte-7drxf8"&&(o.innerHTML=A),b=v(e),_=c(e,"P",{"data-svelte-h":!0}),h(_)!=="svelte-1l7t8kv"&&(_.textContent=D),L=v(e),m=c(e,"H2",{id:!0,"data-svelte-h":!0}),h(m)!=="svelte-rnpuya"&&(m.innerHTML=z),H=v(e),x=c(e,"OL",{"data-svelte-h":!0}),h(x)!=="svelte-1ag9c0f"&&(x.innerHTML=I),M=v(e),f=c(e,"H2",{id:!0,"data-svelte-h":!0}),h(f)!=="svelte-1wq6c9x"&&(f.innerHTML=O),y=v(e),w=c(e,"OL",{"data-svelte-h":!0}),h(w)!=="svelte-5z9zse"&&(w.innerHTML=P),C=v(e),k=c(e,"P",{"data-svelte-h":!0}),h(k)!=="svelte-kx40b7"&&(k.innerHTML=S),this.h()},h(){$(o,"id","examples-of-the-learning-process"),$(m,"id","agile-sprints"),$(f,"id","feed-forward-back-propagation-neural-networks")},m(e,i){s(e,t,i),s(e,p,i),s(e,l,i),s(e,r,i),s(e,o,i),s(e,b,i),s(e,_,i),s(e,L,i),s(e,m,i),s(e,H,i),s(e,x,i),s(e,M,i),s(e,f,i),s(e,y,i),s(e,w,i),s(e,C,i),s(e,k,i)},p:Z,d(e){e&&(a(t),a(p),a(l),a(r),a(o),a(b),a(_),a(L),a(m),a(H),a(x),a(M),a(f),a(y),a(w),a(C),a(k))}}}function ee(T){let t,u;const p=[T[0],N];let l={$$slots:{default:[Y]},$$scope:{ctx:T}};for(let n=0;n<p.length;n+=1)l=q(l,p[n]);return t=new W({props:l}),{c(){U(t.$$.fragment)},l(n){X(t.$$.fragment,n)},m(n,r){G(t,n,r),u=!0},p(n,[r]){const o=r&1?V(p,[r&1&&E(n[0]),r&0&&E(N)]):{};r&2&&(o.$$scope={dirty:r,ctx:n}),t.$set(o)},i(n){u||(J(t.$$.fragment,n),u=!0)},o(n){K(t.$$.fragment,n),u=!1},d(n){Q(t,n)}}}const N={title:"The learning process",description:"A repeating cycle of receiving input, processing it to create output, evaluating that output, and evaluating results to improve future processing.",slug:"notes/learning-process",publish:!0,lastmod:"2021-07-27T00:00:00.000Z",date:"2021-07-27T00:00:00.000Z",aliases:["The learning process"],tags:["status/evergreen","topic/learning","taxonomy/idea"],readTime:2,internalLinks:["/notes/world-recursive"],flashcards:[]};function te(T,t,u){return T.$$set=p=>{u(0,t=q(q({},t),B(p)))},t=B(t),[t]}class re extends j{constructor(t){super(),F(this,t,te,ee,R,{})}}export{re as default,N as metadata};
