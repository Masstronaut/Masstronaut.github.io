import{s as ts,C as Z,a3 as Q,f as y,a as p,a4 as $,e as W,g as F,u,c as o,a5 as j,j as ps,i as n,A as os,d as e}from"./scheduler.5beeadad.js";import{S as rs,i as is,b as cs,d as ds,m as ys,a as Fs,t as us,e as ms}from"./index.bfd99307.js";import{g as vs,a as Y}from"./spread.8a54911c.js";import{M as fs}from"./MDSveXNoteLayout.94eaefa5.js";function Es(h){let l,m="Chalk it up to growing up on C++, but sometimes I find it helpful to name a type and limit the usage based its name.",c,i,t="Consider an email address input. A user can type any string! I have no idea if they typed a valid email or not, all I know is it’s a string. Once I validate it with <em>Zod</em> I know more, but as far as TypeScript is concerned it’s still just a <code>string</code>. I could mistakenly assign something else to it, or accidentally use a different value when calling a function that requires a validated email. This is a problem in TypeScript because it uses <em>structural types</em> - data with the same shape is considered equivalent. This is in contrast to <em>nominal types</em> which are only compatible with objects that share the same type name.",r,d,z="Fortunately there’s a TypeScript technique called “Branded types” that makes it possible to reduce a structural type’s compatibility to the level of a nominal type. It is also a great way to encode information about a value in the type system.",k,T,as=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #6E7781">/** &#96;brand&#96; is a globally unique value, so the only ways to create an "Email" type are </span></div><div class='line'><span style="color: #6E7781">* 1. "branding" a string using &#96;as Email&#96; </span></div><div class='line'><span style="color: #6E7781">* 2. copying an already branded &#96;Email&#96;</span></div><div class='line'><span style="color: #6E7781">*/</span></div><div class='line'><span style="color: #CF222E">declare</span><span style="color: #24292F"> </span><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">brand</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">unique</span><span style="color: #24292F"> </span><span style="color: #0550AE">symbol</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">Email</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F"> </span><span style="color: #CF222E">&</span><span style="color: #24292F"> &#123; [brand]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0A3069">"email"</span><span style="color: #24292F">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF">isEmail</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> (</span><span style="color: #953800">email</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #953800">email</span><span style="color: #24292F"> </span><span style="color: #CF222E">is</span><span style="color: #24292F"> </span><span style="color: #953800">Email</span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> &#123; </span><span style="color: #CF222E">return</span><span style="color: #24292F"> email.</span><span style="color: #8250DF">includes</span><span style="color: #24292F">(</span><span style="color: #0A3069">"@gmail.com"</span><span style="color: #24292F">) &#125;;</span></div><div class='line'></div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">sendEmail</span><span style="color: #24292F">(</span><span style="color: #953800">email</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Email</span><span style="color: #24292F">) &#123;</span></div><div class='line'><span style="color: #24292F">	console.</span><span style="color: #8250DF">log</span><span style="color: #24292F">(</span><span style="color: #0A3069">"sent."</span><span style="color: #24292F">);</span></div><div class='line'><span style="color: #24292F">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">trySendEmail</span><span style="color: #24292F">(</span><span style="color: #953800">email</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0A3069">"user@gmail.com"</span><span style="color: #24292F">)&#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #6E7781">// @ts-expect-error</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #8250DF">sendEmail</span><span style="color: #24292F">(email); </span><span style="color: #6E7781">// string is not assignable to paramter of type &#96;Email&#96;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">( </span><span style="color: #8250DF">isEmail</span><span style="color: #24292F">(email) ) &#123;</span></div><div class='line'><span style="color: #24292F">	  </span><span style="color: #8250DF">sendEmail</span><span style="color: #24292F">(email)</span></div><div class='line'><span style="color: #24292F">	&#125; </span><span style="color: #CF222E">else</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	  console.</span><span style="color: #8250DF">log</span><span style="color: #24292F">(</span><span style="color: #0A3069">"not an email"</span><span style="color: #24292F">)</span></div><div class='line'><span style="color: #24292F">	&#125;</span></div><div class='line'><span style="color: #24292F">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #8250DF">trySendEmail</span><span style="color: #24292F">()</span></div></code></div></pre>`,_,f,N="In this example I make a “branded” <code>Email</code> type and use the <code>isEmail</code> function to narrow validated strings to <code>Email</code>s which is useful in a case such as <code>trySendEmail()</code>.",I,E,O="Branding can also be done with a reusable generic type:",H,P,ls=`<pre class="shiki twoslash lsp" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">declare</span><span style="color: #24292F"> </span><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE"><data-lsp lsp='const brand: typeof brand' >brand</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">unique</span><span style="color: #24292F"> </span><span style="color: #0550AE">symbol</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #6E7781">// The Brand generic can be used to augment any structural data type with nominal type safety</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Brand&lt;T, TBrand extends string> = T &amp; &#123;&#10;    [brand]: TBrand;&#10;&#125;' >Brand</data-lsp></span><span style="color: #24292F">&lt;</span><span style="color: #953800"><data-lsp lsp='(type parameter) T in type Brand&lt;T, TBrand extends string>' >T</data-lsp></span><span style="color: #24292F">, </span><span style="color: #953800"><data-lsp lsp='(type parameter) TBrand in type Brand&lt;T, TBrand extends string>' >TBrand</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">&gt; </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='(type parameter) T in type Brand&lt;T, TBrand extends string>' >T</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">&</span><span style="color: #24292F"> &#123;[<data-lsp lsp='const brand: typeof brand' >brand</data-lsp>]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='(type parameter) TBrand in type Brand&lt;T, TBrand extends string>' >TBrand</data-lsp></span><span style="color: #24292F">&#125;</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Email = string &amp; &#123;&#10;    [brand]: "Email";&#10;&#125;' >Email</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Brand&lt;T, TBrand extends string> = T &amp; &#123;&#10;    [brand]: TBrand;&#10;&#125;' >Brand</data-lsp></span><span style="color: #24292F">&lt;</span><span style="color: #0550AE">string</span><span style="color: #24292F">, </span><span style="color: #0A3069">"Email"</span><span style="color: #24292F">&gt; </span><span style="color: #6E7781">// works the same as the &#96;Email&#96; type in the previous example</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Password = string &amp; &#123;&#10;    [brand]: "Password";&#10;&#125;' >Password</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Brand&lt;T, TBrand extends string> = T &amp; &#123;&#10;    [brand]: TBrand;&#10;&#125;' >Brand</data-lsp></span><span style="color: #24292F">&lt;</span><span style="color: #0550AE">string</span><span style="color: #24292F">, </span><span style="color: #0A3069">"Password"</span><span style="color: #24292F">&gt; </span><span style="color: #6E7781">// Easy to reuse</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type UserID = number &amp; &#123;&#10;    [brand]: "User ID";&#10;&#125;' >UserID</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Brand&lt;T, TBrand extends string> = T &amp; &#123;&#10;    [brand]: TBrand;&#10;&#125;' >Brand</data-lsp></span><span style="color: #24292F">&lt;</span><span style="color: #0550AE">number</span><span style="color: #24292F">, </span><span style="color: #0A3069">"User ID"</span><span style="color: #24292F">&gt; </span><span style="color: #6E7781">// can be used with any primitive type</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type DBUser = &#123;&#10;    id: UserID;&#10;    username: string;&#10;&#125; &amp; &#123;&#10;    [brand]: "Database User";&#10;&#125;' >DBUser</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Brand&lt;T, TBrand extends string> = T &amp; &#123;&#10;    [brand]: TBrand;&#10;&#125;' >Brand</data-lsp></span><span style="color: #24292F">&lt;&#123;</span><span style="color: #953800"><data-lsp lsp='(property) id: UserID' >id</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type UserID = number &amp; &#123;&#10;    [brand]: "User ID";&#10;&#125;' >UserID</data-lsp></span><span style="color: #24292F">; </span><span style="color: #953800"><data-lsp lsp='(property) username: string' >username</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">&#125;, </span><span style="color: #0A3069">"Database User"</span><span style="color: #24292F">&gt;; </span><span style="color: #6E7781">// and with object types</span></div></code></div></pre>`,B,w,R="The <code>Brand</code> utility type makes it easy to encode information about a value in its type. I find this helpful as values move through an application. Branded types can represent:",L,g,X="<li>Unique keys in a database</li> <li>Hashed passwords</li> <li>Validated emails</li> <li>Verified emails</li> <li>IDs for different schemas such as users or posts</li> <li>A <code>User</code> object that came from a database record</li> <li>and more!</li>",M,v,G='<a aria-hidden="true" tabindex="-1" href="#narrowing-to-a-branded-type-using-type-predicates-and-assertion-functions"><span class="icon icon-link"></span></a><a href="#narrowing-to-a-branded-type-using-type-predicates-and-assertion-functions" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Narrowing to a branded type using type predicates and assertion functions',U,b,J='Brands can also be used with <a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates" rel="nofollow">type predicate functions</a> to narrow a structural type to a <em>branded</em> type in something like a validation function. For example:',S,x,ns=`<pre class="shiki twoslash lsp" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Password = string' >Password</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type ValidPassword = string &amp; &#123;&#10;    [brand]: "Valid";&#10;&#125;' >ValidPassword</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Brand&lt;T, TBrand extends string> = T &amp; &#123;&#10;    [brand]: TBrand;&#10;&#125;' >Brand</data-lsp></span><span style="color: #24292F">&lt;</span><span style="color: #953800"><data-lsp lsp='type Password = string' >Password</data-lsp></span><span style="color: #24292F">, </span><span style="color: #0A3069">"Valid"</span><span style="color: #24292F">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='function isValidPassword(password: Password): password is ValidPassword' >isValidPassword</data-lsp></span><span style="color: #24292F">(</span><span style="color: #953800"><data-lsp lsp='(parameter) password: string' >password</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Password = string' >Password</data-lsp></span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='(parameter) password: string' >password</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">is</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type ValidPassword = string &amp; &#123;&#10;    [brand]: "Valid";&#10;&#125;' >ValidPassword</data-lsp></span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">( <data-lsp lsp='(parameter) password: string' >password</data-lsp>.</span><span style="color: #0550AE"><data-lsp lsp='(property) String.length: number' >length</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">&gt;=</span><span style="color: #24292F"> </span><span style="color: #0550AE">8</span><span style="color: #24292F">) </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0550AE">true</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0550AE">false</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style="color: #CF222E">let</span><span style="color: #24292F"> <data-lsp lsp='let pass: string' >pass</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Password = string' >Password</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0A3069">"12345678"</span><span style="color: #24292F">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #CF222E">if</span><span style="color: #24292F">(</span><span style="color: #8250DF"><data-lsp lsp='function isValidPassword(password: Password): password is ValidPassword' >isValidPassword</data-lsp></span><span style="color: #24292F">(<data-lsp lsp='let pass: string' >pass</data-lsp>))&#123;</span></div><div class='line'><span style="color: #24292F">	<data-lsp lsp='let pass: ValidPassword' >pass</data-lsp></span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #6E7781">// Hover &#96;pass&#96; above to see it&apos;s now typed as &#96;ValidPassword&#96;</span></div><div class='line'><span style="color: #24292F">&#125;</span></div></code></div></pre>`,A,C,K='If you want to reduce the need for nested <code>if</code> statements or include guards, or prefer to treat a <code>false</code> case as an error/exception, consider using <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions" rel="nofollow">assertion functions</a> instead:',q,D,es=`<pre class="shiki twoslash lsp" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='function assertPasswordIsValid(password: Password): asserts password is ValidPassword' >assertPasswordIsValid</data-lsp></span><span style="color: #24292F">(</span><span style="color: #953800"><data-lsp lsp='(parameter) password: string' >password</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Password = string' >Password</data-lsp></span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #CF222E">asserts</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='(parameter) password: string' >password</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">is</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type ValidPassword = string &amp; &#123;&#10;    [brand]: "Valid";&#10;&#125;' >ValidPassword</data-lsp></span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">(<data-lsp lsp='(parameter) password: string' >password</data-lsp>.</span><span style="color: #0550AE"><data-lsp lsp='(property) String.length: number' >length</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">&lt;</span><span style="color: #24292F"> </span><span style="color: #0550AE">8</span><span style="color: #24292F">) </span><span style="color: #CF222E">throw</span><span style="color: #24292F"> </span><span style="color: #CF222E">new</span><span style="color: #24292F"> </span><span style="color: #0550AE"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style="color: #24292F">(</span><span style="color: #0A3069">"Password too short"</span><span style="color: #24292F">)</span></div><div class='line'><span style="color: #24292F">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #CF222E">let</span><span style="color: #24292F"> <data-lsp lsp='let pass: string' >pass</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type Password = string' >Password</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0A3069">"12345678"</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #8250DF"><data-lsp lsp='function assertPasswordIsValid(password: Password): asserts password is ValidPassword' >assertPasswordIsValid</data-lsp></span><span style="color: #24292F">(<data-lsp lsp='let pass: string' >pass</data-lsp>);</span></div><div class='line'><span style="color: #24292F"><data-lsp lsp='let pass: ValidPassword' >pass</data-lsp></span></div><div class='line'><span style="color: #6E7781">// Hover over &#96;pass&#96; to see it&apos;s now typed as &#96;ValidPassword&#96; - no &#96;if&#96; statements needed!</span></div></code></div></pre>`,V;return{c(){l=y("p"),l.textContent=m,c=p(),i=y("p"),i.innerHTML=t,r=p(),d=y("p"),d.textContent=z,k=p(),T=new $(!1),_=p(),f=y("p"),f.innerHTML=N,I=p(),E=y("p"),E.textContent=O,H=p(),P=new $(!1),B=p(),w=y("p"),w.innerHTML=R,L=p(),g=y("ul"),g.innerHTML=X,M=p(),v=y("h2"),v.innerHTML=G,U=p(),b=y("p"),b.innerHTML=J,S=p(),x=new $(!1),A=p(),C=y("p"),C.innerHTML=K,q=p(),D=new $(!1),V=W(),this.h()},l(s){l=F(s,"P",{["data-svelte-h"]:!0}),u(l)!=="svelte-pcla4p"&&(l.textContent=m),c=o(s),i=F(s,"P",{["data-svelte-h"]:!0}),u(i)!=="svelte-n3itsv"&&(i.innerHTML=t),r=o(s),d=F(s,"P",{["data-svelte-h"]:!0}),u(d)!=="svelte-1ashlgj"&&(d.textContent=z),k=o(s),T=j(s,!1),_=o(s),f=F(s,"P",{["data-svelte-h"]:!0}),u(f)!=="svelte-7t19cz"&&(f.innerHTML=N),I=o(s),E=F(s,"P",{["data-svelte-h"]:!0}),u(E)!=="svelte-1u90b4"&&(E.textContent=O),H=o(s),P=j(s,!1),B=o(s),w=F(s,"P",{["data-svelte-h"]:!0}),u(w)!=="svelte-kpgboa"&&(w.innerHTML=R),L=o(s),g=F(s,"UL",{["data-svelte-h"]:!0}),u(g)!=="svelte-92thro"&&(g.innerHTML=X),M=o(s),v=F(s,"H2",{id:!0,["data-svelte-h"]:!0}),u(v)!=="svelte-rfznyc"&&(v.innerHTML=G),U=o(s),b=F(s,"P",{["data-svelte-h"]:!0}),u(b)!=="svelte-90becn"&&(b.innerHTML=J),S=o(s),x=j(s,!1),A=o(s),C=F(s,"P",{["data-svelte-h"]:!0}),u(C)!=="svelte-kxtrk6"&&(C.innerHTML=K),q=o(s),D=j(s,!1),V=W(),this.h()},h(){T.a=_,P.a=B,ps(v,"id","narrowing-to-a-branded-type-using-type-predicates-and-assertion-functions"),x.a=A,D.a=V},m(s,a){n(s,l,a),n(s,c,a),n(s,i,a),n(s,r,a),n(s,d,a),n(s,k,a),T.m(as,s,a),n(s,_,a),n(s,f,a),n(s,I,a),n(s,E,a),n(s,H,a),P.m(ls,s,a),n(s,B,a),n(s,w,a),n(s,L,a),n(s,g,a),n(s,M,a),n(s,v,a),n(s,U,a),n(s,b,a),n(s,S,a),x.m(ns,s,a),n(s,A,a),n(s,C,a),n(s,q,a),D.m(es,s,a),n(s,V,a)},p:os,d(s){s&&(e(l),e(c),e(i),e(r),e(d),e(k),T.d(),e(_),e(f),e(I),e(E),e(H),P.d(),e(B),e(w),e(L),e(g),e(M),e(v),e(U),e(b),e(S),x.d(),e(A),e(C),e(q),e(V),D.d())}}}function ws(h){let l,m;const c=[h[0],ss];let i={$$slots:{default:[Es]},$$scope:{ctx:h}};for(let t=0;t<c.length;t+=1)i=Z(i,c[t]);return l=new fs({props:i}),{c(){cs(l.$$.fragment)},l(t){ds(l.$$.fragment,t)},m(t,r){ys(l,t,r),m=!0},p(t,[r]){const d=r&1?vs(c,[r&1&&Y(t[0]),r&0&&Y(ss)]):{};r&2&&(d.$$scope={dirty:r,ctx:t}),l.$set(d)},i(t){m||(Fs(l.$$.fragment,t),m=!0)},o(t){us(l.$$.fragment,t),m=!1},d(t){ms(l,t)}}}const ss={title:"Type branding removes structural type compatibility",description:'A structural type can be "branded" to add context to values by using the type system for annotations as is done with nominal types. Doing so makes them incompatible with structurally equivalent types.',slug:"structural-branded-types-nominal",publish:!0,lastmod:"2024-03-16T00:00:00.000Z",date:"2024-02-03T00:00:00.000Z",aliases:null,tags:["topic/typescript","status/budding"],timeToRead:3,internalLinks:[],flashcards:[]};function gs(h,l,m){return h.$$set=c=>{m(0,l=Z(Z({},l),Q(c)))},l=Q(l),[l]}class _s extends rs{constructor(l){super(),is(this,l,gs,ws,ts,{})}}export{_s as default,ss as metadata};
