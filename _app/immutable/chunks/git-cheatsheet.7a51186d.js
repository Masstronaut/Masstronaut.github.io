import{s as vt,C as Ae,a3 as at,f as o,a as i,a4 as m,g as c,u as r,c as n,a5 as p,j as B,i as a,A as bt,d as l}from"./scheduler.5beeadad.js";import{S as gt,i as yt,b as _t,d as wt,m as xt,a as kt,t as Ct,e as Tt}from"./index.bfd99307.js";import{g as Ht,a as lt}from"./spread.8a54911c.js";import{M as Mt}from"./MDSveXNoteLayout.2cdb5b99.js";function Ft(q){let s,b='<a aria-hidden="true" tabindex="-1" href="#create-a-branch-with-current-changes"><span class="icon icon-link"></span></a><a href="#create-a-branch-with-current-changes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Create a branch with current changes',u,f,d="Sometimes I’m working on a problem and end up side-tracked and solve another problem, but forgot to switch branches first. Doh! This one is an easy fix:",h,v,$e="<li>Create a new branch and checkout to it (single step)</li> <li>Stage the changes</li> <li>Commit changes to it</li> <li>Push the branch to the remote/tracking</li>",de,D,nt=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git checkout -b feature/my-second-feature</span></div><div class='line'><span style="color: #24292F">git add </span><span style="color: #0550AE">.</span></div><div class='line'><span style="color: #24292F">git commit -m </span><span style="color: #0A3069">"Moving these changes to their own branch"</span></div><div class='line'><span style="color: #24292F">git push -u origin feature/my-second-feature</span></div></code></div></pre>`,G,g,ze='<a aria-hidden="true" tabindex="-1" href="#amend-a-previous-commit"><span class="icon icon-link"></span></a><a href="#amend-a-previous-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Amend a previous commit',he,k,Ee="You’ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then there’s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.",fe,N,st=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git commit --amend</span></div></code></div></pre>`,Y,C,je="If you’ve already <code>git push</code>ed the original commit, <em>amend</em>ing it would change history and isn’t allowed with <code>git push</code> by default. However, this can be overcome by forcing the push to overwrite the old commit in history with the amended commit.",me,Z,ot=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git push --force</span></div></code></div></pre>`,U,y,Re='<a aria-hidden="true" tabindex="-1" href="#go-back-to-an-old-commit"><span class="icon icon-link"></span></a><a href="#go-back-to-an-old-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Go back to an old commit',pe,T,Se="This command will rewind history locally to the specified git commit.",ue,W,ct=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git reset --hard </span><span style="color: #CF222E">&lt;</span><span style="color: #24292F">commit hash</span><span style="color: #CF222E">&gt;</span></div></code></div></pre>`,X,H,Oe="If you want to erase the changes that followed on the remote copy, you can additionally run:",ve,J,rt=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git push -f</span></div></code></div></pre>`,K,M,qe="Which will force git to push your current history and overwrite whatever currently exists on remote.",be,_,Be='<a aria-hidden="true" tabindex="-1" href="#merge-changes-from-branch-a-into-branch-b"><span class="icon icon-link"></span></a><a href="#merge-changes-from-branch-a-into-branch-b" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Merge changes from branch A into branch B',ge,F,De="This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.",ye,L,Ge="First, make sure you have the latest remote changes locally.",_e,Q,dt=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git fetch</span></div><div class='line'><span style="color: #24292F">git pull</span></div></code></div></pre>`,V,P,Ne="Make sure you have the branch you want to merge changes <em>into</em> checked out locally:",we,ee,ht=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git checkout </span><span style="color: #CF222E">&lt;</span><span style="color: #24292F">BranchB</span><span style="color: #CF222E">&gt;</span></div></code></div></pre>`,te,I,Ye="And then merge the changes from branch A in:",xe,ae,ft=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git merge </span><span style="color: #CF222E">&lt;</span><span style="color: #24292F">BranchA</span><span style="color: #CF222E">&gt;</span></div></code></div></pre>`,le,w,Ze='<a aria-hidden="true" tabindex="-1" href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"><span class="icon icon-link"></span></a><a href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Rebase changes in a branch onto a newer commit from the parent branch',ke,A,Ue="This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.",Ce,$,We="Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:",Te,ie,mt=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git checkout main</span></div><div class='line'><span style="color: #24292F">git fetch</span></div><div class='line'><span style="color: #24292F">git pull</span></div><div class='line'><span style="color: #24292F">git checkout delta</span></div><div class='line'><span style="color: #24292F">git fetch</span></div><div class='line'><span style="color: #24292F">git pull</span></div></code></div></pre>`,ne,z,Xe="The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:",He,se,pt=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git checkout delta</span></div><div class='line'><span style="color: #24292F">git rebase main</span></div></code></div></pre>`,oe,x,Je='<a aria-hidden="true" tabindex="-1" href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"><span class="icon icon-link"></span></a><a href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Move changes from a protected branch to a feature branch after accidentally committing without switching branches first',Me,E,Ke="Often I will pull latest from the <code>main</code> branch and start making changes for the ticket I’m working on. After some progress I will then commit my changes, forgetting that I didn’t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I can’t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways I’ve found to do this.",Fe,j,Qe="Option 1 works conceptually by taking the following actions:",Le,R,Ve="<li>Undo my last commit to <code>main</code></li> <li>create &amp; checkout a new feature branch</li> <li>commit my changes to it</li>",Pe,ce,ut=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #24292F">git reset --soft HEAD~1</span></div><div class='line'><span style="color: #24292F">git checkout -b feature/my-new-feature</span></div><div class='line'><span style="color: #24292F">git commit</span></div></code></div></pre>`,re,S,et="Option 2:",Ie,O,tt="<li>Create a branch from my commit locally</li> <li>Push my new branch with changes</li> <li>Checkout my local <code>main</code> branch</li> <li>Reset it to the same commit as on <code>origin</code></li>";return{c(){s=o("h2"),s.innerHTML=b,u=i(),f=o("p"),f.textContent=d,h=i(),v=o("ol"),v.innerHTML=$e,de=i(),D=new m(!1),G=i(),g=o("h2"),g.innerHTML=ze,he=i(),k=o("p"),k.textContent=Ee,fe=i(),N=new m(!1),Y=i(),C=o("p"),C.innerHTML=je,me=i(),Z=new m(!1),U=i(),y=o("h2"),y.innerHTML=Re,pe=i(),T=o("p"),T.textContent=Se,ue=i(),W=new m(!1),X=i(),H=o("p"),H.textContent=Oe,ve=i(),J=new m(!1),K=i(),M=o("p"),M.textContent=qe,be=i(),_=o("h2"),_.innerHTML=Be,ge=i(),F=o("p"),F.textContent=De,ye=i(),L=o("p"),L.textContent=Ge,_e=i(),Q=new m(!1),V=i(),P=o("p"),P.innerHTML=Ne,we=i(),ee=new m(!1),te=i(),I=o("p"),I.textContent=Ye,xe=i(),ae=new m(!1),le=i(),w=o("h2"),w.innerHTML=Ze,ke=i(),A=o("p"),A.textContent=Ue,Ce=i(),$=o("p"),$.innerHTML=We,Te=i(),ie=new m(!1),ne=i(),z=o("p"),z.innerHTML=Xe,He=i(),se=new m(!1),oe=i(),x=o("h2"),x.innerHTML=Je,Me=i(),E=o("p"),E.innerHTML=Ke,Fe=i(),j=o("p"),j.textContent=Qe,Le=i(),R=o("ol"),R.innerHTML=Ve,Pe=i(),ce=new m(!1),re=i(),S=o("p"),S.textContent=et,Ie=i(),O=o("ol"),O.innerHTML=tt,this.h()},l(e){s=c(e,"H2",{id:!0,["data-svelte-h"]:!0}),r(s)!=="svelte-18cqt3l"&&(s.innerHTML=b),u=n(e),f=c(e,"P",{["data-svelte-h"]:!0}),r(f)!=="svelte-xkd71n"&&(f.textContent=d),h=n(e),v=c(e,"OL",{["data-svelte-h"]:!0}),r(v)!=="svelte-nowu74"&&(v.innerHTML=$e),de=n(e),D=p(e,!1),G=n(e),g=c(e,"H2",{id:!0,["data-svelte-h"]:!0}),r(g)!=="svelte-1vmpya9"&&(g.innerHTML=ze),he=n(e),k=c(e,"P",{["data-svelte-h"]:!0}),r(k)!=="svelte-da15cb"&&(k.textContent=Ee),fe=n(e),N=p(e,!1),Y=n(e),C=c(e,"P",{["data-svelte-h"]:!0}),r(C)!=="svelte-epbufz"&&(C.innerHTML=je),me=n(e),Z=p(e,!1),U=n(e),y=c(e,"H2",{id:!0,["data-svelte-h"]:!0}),r(y)!=="svelte-1dnle15"&&(y.innerHTML=Re),pe=n(e),T=c(e,"P",{["data-svelte-h"]:!0}),r(T)!=="svelte-ee1o77"&&(T.textContent=Se),ue=n(e),W=p(e,!1),X=n(e),H=c(e,"P",{["data-svelte-h"]:!0}),r(H)!=="svelte-1yazrsz"&&(H.textContent=Oe),ve=n(e),J=p(e,!1),K=n(e),M=c(e,"P",{["data-svelte-h"]:!0}),r(M)!=="svelte-1agz04c"&&(M.textContent=qe),be=n(e),_=c(e,"H2",{id:!0,["data-svelte-h"]:!0}),r(_)!=="svelte-pj200v"&&(_.innerHTML=Be),ge=n(e),F=c(e,"P",{["data-svelte-h"]:!0}),r(F)!=="svelte-1q9iaj3"&&(F.textContent=De),ye=n(e),L=c(e,"P",{["data-svelte-h"]:!0}),r(L)!=="svelte-1qmoy2f"&&(L.textContent=Ge),_e=n(e),Q=p(e,!1),V=n(e),P=c(e,"P",{["data-svelte-h"]:!0}),r(P)!=="svelte-1il9orw"&&(P.innerHTML=Ne),we=n(e),ee=p(e,!1),te=n(e),I=c(e,"P",{["data-svelte-h"]:!0}),r(I)!=="svelte-ihf4o6"&&(I.textContent=Ye),xe=n(e),ae=p(e,!1),le=n(e),w=c(e,"H2",{id:!0,["data-svelte-h"]:!0}),r(w)!=="svelte-8zjcwg"&&(w.innerHTML=Ze),ke=n(e),A=c(e,"P",{["data-svelte-h"]:!0}),r(A)!=="svelte-zryt13"&&(A.textContent=Ue),Ce=n(e),$=c(e,"P",{["data-svelte-h"]:!0}),r($)!=="svelte-g99txi"&&($.innerHTML=We),Te=n(e),ie=p(e,!1),ne=n(e),z=c(e,"P",{["data-svelte-h"]:!0}),r(z)!=="svelte-1aztn92"&&(z.innerHTML=Xe),He=n(e),se=p(e,!1),oe=n(e),x=c(e,"H2",{id:!0,["data-svelte-h"]:!0}),r(x)!=="svelte-jytbzs"&&(x.innerHTML=Je),Me=n(e),E=c(e,"P",{["data-svelte-h"]:!0}),r(E)!=="svelte-p3l8ro"&&(E.innerHTML=Ke),Fe=n(e),j=c(e,"P",{["data-svelte-h"]:!0}),r(j)!=="svelte-7v7nlf"&&(j.textContent=Qe),Le=n(e),R=c(e,"OL",{["data-svelte-h"]:!0}),r(R)!=="svelte-151cf32"&&(R.innerHTML=Ve),Pe=n(e),ce=p(e,!1),re=n(e),S=c(e,"P",{["data-svelte-h"]:!0}),r(S)!=="svelte-epaes7"&&(S.textContent=et),Ie=n(e),O=c(e,"OL",{["data-svelte-h"]:!0}),r(O)!=="svelte-17wcmxd"&&(O.innerHTML=tt),this.h()},h(){B(s,"id","create-a-branch-with-current-changes"),D.a=G,B(g,"id","amend-a-previous-commit"),N.a=Y,Z.a=U,B(y,"id","go-back-to-an-old-commit"),W.a=X,J.a=K,B(_,"id","merge-changes-from-branch-a-into-branch-b"),Q.a=V,ee.a=te,ae.a=le,B(w,"id","rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"),ie.a=ne,se.a=oe,B(x,"id","move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"),ce.a=re},m(e,t){a(e,s,t),a(e,u,t),a(e,f,t),a(e,h,t),a(e,v,t),a(e,de,t),D.m(nt,e,t),a(e,G,t),a(e,g,t),a(e,he,t),a(e,k,t),a(e,fe,t),N.m(st,e,t),a(e,Y,t),a(e,C,t),a(e,me,t),Z.m(ot,e,t),a(e,U,t),a(e,y,t),a(e,pe,t),a(e,T,t),a(e,ue,t),W.m(ct,e,t),a(e,X,t),a(e,H,t),a(e,ve,t),J.m(rt,e,t),a(e,K,t),a(e,M,t),a(e,be,t),a(e,_,t),a(e,ge,t),a(e,F,t),a(e,ye,t),a(e,L,t),a(e,_e,t),Q.m(dt,e,t),a(e,V,t),a(e,P,t),a(e,we,t),ee.m(ht,e,t),a(e,te,t),a(e,I,t),a(e,xe,t),ae.m(ft,e,t),a(e,le,t),a(e,w,t),a(e,ke,t),a(e,A,t),a(e,Ce,t),a(e,$,t),a(e,Te,t),ie.m(mt,e,t),a(e,ne,t),a(e,z,t),a(e,He,t),se.m(pt,e,t),a(e,oe,t),a(e,x,t),a(e,Me,t),a(e,E,t),a(e,Fe,t),a(e,j,t),a(e,Le,t),a(e,R,t),a(e,Pe,t),ce.m(ut,e,t),a(e,re,t),a(e,S,t),a(e,Ie,t),a(e,O,t)},p:bt,d(e){e&&(l(s),l(u),l(f),l(h),l(v),l(de),D.d(),l(G),l(g),l(he),l(k),l(fe),N.d(),l(Y),l(C),l(me),Z.d(),l(U),l(y),l(pe),l(T),l(ue),W.d(),l(X),l(H),l(ve),J.d(),l(K),l(M),l(be),l(_),l(ge),l(F),l(ye),l(L),l(_e),Q.d(),l(V),l(P),l(we),ee.d(),l(te),l(I),l(xe),ae.d(),l(le),l(w),l(ke),l(A),l(Ce),l($),l(Te),ie.d(),l(ne),l(z),l(He),se.d(),l(oe),l(x),l(Me),l(E),l(Fe),l(j),l(Le),l(R),l(Pe),ce.d(),l(re),l(S),l(Ie),l(O))}}}function Lt(q){let s,b;const u=[q[0],it];let f={$$slots:{default:[Ft]},$$scope:{ctx:q}};for(let d=0;d<u.length;d+=1)f=Ae(f,u[d]);return s=new Mt({props:f}),{c(){_t(s.$$.fragment)},l(d){wt(s.$$.fragment,d)},m(d,h){xt(s,d,h),b=!0},p(d,[h]){const v=h&1?Ht(u,[h&1&&lt(d[0]),h&0&&lt(it)]):{};h&2&&(v.$$scope={dirty:h,ctx:d}),s.$set(v)},i(d){b||(kt(s.$$.fragment,d),b=!0)},o(d){Ct(s.$$.fragment,d),b=!1},d(d){Tt(s,d)}}}const it={title:"git-cheatsheet",description:"Some common scenarios and how to resolve them using git.",slug:"git-cheatsheet",publish:!0,lastmod:"2023-06-28T00:00:00.000Z",date:"2022-05-24T00:00:00.000Z",aliases:[null],tags:["status/seedling"],timeToRead:4,internalLinks:[],flashcards:[]};function Pt(q,s,b){return q.$$set=u=>{b(0,s=Ae(Ae({},s),at(u)))},s=at(s),[s]}class Et extends gt{constructor(s){super(),yt(this,s,Pt,Lt,vt,{})}}export{Et as default,it as metadata};
