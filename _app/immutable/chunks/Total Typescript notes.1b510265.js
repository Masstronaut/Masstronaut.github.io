import{s as va,C as ze,a3 as Kl,f as o,a as n,a4 as F,g as p,u as r,c as t,a5 as v,j as m,i as l,d as a,A as ua}from"./scheduler.5beeadad.js";import{S as fa,i as ha,b as Wl,d as zl,m as Nl,a as Bl,t as Jl,e as Zl}from"./index.bfd99307.js";import{g as ma,a as Ul}from"./spread.8a54911c.js";import{M as Ca}from"./MDSveXNoteLayout.2a006cba.js";import{T as Ea}from"./Table.8240123f.js";function ga(C){let i,h="<tr><th>Route</th> <th>RouteParams object provided to handler</th></tr>",u,d,c="<tr><td><code>/item/:id</code></td> <td><code>{ id: string }</code></td></tr> <tr><td><code>/user/:id/team/:teamId</code></td> <td><code>{ user: string; team: string}</code></td></tr>";return{c(){i=o("thead"),i.innerHTML=h,u=n(),d=o("tbody"),d.innerHTML=c},l(y){i=p(y,"THEAD",{["data-svelte-h"]:!0}),r(i)!=="svelte-k9n91c"&&(i.innerHTML=h),u=t(y),d=p(y,"TBODY",{["data-svelte-h"]:!0}),r(d)!=="svelte-euigto"&&(d.innerHTML=c)},m(y,f){l(y,i,f),l(y,u,f),l(y,d,f)},p:ua,d(y){y&&(a(i),a(u),a(d))}}}function ba(C){let i,h="Sections here which I’ve pulled out into their own notes:",u,d,c='<li><a href="/notes/Type%20branding%20removes%20structural%20type%20compatibility/">Type branding removes structural type compatibility</a></li>',y,f,Ne='<a aria-hidden="true" tabindex="-1" href="#splitting-a-string-literal-using-a-delimeter"><span class="icon icon-link"></span></a><a href="#splitting-a-string-literal-using-a-delimeter" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Splitting a string literal using a delimeter',Gs,vs,Gl=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">SplitString</span><span style="color: #24292F">&lt;</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">,</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #953800">Delimiter</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span></div><div class='line'><span style="color: #24292F">&gt; </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0A3069">&#96;$&#123;</span><span style="color: #CF222E">infer</span><span style="color: #0A3069"> </span><span style="color: #953800">L</span><span style="color: #0A3069">&#125;$&#123;</span><span style="color: #953800">Delimiter</span><span style="color: #0A3069">&#125;$&#123;</span><span style="color: #CF222E">infer</span><span style="color: #0A3069"> </span><span style="color: #953800">R</span><span style="color: #0A3069">&#125;&#96;</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #CF222E">?</span><span style="color: #24292F"> [</span><span style="color: #0A3069">&#96;$&#123;</span><span style="color: #953800">L</span><span style="color: #0A3069">&#125;&#96;</span><span style="color: #24292F">, </span><span style="color: #CF222E">...</span><span style="color: #953800">SplitString</span><span style="color: #24292F">&lt;</span><span style="color: #0A3069">&#96;$&#123;</span><span style="color: #953800">R</span><span style="color: #0A3069">&#125;&#96;</span><span style="color: #24292F">, </span><span style="color: #953800">Delimiter</span><span style="color: #24292F">&gt;]</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #CF222E">:</span><span style="color: #24292F"> [</span><span style="color: #953800">T</span><span style="color: #24292F">];</span></div></code></div></pre>`,us,M,Be="This snippet splits a into a union of parts using a recursive template literal string. The type splits its input into two pieces: before the delimiter and after. The part after the delimiter is recursively passed into the <code>SplitString&lt;&gt;</code> utility type and split until no delimiters remain. The split pieces are then bundled up into a tuple.",Xs,E,Je='<a aria-hidden="true" tabindex="-1" href="#extracting-route-parameters-from-a-route"><span class="icon icon-link"></span></a><a href="#extracting-route-parameters-from-a-route" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Extracting route parameters from a route',Ys,H,Ze="Imagine you have routes with parameters in them that you wish to extract into an object that could be passed to a route handler with the values for a route instance. For example, you have handlers for the following routes:",Qs,g,se,L,Ge="To maintain type safety, the routes need to be used to generate RouteParams objects at the type level. The API to generate a RouteParams object would look something like <code>RouteParams&lt;`/item/:id`&gt;</code>, receiving the route as a <em>type</em> parameter rather than a runtime variable.",ee,P,Xe="Building on the <code>Split</code> type from <em>Splitting a string literal using a delimeter</em> this is possible, enabling type-safety in route handlers.",le,fs,Xl=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">RouteParams</span><span style="color: #24292F">&lt;</span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0A3069">&#96;/$&#123;</span><span style="color: #0550AE">string</span><span style="color: #0A3069">&#125;&#96;</span><span style="color: #24292F">&gt; </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">  [</span><span style="color: #953800">Segment</span><span style="color: #24292F"> </span><span style="color: #CF222E">in</span><span style="color: #24292F"> </span><span style="color: #953800">SplitString</span><span style="color: #24292F">&lt;</span><span style="color: #953800">T</span><span style="color: #24292F">, </span><span style="color: #0A3069">'/'</span><span style="color: #24292F">&gt;[</span><span style="color: #0550AE">number</span><span style="color: #24292F">] </span><span style="color: #CF222E">as</span><span style="color: #24292F"> </span><span style="color: #953800">Segment</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0A3069">&#96;:$&#123;</span><span style="color: #CF222E">infer</span><span style="color: #0A3069"> </span><span style="color: #953800">Param</span><span style="color: #0A3069">&#125;&#96;</span><span style="color: #24292F"> </span><span style="color: #CF222E">?</span><span style="color: #24292F"> </span><span style="color: #953800">Param</span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">never</span><span style="color: #24292F">]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div></code></div></pre>`,hs,j,Ye="This snippet works in 3 parts:",ae,$,Qe='<li>The route passed in is split into its constituent segments</li> <li>Segments that start with a <code>:</code> are kept as params and segments that don’t are discarded as <code>never</code></li> <li>The kept segments are used to create a <a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html" rel="nofollow">mapped type</a> with params as the object keys that correspond to string values.</li>',ne,S,sl="Then a runtime parser can be used to grab the param values from real request URLs, construct a RequestParams object, and pass it to the route handler. Awesome!",te,b,el='<a aria-hidden="true" tabindex="-1" href="#typescript-momu-pattern---mapped-object-mapped-union"><span class="icon icon-link"></span></a><a href="#typescript-momu-pattern---mapped-object-mapped-union" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>TypeScript MOMU pattern - Mapped object, mapped union',oe,D,ll="This isn’t explicitly a pattern in TTS, but I noticed its recurrence and wanted to note it for myself.",pe,q,al="Imagine you have an object type consisting of basic key-value (KV) pairs. For example:",re,ms,Yl=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">Person</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">id</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">name</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">age</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">number</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div></code></div></pre>`,Cs,O,nl='Using a <a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html" rel="nofollow">mapped type</a> this can be transformed into a derivative type, such as one where the KV pairs are tuple values. To demonstrate, consider this mapped type:',ie,Es,Ql=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">PersonKVs</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	[</span><span style="color: #953800">K</span><span style="color: #24292F"> </span><span style="color: #CF222E">in</span><span style="color: #24292F"> </span><span style="color: #CF222E">keyof</span><span style="color: #24292F"> </span><span style="color: #953800">Person</span><span style="color: #24292F">]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> [</span><span style="color: #953800">K</span><span style="color: #24292F">, </span><span style="color: #953800">Person</span><span style="color: #24292F">[</span><span style="color: #953800">K</span><span style="color: #24292F">]];</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div></code></div></pre>`,gs,R,tl="A hand-written equivalent of this type would be:",ce,bs,sa=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">PersonKVs</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">id</span><span style="color: #CF222E">:</span><span style="color: #24292F"> [</span><span style="color: #0A3069">'id'</span><span style="color: #24292F">, </span><span style="color: #0550AE">string</span><span style="color: #24292F">];</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">name</span><span style="color: #CF222E">:</span><span style="color: #24292F"> [</span><span style="color: #0A3069">'name'</span><span style="color: #24292F">, </span><span style="color: #0550AE">string</span><span style="color: #24292F">];</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">age</span><span style="color: #CF222E">:</span><span style="color: #24292F"> [</span><span style="color: #0A3069">'age'</span><span style="color: #24292F">, </span><span style="color: #0550AE">number</span><span style="color: #24292F">];</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div></code></div></pre>`,ws,I,ol="Mapped types are useful for transforming one type into another shape, adding functionality (such as getter/setter functions), etc.",ye,K,pl="The Mapped Object Mapped Union (MOMU) pattern extends this by taking the mapped object and further mapping it into a union type. This can be used to transform an initial object type such as <code>Person</code> into a union of tuple types. For example:",de,xs,ea=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">PersonKVTuples</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	[</span><span style="color: #953800">K</span><span style="color: #24292F"> </span><span style="color: #CF222E">in</span><span style="color: #24292F"> </span><span style="color: #CF222E">keyof</span><span style="color: #24292F"> </span><span style="color: #953800">Person</span><span style="color: #24292F">]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> [</span><span style="color: #953800">K</span><span style="color: #24292F">, </span><span style="color: #953800">Person</span><span style="color: #24292F">[</span><span style="color: #953800">K</span><span style="color: #24292F">]];</span></div><div class='line'><span style="color: #24292F">&#125;[</span><span style="color: #CF222E">keyof</span><span style="color: #24292F"> </span><span style="color: #953800">Person</span><span style="color: #24292F">];</span></div><div class='line'></div><div class='line'><span style="color: #6E7781">// equivalent type:</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">PersonKVTuple</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> [</span><span style="color: #0A3069">'id'</span><span style="color: #24292F">, </span><span style="color: #0550AE">string</span><span style="color: #24292F">] </span><span style="color: #CF222E">|</span><span style="color: #24292F"> [</span><span style="color: #0A3069">'name'</span><span style="color: #24292F">, </span><span style="color: #0550AE">string</span><span style="color: #24292F">] </span><span style="color: #CF222E">|</span><span style="color: #24292F"> [</span><span style="color: #0A3069">'age'</span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #0550AE">number</span><span style="color: #24292F">];</span></div></code></div></pre>`,Ts,U,rl="In the MOMU pattern, the initial mapped object type is mapped once more into a union type. Performing a second mapping provides a lot of extra options when transforming types.",Fe,V,il="The MOMU pattern can also be used to transform a union type into another union type. One example of this is turning a discriminated union into a union of template literals:",ve,_s,la=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">Errors</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">code</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">404</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">message</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0A3069">'Not found'</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125; </span><span style="color: #CF222E">|</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">code</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">403</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #953800">message</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0A3069">'Forbidden'</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div><div class='line'></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">ErrorMessages</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">	[</span><span style="color: #953800">K</span><span style="color: #24292F"> </span><span style="color: #CF222E">in</span><span style="color: #24292F"> </span><span style="color: #953800">Errors</span><span style="color: #24292F"> </span><span style="color: #CF222E">as</span><span style="color: #24292F"> </span><span style="color: #953800">K</span><span style="color: #24292F">[</span><span style="color: #0A3069">'code'</span><span style="color: #24292F">]]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0A3069">&#96;$&#123;</span><span style="color: #953800">K</span><span style="color: #0A3069">[</span><span style="color: #0A3069">'code'</span><span style="color: #0A3069">]</span><span style="color: #0A3069">&#125;: $&#123;</span><span style="color: #953800">K</span><span style="color: #0A3069">[</span><span style="color: #0A3069">'message'</span><span style="color: #0A3069">]</span><span style="color: #0A3069">&#125;&#96;</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125;[</span><span style="color: #953800">Errors</span><span style="color: #24292F">[</span><span style="color: #0A3069">'code'</span><span style="color: #24292F">]];</span></div></code></div></pre>`,As,W,cl="The <code>ErrorMessages</code> would be equivalent to the following union type:",ue,ks,aa=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">ErrorMessages</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0A3069">'404: Not found'</span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #0A3069">&#96;403: Forbidden&#96;</span><span style="color: #24292F">;</span></div></code></div></pre>`,Ms,z,yl="The MOMU pattern also works if the scenario is flipped and you wanted to get from <code>ErrorMessages</code> to <code>Errors</code>:",fe,Hs,na=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #6E7781">// Produces the same union as the &#96;Errors&#96; type</span></div><div class='line'><span style="color: #CF222E">type</span><span style="color: #24292F"> </span><span style="color: #953800">Errors2</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">    [</span><span style="color: #953800">Error</span><span style="color: #24292F"> </span><span style="color: #CF222E">in</span><span style="color: #24292F"> </span><span style="color: #953800">ErrorMessages</span><span style="color: #24292F">]</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Error</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0A3069">&#96;$&#123;</span><span style="color: #CF222E">infer</span><span style="color: #0A3069"> </span><span style="color: #953800">code</span><span style="color: #0A3069">&#125;: $&#123;</span><span style="color: #CF222E">infer</span><span style="color: #0A3069"> </span><span style="color: #953800">message</span><span style="color: #0A3069">&#125;&#96;</span><span style="color: #24292F"> </span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">?</span><span style="color: #24292F"> &#123;</span><span style="color: #953800">code</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">code</span><span style="color: #24292F">, </span><span style="color: #953800">message</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">message</span><span style="color: #24292F">&#125; </span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">never</span></div><div class='line'><span style="color: #24292F">&#125;[</span><span style="color: #953800">ErrorMessages</span><span style="color: #24292F">]</span></div></code></div></pre>`,Ls,w,dl='<a aria-hidden="true" tabindex="-1" href="#use-generics-at-the-lowest-level-possible"><span class="icon icon-link"></span></a><a href="#use-generics-at-the-lowest-level-possible" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Use generics at the lowest level possible',he,N,Fl="Imagine you want to write a generic function for overriding home page feature flags. Instead of making the entire config object generic, make only the <em>home page</em> feature flags generic. Here’s an example from the total typescript exercise:",me,Ps,ta=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">export</span><span style="color: #24292F"> </span><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF">getHomePageFeatureFlags</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &lt;</span><span style="color: #953800">Flags</span><span style="color: #24292F">&gt;(</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #953800">config</span><span style="color: #CF222E">:</span><span style="color: #24292F"> &#123; </span><span style="color: #953800">rawConfig</span><span style="color: #CF222E">:</span><span style="color: #24292F"> &#123; </span><span style="color: #953800">featureFlags</span><span style="color: #CF222E">:</span><span style="color: #24292F"> &#123; </span><span style="color: #953800">homePage</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Flags</span><span style="color: #24292F"> &#125; &#125; &#125;,</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #8250DF">override</span><span style="color: #CF222E">:</span><span style="color: #24292F"> (</span><span style="color: #953800">flags</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Flags</span><span style="color: #24292F">) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> </span><span style="color: #953800">Flags</span></div><div class='line'><span style="color: #24292F">) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #8250DF">override</span><span style="color: #24292F">(config.rawConfig.featureFlags.homePage);</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div></code></div></pre>`,js,B,vl="Rather than having the entire <code>config</code> object be a generic, only <code>config.rawConfig.featureFlags.homePage</code> is. Here the <code>override</code> signature is able to accept only the nested home page flags object. This provides nicer intellisense, requires less code be written, and is more readable.",Ce,x,ul='<a aria-hidden="true" tabindex="-1" href="#example-get-a-typed-array-of-object-keys"><span class="icon icon-link"></span></a><a href="#example-get-a-typed-array-of-object-keys" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Example: Get a typed array of object keys',Ee,J,fl="Using JavaScript’s <code>Object.keys()</code> is a handy way to get an array of any object’s keys. Unfortunately, the result is typed as <code>string[]</code>, which isn’t specific enough to make typesafe accesses to an object. For that case, it’s better to use a generic to get a <em>typed</em> array of the keys. Check it out:",ge,$s,oa=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF">typedObjectKeys</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &lt;</span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">&gt;(</span><span style="color: #953800">obj</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Record</span><span style="color: #24292F">&lt;</span><span style="color: #953800">T</span><span style="color: #24292F">, </span><span style="color: #0550AE">unknown</span><span style="color: #24292F">&gt;) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">  </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0550AE">Object</span><span style="color: #24292F">.</span><span style="color: #8250DF">keys</span><span style="color: #24292F">(obj) </span><span style="color: #CF222E">as</span><span style="color: #24292F"> </span><span style="color: #953800">Array</span><span style="color: #24292F">&lt;</span><span style="color: #953800">T</span><span style="color: #24292F">&gt;;</span></div><div class='line'><span style="color: #24292F">&#125;;</span></div></code></div></pre>`,Ss,Z,hl="<code>typedObjectKeys</code> uses the generic at the lowest level possible, the object’s keys, to minimize how much of the type is a generic. It still requires a cast (the <code>as Array&lt;T&gt;</code>) to get the result typed correctly.",be,T,ml='<a aria-hidden="true" tabindex="-1" href="#example-infer-the-literal-types-of-an-array-rather-than-the-basic-type"><span class="icon icon-link"></span></a><a href="#example-infer-the-literal-types-of-an-array-rather-than-the-basic-type" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Example: infer the literal types of an array, rather than the basic type',we,G,Cl="Sometimes the TypeScript compiler infers a broader type than is desirable. Consider this example:",xe,Ds,pa=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF">makeArray</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &lt;</span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #953800">Array</span><span style="color: #24292F">&lt;</span><span style="color: #0550AE">string</span><span style="color: #24292F">&gt;&gt;(</span><span style="color: #953800">values</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">T</span><span style="color: #24292F">) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> values;</span></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">array</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #8250DF">makeArray</span><span style="color: #24292F">([</span><span style="color: #0A3069">'foo'</span><span style="color: #24292F">, </span><span style="color: #0A3069">'bar'</span><span style="color: #24292F">]); </span><span style="color: #6E7781">// typed as Array&lt;string&gt; or string[]</span></div></code></div></pre>`,qs,X,El="This typing is less precise than I’d like, because the values are known at compile time. Because the generic <code>T extends Array&lt;string&gt;</code> is broadly generic on the <em><code>Array</code></em> type, the compiler doesn’t narrow the generic being passed to <code>Array&lt;&gt;</code>, ie the <code>string</code>. By moving <code>makeArray</code>’s generic a lower level - the type parameter being passed to <code>Array&lt;&gt;</code>, Typescript is able to infer a narrower type. Rather than it inferring the <code>Array&lt;string&gt;</code> it will infer what is being passed to <code>Array</code>. Here’s what that looks like:",Te,Os,ra=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF">makeArray</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> &lt;</span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">&gt;(</span><span style="color: #953800">values</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Array</span><span style="color: #24292F">&lt;</span><span style="color: #953800">T</span><span style="color: #24292F">&gt;) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> values;</span></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">array</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #8250DF">makeArray</span><span style="color: #24292F">([</span><span style="color: #0A3069">'foo'</span><span style="color: #24292F">, </span><span style="color: #0A3069">'bar'</span><span style="color: #24292F">]); </span></div><div class='line'><span style="color: #6E7781">//    ^ typed as Array&lt;'foo' | 'bar'&gt; or ('foo' | 'bar')[]</span></div></code></div></pre>`,Rs,Y,gl="This makes use of the same trick as the <em>getting a typed array of object keys</em> - moving the generic to something more specific to coerce the Typescript compiler to infer a narrower type.",_e,_,bl='<a aria-hidden="true" tabindex="-1" href="#example-wrap-a-function-and-safely-get-the-result-or-thrown-error"><span class="icon icon-link"></span></a><a href="#example-wrap-a-function-and-safely-get-the-result-or-thrown-error" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Example: wrap a function and safely get the result or thrown error',Ae,Q,wl="Often there is a need to call a function which might throw. by the time all the cases are handled in the <code>catch</code> block it’s a long and deeply-nested mess of unwieldy code. What would it look like to instead wrap the potentially throwing function and get a result of <code>&#39;success&#39;</code> or <code>&#39;failure&#39;</code> that can be used with a guard clause instead? Here’s a riff on how Matt Pocock handles that in Total Typescript.",ke,ss,xl="Notice that the generic is at a higher level (the entire function type) rather than the lowest possible level (the parameters &amp; return type of the function). This is so that in contexts where the generic is used, the intellisense will show <code>makeSafe</code> as a generic on the function type, which is more intuitive than having a generic with 2 type parameters - 1 for the function parameters and another for the return type.",Me,Is,ia=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">makeSafe</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span></div><div class='line'><span style="color: #24292F">  &lt;</span><span style="color: #953800">T</span><span style="color: #24292F"> </span><span style="color: #CF222E">extends</span><span style="color: #24292F"> (</span><span style="color: #CF222E">...</span><span style="color: #953800">args</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Array</span><span style="color: #24292F">&lt;</span><span style="color: #0550AE">any</span><span style="color: #24292F">&gt;) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> </span><span style="color: #0550AE">any</span><span style="color: #24292F">&gt;(</span><span style="color: #953800">func</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">T</span><span style="color: #24292F">) </span><span style="color: #CF222E">=&gt;</span></div><div class='line'><span style="color: #24292F">  (</span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">...</span><span style="color: #24292F">args: Parameters</span><span style="color: #CF222E">&lt;</span><span style="color: #0550AE">T</span><span style="color: #CF222E">&gt;</span></div><div class='line'><span style="color: #24292F">  ):</span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">|</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">        </span><span style="color: #953800">type</span><span style="color: #24292F">: </span><span style="color: #0A3069">'success'</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">        </span><span style="color: #953800">result</span><span style="color: #24292F">: ReturnType</span><span style="color: #CF222E">&lt;</span><span style="color: #0550AE">T</span><span style="color: #CF222E">&gt;</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">      &#125;</span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">|</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">        </span><span style="color: #953800">type</span><span style="color: #24292F">: </span><span style="color: #0A3069">'failure'</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">        </span><span style="color: #953800">error</span><span style="color: #24292F">: </span><span style="color: #0550AE">Error</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">      &#125; </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">    </span><span style="color: #CF222E">try</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">      </span><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">result</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #8250DF">func</span><span style="color: #24292F">(</span><span style="color: #CF222E">...</span><span style="color: #24292F">args);</span></div><div class='line'><span style="color: #24292F">      </span><span style="color: #CF222E">return</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">        type: </span><span style="color: #0A3069">'success'</span><span style="color: #24292F">,</span></div><div class='line'><span style="color: #24292F">        result,</span></div><div class='line'><span style="color: #24292F">      &#125;;</span></div><div class='line'><span style="color: #24292F">    &#125; </span><span style="color: #CF222E">catch</span><span style="color: #24292F"> (e) &#123;</span></div><div class='line'><span style="color: #24292F">      </span><span style="color: #CF222E">return</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #24292F">        type: </span><span style="color: #0A3069">'failure'</span><span style="color: #24292F">,</span></div><div class='line'><span style="color: #24292F">        error: e </span><span style="color: #CF222E">as</span><span style="color: #24292F"> </span><span style="color: #953800">Error</span><span style="color: #24292F">,</span></div><div class='line'><span style="color: #24292F">      &#125;;</span></div><div class='line'><span style="color: #24292F">    &#125;</span></div><div class='line'><span style="color: #24292F">  &#125;;</span></div><div class='line'></div><div class='line'><span style="color: #6E7781">// usage</span></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF">validateWidget</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> (</span><span style="color: #953800">foo</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800">Widget</span><span style="color: #24292F">) </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> &#123;</span><span style="color: #CF222E">if</span><span style="color: #24292F"> (foo.valid) </span><span style="color: #CF222E">return</span><span style="color: #24292F"> foo; </span><span style="color: #CF222E">throw</span><span style="color: #24292F"> </span><span style="color: #0A3069">"Invalid widget"</span><span style="color: #24292F">;&#125;</span></div><div class='line'></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">safeValidateWidget</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #8250DF">makeSafe</span><span style="color: #24292F">(validateWidget);</span></div><div class='line'></div><div class='line'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">widgetValidationResult</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #8250DF">safeValidateWidget</span><span style="color: #24292F">(widget);</span></div><div class='line'><span style="color: #CF222E">if</span><span style="color: #24292F">(widgetValidationResult.type </span><span style="color: #CF222E">!==</span><span style="color: #24292F"> success)</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0A3069">"failed to validate widget"</span></div><div class='line'><span style="color: #24292F">widgetValidationResult.result.</span><span style="color: #8250DF">useWidget</span><span style="color: #24292F">();</span></div></code></div></pre>`,Ks,es,Tl="This approach is great because the <code>result</code> on <code>widgetValidationResult</code> will be correctly typed as the return type of <code>validateWidget</code>. Similarly, trying to call <code>validateWidget</code> with a value that doesn’t satisfy <code>Widget</code> will result in a Typescript error.",He,A,_l='<a aria-hidden="true" tabindex="-1" href="#narrowing-return-types-in-generics"><span class="icon icon-link"></span></a><a href="#narrowing-return-types-in-generics" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Narrowing return types in generics',Le,ls,Al="TypeScript’s type system being built on set theory has some limitations when it comes to narrowing.",Pe,k,kl='<a aria-hidden="true" tabindex="-1" href="#function-overloads"><span class="icon icon-link"></span></a><a href="#function-overloads" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Function overloads',je,as,Ml="Function overloads are a bit weird in TypeScript. This is an artifact of TypeScript being compatible with JavaScript, which doesn’t support function overloading. To work around this, TypeScript allows function overloading in a very specific way:",$e,ns,Hl="<li>All of the overload signatures must be declared using the <code>function</code> keyword (they can’t be arrow functions)</li> <li>The overload signatures must be declared next to each other in code, with nothing else in between them</li> <li>None of the overload signatures can have an implementation</li> <li>An overload implementation must be written after the overload signatures. It must be compatible with all of the overload signatures declared before it.</li>",Se,ts,Ll="To simplify, here’s an example of what a valid function overload might look like:",De,Us,ca=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #6E7781">// The overload signatures are public interfaces that can be used to invoke the function</span></div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">number</span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">number</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> &#123;</span><span style="color: #953800">user</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">&#125;)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">boolean</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #6E7781">// The implementation is a *private* interface which is not exposed to users</span></div><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">any</span><span style="color: #24292F">)&#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">(</span><span style="color: #CF222E">typeof</span><span style="color: #24292F"> input </span><span style="color: #CF222E">===</span><span style="color: #24292F"> </span><span style="color: #0A3069">"string"</span><span style="color: #24292F">) </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0A3069">"string"</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">(</span><span style="color: #CF222E">typeof</span><span style="color: #24292F"> input </span><span style="color: #CF222E">===</span><span style="color: #24292F"> </span><span style="color: #0A3069">"number"</span><span style="color: #24292F">) </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0550AE">123</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">(</span><span style="color: #CF222E">typeof</span><span style="color: #24292F"> input </span><span style="color: #CF222E">===</span><span style="color: #24292F"> </span><span style="color: #0A3069">"object"</span><span style="color: #24292F"> </span><span style="color: #CF222E">&&</span><span style="color: #24292F"> </span><span style="color: #0550AE">Object</span><span style="color: #24292F">.</span><span style="color: #8250DF">hasOwn</span><span style="color: #24292F">(input, </span><span style="color: #0A3069">"user"</span><span style="color: #24292F">)) </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0550AE">true</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">&#125;</span></div></code></div></pre>`,Vs,os,Pl="Unfortunately this example has an issue. While the compiler correctly infers return types, it thinks that the implementation isn’t compatible with the declarations. There are 2 approaches to fix this:",qe,ps,jl="<li>Provide a type annotation for the implementation’s return type</li> <li>Add type annotations to the values being returned within the implementation.</li>",Oe,rs,$l="Option 1 looks like this:",Re,Ws,ya=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">any</span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #0550AE">number</span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #0550AE">boolean</span><span style="color: #24292F"> &#123;</span></div><div class='line'><span style="color: #6E7781">// ...</span></div><div class='line'><span style="color: #24292F">&#125;</span></div></code></div></pre>`,zs,is,Sl="The downside of this approach is that typescript can’t provide useful hints within the function about valid values, especially for narrower types.",Ie,cs,Dl="The alternative is a slightly more verbose approach of specifying types for each return value. In many cases this will probably be fine as real functions tend to be more complex than demos. There are two ways of doing this. My preference is to declare the variables ahead of the return statement and use a type annotation:",Ke,Ns,da=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">any</span><span style="color: #24292F">) &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">(</span><span style="color: #CF222E">typeof</span><span style="color: #24292F"> input </span><span style="color: #CF222E">===</span><span style="color: #24292F"> </span><span style="color: #0A3069">"string"</span><span style="color: #24292F">) &#123;</span></div><div class='line'><span style="color: #24292F">		</span><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #0550AE">s</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> </span><span style="color: #0A3069">"string"</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">		</span><span style="color: #CF222E">return</span><span style="color: #24292F"> s;</span></div><div class='line'><span style="color: #24292F">	&#125;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #6E7781">// other implementations...</span></div><div class='line'><span style="color: #24292F">&#125;</span></div></code></div></pre>`,Bs,ys,ql="Alternatively, the annotations can be provided inline using <code>as</code>:",Ue,Js,Fa=`<pre class="shiki" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF">foo</span><span style="color: #24292F">(</span><span style="color: #953800">input</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">any</span><span style="color: #24292F">) &#123;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">(</span><span style="color: #CF222E">typeof</span><span style="color: #24292F"> input </span><span style="color: #CF222E">===</span><span style="color: #24292F"> </span><span style="color: #0A3069">"string"</span><span style="color: #24292F">) </span><span style="color: #CF222E">return</span><span style="color: #24292F"> </span><span style="color: #0A3069">"string"</span><span style="color: #24292F"> </span><span style="color: #CF222E">as</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">;</span></div><div class='line'><span style="color: #24292F">	</span><span style="color: #6E7781">// other implementations...</span></div><div class='line'><span style="color: #24292F">&#125;</span></div></code></div></pre>`,Zs,ds,Ol="This is more concise, but in my opinion using <code>as</code> is a bit of a code smell vs using an explicit type annotation.",Ve,Fs,Rl="Overall, TypeScript function overloads seem to only be worth it if the return type changes based on the input. If the return type is always the same, I find it cleaner to write a single function signature where the parameter(s) are a union of the possible input values and there is a single return type.",We;return g=new Ea({props:{$$slots:{default:[ga]},$$scope:{ctx:C}}}),{c(){i=o("p"),i.textContent=h,u=n(),d=o("ul"),d.innerHTML=c,y=n(),f=o("h2"),f.innerHTML=Ne,Gs=n(),vs=new F(!1),us=n(),M=o("p"),M.innerHTML=Be,Xs=n(),E=o("h3"),E.innerHTML=Je,Ys=n(),H=o("p"),H.textContent=Ze,Qs=n(),Wl(g.$$.fragment),se=n(),L=o("p"),L.innerHTML=Ge,ee=n(),P=o("p"),P.innerHTML=Xe,le=n(),fs=new F(!1),hs=n(),j=o("p"),j.textContent=Ye,ae=n(),$=o("ol"),$.innerHTML=Qe,ne=n(),S=o("p"),S.textContent=sl,te=n(),b=o("h2"),b.innerHTML=el,oe=n(),D=o("p"),D.textContent=ll,pe=n(),q=o("p"),q.textContent=al,re=n(),ms=new F(!1),Cs=n(),O=o("p"),O.innerHTML=nl,ie=n(),Es=new F(!1),gs=n(),R=o("p"),R.textContent=tl,ce=n(),bs=new F(!1),ws=n(),I=o("p"),I.textContent=ol,ye=n(),K=o("p"),K.innerHTML=pl,de=n(),xs=new F(!1),Ts=n(),U=o("p"),U.textContent=rl,Fe=n(),V=o("p"),V.textContent=il,ve=n(),_s=new F(!1),As=n(),W=o("p"),W.innerHTML=cl,ue=n(),ks=new F(!1),Ms=n(),z=o("p"),z.innerHTML=yl,fe=n(),Hs=new F(!1),Ls=n(),w=o("h2"),w.innerHTML=dl,he=n(),N=o("p"),N.innerHTML=Fl,me=n(),Ps=new F(!1),js=n(),B=o("p"),B.innerHTML=vl,Ce=n(),x=o("h3"),x.innerHTML=ul,Ee=n(),J=o("p"),J.innerHTML=fl,ge=n(),$s=new F(!1),Ss=n(),Z=o("p"),Z.innerHTML=hl,be=n(),T=o("h3"),T.innerHTML=ml,we=n(),G=o("p"),G.textContent=Cl,xe=n(),Ds=new F(!1),qs=n(),X=o("p"),X.innerHTML=El,Te=n(),Os=new F(!1),Rs=n(),Y=o("p"),Y.innerHTML=gl,_e=n(),_=o("h3"),_.innerHTML=bl,Ae=n(),Q=o("p"),Q.innerHTML=wl,ke=n(),ss=o("p"),ss.innerHTML=xl,Me=n(),Is=new F(!1),Ks=n(),es=o("p"),es.innerHTML=Tl,He=n(),A=o("h2"),A.innerHTML=_l,Le=n(),ls=o("p"),ls.textContent=Al,Pe=n(),k=o("h2"),k.innerHTML=kl,je=n(),as=o("p"),as.textContent=Ml,$e=n(),ns=o("ol"),ns.innerHTML=Hl,Se=n(),ts=o("p"),ts.textContent=Ll,De=n(),Us=new F(!1),Vs=n(),os=o("p"),os.textContent=Pl,qe=n(),ps=o("ol"),ps.innerHTML=jl,Oe=n(),rs=o("p"),rs.textContent=$l,Re=n(),Ws=new F(!1),zs=n(),is=o("p"),is.textContent=Sl,Ie=n(),cs=o("p"),cs.textContent=Dl,Ke=n(),Ns=new F(!1),Bs=n(),ys=o("p"),ys.innerHTML=ql,Ue=n(),Js=new F(!1),Zs=n(),ds=o("p"),ds.innerHTML=Ol,Ve=n(),Fs=o("p"),Fs.textContent=Rl,this.h()},l(s){i=p(s,"P",{["data-svelte-h"]:!0}),r(i)!=="svelte-13yv32v"&&(i.textContent=h),u=t(s),d=p(s,"UL",{["data-svelte-h"]:!0}),r(d)!=="svelte-1robfh1"&&(d.innerHTML=c),y=t(s),f=p(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(f)!=="svelte-1bjq58w"&&(f.innerHTML=Ne),Gs=t(s),vs=v(s,!1),us=t(s),M=p(s,"P",{["data-svelte-h"]:!0}),r(M)!=="svelte-7s3kk6"&&(M.innerHTML=Be),Xs=t(s),E=p(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(E)!=="svelte-3x1fn5"&&(E.innerHTML=Je),Ys=t(s),H=p(s,"P",{["data-svelte-h"]:!0}),r(H)!=="svelte-41rp46"&&(H.textContent=Ze),Qs=t(s),zl(g.$$.fragment,s),se=t(s),L=p(s,"P",{["data-svelte-h"]:!0}),r(L)!=="svelte-37k5pq"&&(L.innerHTML=Ge),ee=t(s),P=p(s,"P",{["data-svelte-h"]:!0}),r(P)!=="svelte-1dudyaw"&&(P.innerHTML=Xe),le=t(s),fs=v(s,!1),hs=t(s),j=p(s,"P",{["data-svelte-h"]:!0}),r(j)!=="svelte-16g9g8j"&&(j.textContent=Ye),ae=t(s),$=p(s,"OL",{["data-svelte-h"]:!0}),r($)!=="svelte-36qxan"&&($.innerHTML=Qe),ne=t(s),S=p(s,"P",{["data-svelte-h"]:!0}),r(S)!=="svelte-1tb9uft"&&(S.textContent=sl),te=t(s),b=p(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(b)!=="svelte-p9ky9"&&(b.innerHTML=el),oe=t(s),D=p(s,"P",{["data-svelte-h"]:!0}),r(D)!=="svelte-n855ta"&&(D.textContent=ll),pe=t(s),q=p(s,"P",{["data-svelte-h"]:!0}),r(q)!=="svelte-18ivlae"&&(q.textContent=al),re=t(s),ms=v(s,!1),Cs=t(s),O=p(s,"P",{["data-svelte-h"]:!0}),r(O)!=="svelte-9va59z"&&(O.innerHTML=nl),ie=t(s),Es=v(s,!1),gs=t(s),R=p(s,"P",{["data-svelte-h"]:!0}),r(R)!=="svelte-1pxlm1t"&&(R.textContent=tl),ce=t(s),bs=v(s,!1),ws=t(s),I=p(s,"P",{["data-svelte-h"]:!0}),r(I)!=="svelte-r4n0gt"&&(I.textContent=ol),ye=t(s),K=p(s,"P",{["data-svelte-h"]:!0}),r(K)!=="svelte-1ecmp2i"&&(K.innerHTML=pl),de=t(s),xs=v(s,!1),Ts=t(s),U=p(s,"P",{["data-svelte-h"]:!0}),r(U)!=="svelte-16pr15g"&&(U.textContent=rl),Fe=t(s),V=p(s,"P",{["data-svelte-h"]:!0}),r(V)!=="svelte-1ny8t6i"&&(V.textContent=il),ve=t(s),_s=v(s,!1),As=t(s),W=p(s,"P",{["data-svelte-h"]:!0}),r(W)!=="svelte-1q2rw8q"&&(W.innerHTML=cl),ue=t(s),ks=v(s,!1),Ms=t(s),z=p(s,"P",{["data-svelte-h"]:!0}),r(z)!=="svelte-hi0wbm"&&(z.innerHTML=yl),fe=t(s),Hs=v(s,!1),Ls=t(s),w=p(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(w)!=="svelte-8dlcq2"&&(w.innerHTML=dl),he=t(s),N=p(s,"P",{["data-svelte-h"]:!0}),r(N)!=="svelte-1bnmghd"&&(N.innerHTML=Fl),me=t(s),Ps=v(s,!1),js=t(s),B=p(s,"P",{["data-svelte-h"]:!0}),r(B)!=="svelte-hflq5q"&&(B.innerHTML=vl),Ce=t(s),x=p(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(x)!=="svelte-149gtpz"&&(x.innerHTML=ul),Ee=t(s),J=p(s,"P",{["data-svelte-h"]:!0}),r(J)!=="svelte-qem5kq"&&(J.innerHTML=fl),ge=t(s),$s=v(s,!1),Ss=t(s),Z=p(s,"P",{["data-svelte-h"]:!0}),r(Z)!=="svelte-1gmz3yf"&&(Z.innerHTML=hl),be=t(s),T=p(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(T)!=="svelte-18w9tu6"&&(T.innerHTML=ml),we=t(s),G=p(s,"P",{["data-svelte-h"]:!0}),r(G)!=="svelte-czyjeh"&&(G.textContent=Cl),xe=t(s),Ds=v(s,!1),qs=t(s),X=p(s,"P",{["data-svelte-h"]:!0}),r(X)!=="svelte-1gwulla"&&(X.innerHTML=El),Te=t(s),Os=v(s,!1),Rs=t(s),Y=p(s,"P",{["data-svelte-h"]:!0}),r(Y)!=="svelte-rt747z"&&(Y.innerHTML=gl),_e=t(s),_=p(s,"H3",{id:!0,["data-svelte-h"]:!0}),r(_)!=="svelte-jle4qh"&&(_.innerHTML=bl),Ae=t(s),Q=p(s,"P",{["data-svelte-h"]:!0}),r(Q)!=="svelte-quktlt"&&(Q.innerHTML=wl),ke=t(s),ss=p(s,"P",{["data-svelte-h"]:!0}),r(ss)!=="svelte-1ifu3ok"&&(ss.innerHTML=xl),Me=t(s),Is=v(s,!1),Ks=t(s),es=p(s,"P",{["data-svelte-h"]:!0}),r(es)!=="svelte-c0sez1"&&(es.innerHTML=Tl),He=t(s),A=p(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(A)!=="svelte-1meljz2"&&(A.innerHTML=_l),Le=t(s),ls=p(s,"P",{["data-svelte-h"]:!0}),r(ls)!=="svelte-qbv8s6"&&(ls.textContent=Al),Pe=t(s),k=p(s,"H2",{id:!0,["data-svelte-h"]:!0}),r(k)!=="svelte-m2geuf"&&(k.innerHTML=kl),je=t(s),as=p(s,"P",{["data-svelte-h"]:!0}),r(as)!=="svelte-19o0w4g"&&(as.textContent=Ml),$e=t(s),ns=p(s,"OL",{["data-svelte-h"]:!0}),r(ns)!=="svelte-17qic5j"&&(ns.innerHTML=Hl),Se=t(s),ts=p(s,"P",{["data-svelte-h"]:!0}),r(ts)!=="svelte-1lmw9tq"&&(ts.textContent=Ll),De=t(s),Us=v(s,!1),Vs=t(s),os=p(s,"P",{["data-svelte-h"]:!0}),r(os)!=="svelte-sxw1hz"&&(os.textContent=Pl),qe=t(s),ps=p(s,"OL",{["data-svelte-h"]:!0}),r(ps)!=="svelte-kf1qs0"&&(ps.innerHTML=jl),Oe=t(s),rs=p(s,"P",{["data-svelte-h"]:!0}),r(rs)!=="svelte-khn6hr"&&(rs.textContent=$l),Re=t(s),Ws=v(s,!1),zs=t(s),is=p(s,"P",{["data-svelte-h"]:!0}),r(is)!=="svelte-ku59px"&&(is.textContent=Sl),Ie=t(s),cs=p(s,"P",{["data-svelte-h"]:!0}),r(cs)!=="svelte-9ksov3"&&(cs.textContent=Dl),Ke=t(s),Ns=v(s,!1),Bs=t(s),ys=p(s,"P",{["data-svelte-h"]:!0}),r(ys)!=="svelte-139aje3"&&(ys.innerHTML=ql),Ue=t(s),Js=v(s,!1),Zs=t(s),ds=p(s,"P",{["data-svelte-h"]:!0}),r(ds)!=="svelte-14mt0g9"&&(ds.innerHTML=Ol),Ve=t(s),Fs=p(s,"P",{["data-svelte-h"]:!0}),r(Fs)!=="svelte-1fs9oi"&&(Fs.textContent=Rl),this.h()},h(){m(f,"id","splitting-a-string-literal-using-a-delimeter"),vs.a=us,m(E,"id","extracting-route-parameters-from-a-route"),fs.a=hs,m(b,"id","typescript-momu-pattern---mapped-object-mapped-union"),ms.a=Cs,Es.a=gs,bs.a=ws,xs.a=Ts,_s.a=As,ks.a=Ms,Hs.a=Ls,m(w,"id","use-generics-at-the-lowest-level-possible"),Ps.a=js,m(x,"id","example-get-a-typed-array-of-object-keys"),$s.a=Ss,m(T,"id","example-infer-the-literal-types-of-an-array-rather-than-the-basic-type"),Ds.a=qs,Os.a=Rs,m(_,"id","example-wrap-a-function-and-safely-get-the-result-or-thrown-error"),Is.a=Ks,m(A,"id","narrowing-return-types-in-generics"),m(k,"id","function-overloads"),Us.a=Vs,Ws.a=zs,Ns.a=Bs,Js.a=Zs},m(s,e){l(s,i,e),l(s,u,e),l(s,d,e),l(s,y,e),l(s,f,e),l(s,Gs,e),vs.m(Gl,s,e),l(s,us,e),l(s,M,e),l(s,Xs,e),l(s,E,e),l(s,Ys,e),l(s,H,e),l(s,Qs,e),Nl(g,s,e),l(s,se,e),l(s,L,e),l(s,ee,e),l(s,P,e),l(s,le,e),fs.m(Xl,s,e),l(s,hs,e),l(s,j,e),l(s,ae,e),l(s,$,e),l(s,ne,e),l(s,S,e),l(s,te,e),l(s,b,e),l(s,oe,e),l(s,D,e),l(s,pe,e),l(s,q,e),l(s,re,e),ms.m(Yl,s,e),l(s,Cs,e),l(s,O,e),l(s,ie,e),Es.m(Ql,s,e),l(s,gs,e),l(s,R,e),l(s,ce,e),bs.m(sa,s,e),l(s,ws,e),l(s,I,e),l(s,ye,e),l(s,K,e),l(s,de,e),xs.m(ea,s,e),l(s,Ts,e),l(s,U,e),l(s,Fe,e),l(s,V,e),l(s,ve,e),_s.m(la,s,e),l(s,As,e),l(s,W,e),l(s,ue,e),ks.m(aa,s,e),l(s,Ms,e),l(s,z,e),l(s,fe,e),Hs.m(na,s,e),l(s,Ls,e),l(s,w,e),l(s,he,e),l(s,N,e),l(s,me,e),Ps.m(ta,s,e),l(s,js,e),l(s,B,e),l(s,Ce,e),l(s,x,e),l(s,Ee,e),l(s,J,e),l(s,ge,e),$s.m(oa,s,e),l(s,Ss,e),l(s,Z,e),l(s,be,e),l(s,T,e),l(s,we,e),l(s,G,e),l(s,xe,e),Ds.m(pa,s,e),l(s,qs,e),l(s,X,e),l(s,Te,e),Os.m(ra,s,e),l(s,Rs,e),l(s,Y,e),l(s,_e,e),l(s,_,e),l(s,Ae,e),l(s,Q,e),l(s,ke,e),l(s,ss,e),l(s,Me,e),Is.m(ia,s,e),l(s,Ks,e),l(s,es,e),l(s,He,e),l(s,A,e),l(s,Le,e),l(s,ls,e),l(s,Pe,e),l(s,k,e),l(s,je,e),l(s,as,e),l(s,$e,e),l(s,ns,e),l(s,Se,e),l(s,ts,e),l(s,De,e),Us.m(ca,s,e),l(s,Vs,e),l(s,os,e),l(s,qe,e),l(s,ps,e),l(s,Oe,e),l(s,rs,e),l(s,Re,e),Ws.m(ya,s,e),l(s,zs,e),l(s,is,e),l(s,Ie,e),l(s,cs,e),l(s,Ke,e),Ns.m(da,s,e),l(s,Bs,e),l(s,ys,e),l(s,Ue,e),Js.m(Fa,s,e),l(s,Zs,e),l(s,ds,e),l(s,Ve,e),l(s,Fs,e),We=!0},p(s,e){const Il={};e&2&&(Il.$$scope={dirty:e,ctx:s}),g.$set(Il)},i(s){We||(Bl(g.$$.fragment,s),We=!0)},o(s){Jl(g.$$.fragment,s),We=!1},d(s){s&&(a(i),a(u),a(d),a(y),a(f),a(Gs),vs.d(),a(us),a(M),a(Xs),a(E),a(Ys),a(H),a(Qs),a(se),a(L),a(ee),a(P),a(le),fs.d(),a(hs),a(j),a(ae),a($),a(ne),a(S),a(te),a(b),a(oe),a(D),a(pe),a(q),a(re),ms.d(),a(Cs),a(O),a(ie),Es.d(),a(gs),a(R),a(ce),bs.d(),a(ws),a(I),a(ye),a(K),a(de),xs.d(),a(Ts),a(U),a(Fe),a(V),a(ve),_s.d(),a(As),a(W),a(ue),ks.d(),a(Ms),a(z),a(fe),Hs.d(),a(Ls),a(w),a(he),a(N),a(me),Ps.d(),a(js),a(B),a(Ce),a(x),a(Ee),a(J),a(ge),$s.d(),a(Ss),a(Z),a(be),a(T),a(we),a(G),a(xe),Ds.d(),a(qs),a(X),a(Te),Os.d(),a(Rs),a(Y),a(_e),a(_),a(Ae),a(Q),a(ke),a(ss),a(Me),Is.d(),a(Ks),a(es),a(He),a(A),a(Le),a(ls),a(Pe),a(k),a(je),a(as),a($e),a(ns),a(Se),a(ts),a(De),Us.d(),a(Vs),a(os),a(qe),a(ps),a(Oe),a(rs),a(Re),Ws.d(),a(zs),a(is),a(Ie),a(cs),a(Ke),Ns.d(),a(Bs),a(ys),a(Ue),Js.d(),a(Zs),a(ds),a(Ve),a(Fs)),Zl(g,s)}}}function wa(C){let i,h;const u=[C[0],Vl];let d={$$slots:{default:[ba]},$$scope:{ctx:C}};for(let c=0;c<u.length;c+=1)d=ze(d,u[c]);return i=new Ca({props:d}),{c(){Wl(i.$$.fragment)},l(c){zl(i.$$.fragment,c)},m(c,y){Nl(i,c,y),h=!0},p(c,[y]){const f=y&1?ma(u,[y&1&&Ul(c[0]),y&0&&Ul(Vl)]):{};y&2&&(f.$$scope={dirty:y,ctx:c}),i.$set(f)},i(c){h||(Bl(i.$$.fragment,c),h=!0)},o(c){Jl(i.$$.fragment,c),h=!1},d(c){Zl(i,c)}}}const Vl={title:"Total Typescript notes",description:"I've learned a lot from this course, and use this note to record bits I want to remember and riff on some of my observations.",slug:"total-typescript-notes",publish:!0,lastmod:"2024-03-13T00:00:00.000Z",date:"2023-11-23T00:00:00.000Z",aliases:null,tags:["status/budding"],timeToRead:9,internalLinks:["/notes/Type%20branding%20removes%20structural%20type%20compatibility/"],flashcards:[]};function xa(C,i,h){return C.$$set=u=>{h(0,i=ze(ze({},i),Kl(u)))},i=Kl(i),[i]}class Ha extends fa{constructor(i){super(),ha(this,i,xa,wa,va,{})}}export{Ha as default,Vl as metadata};
