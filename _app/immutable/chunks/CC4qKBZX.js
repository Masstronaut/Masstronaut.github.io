import{t as n,a as o}from"./Bj2ZHtgv.js";import"./DBHxkW5N.js";import{R as l}from"./fxLts69-.js";import{l as p,s as d}from"./BMf7CqPI.js";import{M as u}from"./G_a7bHiy.js";const e={title:"The learning process",description:"A repeating cycle of receiving input, processing it to create output, evaluating that output, and evaluating results to improve future processing.",slug:"notes/learning-process",publish:!0,lastmod:"2021-07-27T00:00:00.000Z",date:"2021-07-27T00:00:00.000Z",aliases:["The learning process"],tags:["status/evergreen","topic/learning","taxonomy/idea"],readTime:2,internalLinks:["/notes/world-recursive"],flashcards:[]},{title:v,description:b,slug:x,publish:T,lastmod:y,date:$,aliases:_,tags:A,readTime:D,internalLinks:L,flashcards:I}=e;var c=n('<p>Iâ€™ve observed that the learning process has 4 generalized steps:</p> <ol><li>Inputs are received and processed.</li> <li>The input processing system runs to produce an output.</li> <li>The output is evaluated.</li> <li>Evaluation results are incorporated back into the input processing system.</li></ol> <h2 id="examples-of-the-learning-process"><a aria-hidden="true" tabindex="-1" href="#examples-of-the-learning-process"><span class="icon icon-link"></span></a><a href="#examples-of-the-learning-process" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Examples of the learning process</h2> <p>The learning process seems to be common in domains rich with knowledge workers. Tech being a prominent example, has two extremely popular implementations of the learning process:</p> <h2 id="agile-sprints"><a aria-hidden="true" tabindex="-1" href="#agile-sprints"><span class="icon icon-link"></span></a><a href="#agile-sprints" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a><em>Agile sprint</em>s</h2> <ol><li>During sprint planning, feature requests and bugs are received as inputs. These inputs get processed into <em>User stories</em> which have valuable metadata like estimated completion time and priority. The team then decides which tasks will produce the best output at the end of the sprint.</li> <li>During the sprint, the team does the work outlined in the user stories they selected in sprint planning (this is the input being processed to produce an output).</li> <li>At the sprint review, delivered work is evaluated against the <em>Definition of done</em> from the committed user stories.</li> <li>At the sprint retrospectives, the team uses the insights of how they did during the current sprint to figure out ways of refining their process for the next sprint.</li></ol> <h2 id="feed-forward-back-propagation-neural-networks"><a aria-hidden="true" tabindex="-1" href="#feed-forward-back-propagation-neural-networks"><span class="icon icon-link"></span></a><a href="#feed-forward-back-propagation-neural-networks" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Feed-forward <em>Back-propagation</em> <em>Neural networks</em></h2> <ol><li>Inputs values are provided to the input neurons</li> <li>The inputs are fed forward through the neural network to produce values at each output node</li> <li>The output is scored.</li> <li>Results from scoring the output are sent back through the neural network so connection weights can be tweaked to produce better results using Back-propagation.</li></ol> <p>Related: <a href="/notes/world-recursive">The world is recursive</a>.</p>',1);function R(t,s){const i=p(s,["children","$$slots","$$events","$$legacy"]);u(t,d(()=>i,e,{children:(a,h)=>{var r=c();l(16),o(a,r)},$$slots:{default:!0}}))}export{R as default,e as metadata};
