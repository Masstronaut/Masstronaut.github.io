import{s as N,C as w,N as U,f as c,a as k,I as Z,e as j,g as y,u as h,c as E,K as B,i as n,A as K,d as l}from"./scheduler.e9e6880c.js";import{S as O,i as W,b as X,d as Q,m as V,a as Y,t as ss,e as as}from"./index.ebf47752.js";import{g as es,a as q}from"./spread.8a54911c.js";import{M as ts}from"./MDSveXNoteLayout.534fe4cd.js";function ns(g){let a,d='Recently I was presenting a talk at SeattleJS on <a href="/notes/Branded%20Types/">Branded Types</a> using my blog post as the visual content. I wanted to do some live coding, so I decided to add TypeScript playground links to my code snippets.',p,i,e='Fun fact: it’s possible to <a href="https://www.typescriptlang.org/play/?#handbook-9" rel="nofollow">dynamically generate TypeScript playground links</a>!',o,r,P="The process is fairly simple:",F,u,I="<li>Use <code>lz-string</code> to base64 encode and zip the source code and URI encode the result (use <code>LZString.compressToEncodedURIComponent()</code>, an easy one-liner)</li> <li>Append the encoded string to a playground URL</li> <li>Put the link on the code block</li>",b,m,H="I love this solution because it generates an updated link every time I build my site. I’m guaranteed to have up-to-date playground links and don’t have to do anything after the initial setup. Awesome!",L,C,M='I followed <a href="https://www.typescriptlang.org/play/?#handbook-9" rel="nofollow">the TS playground docs</a> to write the code that generates TS playground links. I updated my code highlighter function to generate the TS playground links and add them to a <code>data-tsplay</code> attribute on the containing <code>&lt;pre&gt;</code> tag for each TS code block. Check it out:',S,_,G=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0" js filename="mdsvex.config.js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">async</span><span style="color:#D73A49;--shiki-dark:#569CD6"> function</span><span style="color:#6F42C1;--shiki-dark:#DCDCAA"> ShikiTwoslashHighlighter</span><span style="color:#24292E;--shiki-dark:#E6E6E6">(</span><span style="color:#E36209;--shiki-dark:#9CDCFE">code</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#E36209;--shiki-dark:#9CDCFE">lang</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, </span><span style="color:#E36209;--shiki-dark:#9CDCFE">meta</span><span style="color:#24292E;--shiki-dark:#E6E6E6">) &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">	let</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> tsPlaygroundLink</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#005CC5;--shiki-dark:#569CD6"> undefined</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">		if</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> (</span><span style="color:#24292E;--shiki-dark:#9CDCFE">lang</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> ===</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'ts'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">) &#123;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">			// Generate a TS Playground link</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">			tsPlaygroundLink</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#032F62;--shiki-dark:#CE9178"> &#96;https://typescriptlang.org/play/#code/</span><span style="color:#032F62;--shiki-dark:#569CD6">$&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				LZString</span><span style="color:#032F62;--shiki-dark:#D4D4D4">.</span><span style="color:#6F42C1;--shiki-dark:#DCDCAA">compressToEncodedURIComponent</span><span style="color:#032F62;--shiki-dark:#D4D4D4">(</span><span style="color:#24292E;--shiki-dark:#9CDCFE">code</span><span style="color:#032F62;--shiki-dark:#D4D4D4">)</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#569CD6">			&#125;</span><span style="color:#032F62;--shiki-dark:#CE9178">&#96;</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		&#125;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#569CD6">	const</span><span style="color:#005CC5;--shiki-dark:#9CDCFE"> html</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> =</span><span style="color:#D73A49;--shiki-dark:#C586C0"> await</span><span style="color:#6F42C1;--shiki-dark:#DCDCAA"> codeToHtml</span><span style="color:#24292E;--shiki-dark:#E6E6E6">(</span><span style="color:#24292E;--shiki-dark:#9CDCFE">code</span><span style="color:#24292E;--shiki-dark:#E6E6E6">, &#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">		transformers:</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> [</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">			// This custom transformer adds the data-tsplay attribute</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			&#123;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">				name:</span><span style="color:#032F62;--shiki-dark:#CE9178"> 'TSPlaygroundLinkInserter'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">,</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">				pre</span><span style="color:#24292E;--shiki-dark:#E6E6E6">(</span><span style="color:#E36209;--shiki-dark:#9CDCFE">el</span><span style="color:#24292E;--shiki-dark:#E6E6E6">) &#123;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C586C0">					if</span><span style="color:#24292E;--shiki-dark:#E6E6E6"> (</span><span style="color:#24292E;--shiki-dark:#9CDCFE">tsPlaygroundLink</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> !==</span><span style="color:#005CC5;--shiki-dark:#569CD6"> undefined</span><span style="color:#24292E;--shiki-dark:#E6E6E6">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#9CDCFE">						el</span><span style="color:#24292E;--shiki-dark:#E6E6E6">.</span><span style="color:#24292E;--shiki-dark:#9CDCFE">properties</span><span style="color:#24292E;--shiki-dark:#E6E6E6">[</span><span style="color:#032F62;--shiki-dark:#CE9178">'data-tsplay'</span><span style="color:#24292E;--shiki-dark:#E6E6E6">] </span><span style="color:#D73A49;--shiki-dark:#D4D4D4">=</span><span style="color:#24292E;--shiki-dark:#9CDCFE"> tsPlaygroundLink</span><span style="color:#24292E;--shiki-dark:#E6E6E6">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">				&#125;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">			&#125;,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">			// other transformers...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">		],</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A9955">		// other config options...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	&#125;);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E6E6E6">	</span></span></code></pre>`,T,v,J=`<pre class="code-copy-target hidden">async function ShikiTwoslashHighlighter(code, lang, meta) &#123;
	let tsPlaygroundLink = undefined;
		if (lang === 'ts') &#123;
			// Generate a TS Playground link
			tsPlaygroundLink = &#96;https://typescriptlang.org/play/#code/$&#123;
				LZString.compressToEncodedURIComponent(code)
			&#125;&#96;;
		&#125;
	const html = await codeToHtml(code, &#123;
		transformers: [
			// This custom transformer adds the data-tsplay attribute
			&#123;
				name: 'TSPlaygroundLinkInserter',
				pre(el) &#123;
					if (tsPlaygroundLink !== undefined)
						el.properties['data-tsplay'] = tsPlaygroundLink;
				&#125;
			&#125;,
			// other transformers...
		],
		// other config options...
	&#125;);
	</pre>`,A,D,$='With that I have playground links available in my output HTML. The last step I have to <a href="/notes/Make%20example%20code%20interactive/">Make example code interactive</a> on my blog is to <a href="/notes/Add%20a%20demo%20link%20to%20TypeScript%20code%20blocks/">Add a demo link to TypeScript code blocks</a>.',x,f,R="I’m so glad I ended up doing this. Being able to quickly pop open a live editor to make changes and show runtime values made my Seattle JS talk much better!";return{c(){a=c("p"),a.innerHTML=d,p=k(),i=c("p"),i.innerHTML=e,o=k(),r=c("p"),r.textContent=P,F=k(),u=c("ol"),u.innerHTML=I,b=k(),m=c("p"),m.textContent=H,L=k(),C=c("p"),C.innerHTML=M,S=k(),_=new Z(!1),T=j(),v=new Z(!1),A=k(),D=c("p"),D.innerHTML=$,x=k(),f=c("p"),f.textContent=R,this.h()},l(s){a=y(s,"P",{["data-svelte-h"]:!0}),h(a)!=="svelte-7lp34h"&&(a.innerHTML=d),p=E(s),i=y(s,"P",{["data-svelte-h"]:!0}),h(i)!=="svelte-8sm578"&&(i.innerHTML=e),o=E(s),r=y(s,"P",{["data-svelte-h"]:!0}),h(r)!=="svelte-f06i2j"&&(r.textContent=P),F=E(s),u=y(s,"OL",{["data-svelte-h"]:!0}),h(u)!=="svelte-19piibu"&&(u.innerHTML=I),b=E(s),m=y(s,"P",{["data-svelte-h"]:!0}),h(m)!=="svelte-4sy04y"&&(m.textContent=H),L=E(s),C=y(s,"P",{["data-svelte-h"]:!0}),h(C)!=="svelte-rtpeqb"&&(C.innerHTML=M),S=E(s),_=B(s,!1),T=j(),v=B(s,!1),A=E(s),D=y(s,"P",{["data-svelte-h"]:!0}),h(D)!=="svelte-vcousv"&&(D.innerHTML=$),x=E(s),f=y(s,"P",{["data-svelte-h"]:!0}),h(f)!=="svelte-1abnvd7"&&(f.textContent=R),this.h()},h(){_.a=T,v.a=A},m(s,t){n(s,a,t),n(s,p,t),n(s,i,t),n(s,o,t),n(s,r,t),n(s,F,t),n(s,u,t),n(s,b,t),n(s,m,t),n(s,L,t),n(s,C,t),n(s,S,t),_.m(G,s,t),n(s,T,t),v.m(J,s,t),n(s,A,t),n(s,D,t),n(s,x,t),n(s,f,t)},p:K,d(s){s&&(l(a),l(p),l(i),l(o),l(r),l(F),l(u),l(b),l(m),l(L),l(C),l(S),l(T),_.d(),v.d(),l(A),l(D),l(x),l(f))}}}function ls(g){let a,d;const p=[g[0],z];let i={$$slots:{default:[ns]},$$scope:{ctx:g}};for(let e=0;e<p.length;e+=1)i=w(i,p[e]);return a=new ts({props:i}),{c(){X(a.$$.fragment)},l(e){Q(a.$$.fragment,e)},m(e,o){V(a,e,o),d=!0},p(e,[o]){const r=o&1?es(p,[o&1&&q(e[0]),o&0&&q(z)]):{};o&2&&(r.$$scope={dirty:o,ctx:e}),a.$set(r)},i(e){d||(Y(a.$$.fragment,e),d=!0)},o(e){ss(a.$$.fragment,e),d=!1},d(e){as(a,e)}}}const z={title:"Dynamically generate TypeScript Playground links",description:"TypeScript playground has a URL param to specify the code content. This makes it possible to always have up-to-date playground links for example code!",slug:"dynamic-ts-playground-links",publish:!0,lastmod:"2024-05-11T00:00:00.000Z",date:"2024-05-09T00:00:00.000Z",aliases:null,tags:["status/budding"],timeToRead:2,internalLinks:["/notes/Branded%20Types/","/notes/Make%20example%20code%20interactive/","/notes/Add%20a%20demo%20link%20to%20TypeScript%20code%20blocks/"],flashcards:[]};function os(g,a,d){return g.$$set=p=>{d(0,a=w(w({},a),U(p)))},a=U(a),[a]}class cs extends O{constructor(a){super(),W(this,a,os,ls,N,{})}}export{cs as default,z as metadata};
