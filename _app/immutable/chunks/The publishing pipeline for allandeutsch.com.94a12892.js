import{s as vt,C as Q,a5 as ct,f as o,a as p,g as s,u as r,c as u,j as E,i,A as gt,d as n}from"./scheduler.7131e7f1.js";import{S as yt,i as wt,b as xt,d as _t,m as kt,a as Tt,t as Ct,e as Ht}from"./index.9e889c2d.js";import{g as Lt,a as ft}from"./spread.8a54911c.js";import{M as Mt}from"./MDSveXNoteLayout.6e9dbd3e.js";function It(O){let l,f="Like any good PM, I opted to start from the ideal user experience. This was unusually easy since I am the only user; talk about putting the <em>personal</em> in personal computing!",m,h,a='My ideal workflow for publishing is to author my notes in <a href="https://obsidian.md" rel="nofollow">Obsidian</a> on any device and control publishing them to my website using a frontmatter property in each note. Step by step, this looks something like:',d,c,U="<li>I edit my notes locally on any device of my choice using Obsidian</li> <li>Sync notes across devices using automatic git backups</li> <li>I can add <code>publish: true</code> to any note’s frontmatter to <strong>opt-in</strong> to publishing the note (default to private)</li> <li>Git commits to my private notes repo triggers an automated workflow to build &amp; deploy notes opted-in to publishing</li>",q,b,V='<a aria-hidden="true" tabindex="-1" href="#structuring-the-build-pipeline"><span class="icon icon-link"></span></a><a href="#structuring-the-build-pipeline" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Structuring the build pipeline',A,y,Y='Because I want my notes to be private by default, they exist in their own private git repo. The SvelteKit code for this site is private, though I hope to open-source it one day. That leaves the site deployment, which is hosted using my GitHub account’s <a href="https://github.com/Masstronaut/Masstronaut.github.io" rel="nofollow">GitHub Pages repo</a> and pushed to automatically by my GitHub Actions workflow.',j,w,tt="Here’s an overview of what happens in the CI workflow:",$,x,et='<li>Commits to either the private notes or private site code repos trigger a build</li> <li>The build action pulls the private notes and processes them for publishing:<ol><li>A python script deletes all notes not opted-in for publishing</li> <li>The remaining notes are run through <a href="https://github.com/zoni/obsidian-export" rel="nofollow">obsidian-export</a> to convert them from Obsidian markdown to <a href="https://commonmark.org/" rel="nofollow">Commonmark</a></li></ol></li> <li>The site’s SvelteKit code is pulled from another repo</li> <li>The processed notes are dumped into a <code>content</code> folder</li> <li>The SvelteKit site is built using the <a href="https://www.npmjs.com/package/@sveltejs/adapter-static" rel="nofollow">static adapter</a></li> <li>The completed build is pushed to my GitHub Pages repo</li>',G,_,it="This entire process takes around 2 minutes from start to finish. I’ve noticed that sometimes GitHub takes another minute or two to distribute the latest build across the Pages CDN.",D,v,nt='<a aria-hidden="true" tabindex="-1" href="#initiating-builds"><span class="icon icon-link"></span></a><a href="#initiating-builds" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Initiating builds',z,k,lt="My build pipeline is fully automated, but that’s not the only piece. I generally don’t need to manually author commits, either. While I generally avoid committing broken code, notes don’t really have a broken state that would fail to compile. A half-written note is in a valid state for backing up to git, so notes are a great candidate for automatic git commits.",K,T,at='I achieve automated commits in 2 ways, depending on the device. On a computer, I use the <a href="https://github.com/denolehov/obsidian-git" rel="nofollow">obisidian-git</a> plugin. It’s easy to set up and works great. I have it configured to automatically backup my notes to git every 30 minutes if there are any changes, and it provides a command to manually trigger a backup too.',W,C,ot="On mobile & tablet devices, though, it’s not so great. iOS and Android lack a native git client for the plugin to use, so it ships with a JS implementation of git that is very slow. I didn’t like this approach, so opted for a different workflow.",N,H,st='On mobile &amp; tablet, I use a combination of <a href="https://workingcopy.app/" rel="nofollow">Working Copy</a> as a git client and Apple Shortcuts to operate it. I have 2 shortcuts:',R,L,rt="<li>A button shortcut that replaces my Obsidian app icon. When tapped, it:<ol><li>Pulls the git repo containing my notes, then</li> <li>Launches obsidian once the pull is completed</li></ol></li> <li>An automated shortcut that pushes all changes to my notes repo when I leave the Obsidian app</li>",Z,M,pt="I’ve found this setup makes it extremely easy to get content published and shared with people on demand.",B,g,ut='<a aria-hidden="true" tabindex="-1" href="#specifying-publishing-details-for-notes"><span class="icon icon-link"></span></a><a href="#specifying-publishing-details-for-notes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Specifying publishing details for notes',F,I,dt="The last detail worth covering is how I specify metadata for published notes. TL;DR: I use frontmatter.",J,P,ht='All the metadata on this and other notes is specified in the frontmatter. <a href="/notes/slugs-make-links-readable">Slugs make links readable</a>, so I specify my slugs in the frontmatter. For this note that frontmatter is <code>slug: publishing-this-site</code>. Really simple! I do similar for the created date, last modified date, title, description, etc. I use <a href="https://mdsvex.pngwn.io/" rel="nofollow">mdsvex</a> to process my markdown into svelte components, and it makes the frontmatter metadata available so I can easily use it when rendering the page.',X,S,mt='Hopefully this overview inspires you to build your own publishing pipeline and put the <em>personal</em> back in <em>personal computing</em>. If you have any questions/comments/feedback, please <a href="https://twitter.com/AllanDeutsch" rel="nofollow">reach out to me on Twitter</a>!';return{c(){l=o("p"),l.innerHTML=f,m=p(),h=o("p"),h.innerHTML=a,d=p(),c=o("ol"),c.innerHTML=U,q=p(),b=o("h2"),b.innerHTML=V,A=p(),y=o("p"),y.innerHTML=Y,j=p(),w=o("p"),w.textContent=tt,$=p(),x=o("ol"),x.innerHTML=et,G=p(),_=o("p"),_.textContent=it,D=p(),v=o("h2"),v.innerHTML=nt,z=p(),k=o("p"),k.textContent=lt,K=p(),T=o("p"),T.innerHTML=at,W=p(),C=o("p"),C.textContent=ot,N=p(),H=o("p"),H.innerHTML=st,R=p(),L=o("ol"),L.innerHTML=rt,Z=p(),M=o("p"),M.textContent=pt,B=p(),g=o("h2"),g.innerHTML=ut,F=p(),I=o("p"),I.textContent=dt,J=p(),P=o("p"),P.innerHTML=ht,X=p(),S=o("p"),S.innerHTML=mt,this.h()},l(t){l=s(t,"P",{"data-svelte-h":!0}),r(l)!=="svelte-1lfmhqd"&&(l.innerHTML=f),m=u(t),h=s(t,"P",{"data-svelte-h":!0}),r(h)!=="svelte-1sjai0j"&&(h.innerHTML=a),d=u(t),c=s(t,"OL",{"data-svelte-h":!0}),r(c)!=="svelte-to3ktq"&&(c.innerHTML=U),q=u(t),b=s(t,"H2",{id:!0,"data-svelte-h":!0}),r(b)!=="svelte-dmsy4h"&&(b.innerHTML=V),A=u(t),y=s(t,"P",{"data-svelte-h":!0}),r(y)!=="svelte-1anx83q"&&(y.innerHTML=Y),j=u(t),w=s(t,"P",{"data-svelte-h":!0}),r(w)!=="svelte-nzlw0j"&&(w.textContent=tt),$=u(t),x=s(t,"OL",{"data-svelte-h":!0}),r(x)!=="svelte-1fnlk57"&&(x.innerHTML=et),G=u(t),_=s(t,"P",{"data-svelte-h":!0}),r(_)!=="svelte-mxyjkw"&&(_.textContent=it),D=u(t),v=s(t,"H2",{id:!0,"data-svelte-h":!0}),r(v)!=="svelte-2640uf"&&(v.innerHTML=nt),z=u(t),k=s(t,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1yycr39"&&(k.textContent=lt),K=u(t),T=s(t,"P",{"data-svelte-h":!0}),r(T)!=="svelte-xq2x62"&&(T.innerHTML=at),W=u(t),C=s(t,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1qb8yql"&&(C.textContent=ot),N=u(t),H=s(t,"P",{"data-svelte-h":!0}),r(H)!=="svelte-q2ltiw"&&(H.innerHTML=st),R=u(t),L=s(t,"OL",{"data-svelte-h":!0}),r(L)!=="svelte-145kogy"&&(L.innerHTML=rt),Z=u(t),M=s(t,"P",{"data-svelte-h":!0}),r(M)!=="svelte-18jh3zy"&&(M.textContent=pt),B=u(t),g=s(t,"H2",{id:!0,"data-svelte-h":!0}),r(g)!=="svelte-11i7t8q"&&(g.innerHTML=ut),F=u(t),I=s(t,"P",{"data-svelte-h":!0}),r(I)!=="svelte-hds6r7"&&(I.textContent=dt),J=u(t),P=s(t,"P",{"data-svelte-h":!0}),r(P)!=="svelte-17kixjs"&&(P.innerHTML=ht),X=u(t),S=s(t,"P",{"data-svelte-h":!0}),r(S)!=="svelte-156e5q5"&&(S.innerHTML=mt),this.h()},h(){E(b,"id","structuring-the-build-pipeline"),E(v,"id","initiating-builds"),E(g,"id","specifying-publishing-details-for-notes")},m(t,e){i(t,l,e),i(t,m,e),i(t,h,e),i(t,d,e),i(t,c,e),i(t,q,e),i(t,b,e),i(t,A,e),i(t,y,e),i(t,j,e),i(t,w,e),i(t,$,e),i(t,x,e),i(t,G,e),i(t,_,e),i(t,D,e),i(t,v,e),i(t,z,e),i(t,k,e),i(t,K,e),i(t,T,e),i(t,W,e),i(t,C,e),i(t,N,e),i(t,H,e),i(t,R,e),i(t,L,e),i(t,Z,e),i(t,M,e),i(t,B,e),i(t,g,e),i(t,F,e),i(t,I,e),i(t,J,e),i(t,P,e),i(t,X,e),i(t,S,e)},p:gt,d(t){t&&(n(l),n(m),n(h),n(d),n(c),n(q),n(b),n(A),n(y),n(j),n(w),n($),n(x),n(G),n(_),n(D),n(v),n(z),n(k),n(K),n(T),n(W),n(C),n(N),n(H),n(R),n(L),n(Z),n(M),n(B),n(g),n(F),n(I),n(J),n(P),n(X),n(S))}}}function Pt(O){let l,f;const m=[O[0],bt];let h={$$slots:{default:[It]},$$scope:{ctx:O}};for(let a=0;a<m.length;a+=1)h=Q(h,m[a]);return l=new Mt({props:h}),{c(){xt(l.$$.fragment)},l(a){_t(l.$$.fragment,a)},m(a,d){kt(l,a,d),f=!0},p(a,[d]){const c=d&1?Lt(m,[d&1&&ft(a[0]),d&0&&ft(bt)]):{};d&2&&(c.$$scope={dirty:d,ctx:a}),l.$set(c)},i(a){f||(Tt(l.$$.fragment,a),f=!0)},o(a){Ct(l.$$.fragment,a),f=!1},d(a){Ht(l,a)}}}const bt={title:"The publishing pipeline for allandeutsch.com",description:"An overview of how I avoided needing to copy+paste my notes into blogging software to publish them.",slug:"notes/publishing-this-site",publish:!0,lastmod:"2024-02-07T00:00:00.000Z",date:"2021-10-04T00:00:00.000Z",aliases:null,tags:["topic/webdev","status/budding","taxonomy/blog"],readTime:6,internalLinks:["/notes/slugs-make-links-readable"],flashcards:[]};function St(O,l,f){return O.$$set=m=>{f(0,l=Q(Q({},l),ct(m)))},l=ct(l),[l]}class $t extends yt{constructor(l){super(),wt(this,l,St,Pt,vt,{})}}export{$t as default,bt as metadata};
