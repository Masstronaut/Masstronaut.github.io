import{s as Ct,C as Le,a5 as at,f as o,a as i,I as k,g as r,u as c,c as n,K as m,j as q,i as a,A as ft,d as s}from"./scheduler.73a07135.js";import{S as yt,i as bt,b as gt,d as vt,m as Et,a as _t,t as xt,e as wt}from"./index.ba10b74b.js";import{g as Dt,a as st}from"./spread.8a54911c.js";import{M as Ft}from"./MDSveXNoteLayout.bdefa7a6.js";function At(O){let l,f='<a aria-hidden="true" tabindex="-1" href="#create-a-branch-with-current-changes"><span class="icon icon-link"></span></a><a href="#create-a-branch-with-current-changes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Create a branch with current changes',u,d,h="Sometimes I’m working on a problem and end up side-tracked and solve another problem, but forgot to switch branches first. Doh! This one is an easy fix:",p,C,Pe="<li>Create a new branch and checkout to it (single step)</li> <li>Stage the changes</li> <li>Commit changes to it</li> <li>Push the branch to the remote/tracking</li>",he,B,nt=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -b</span><span style="color:#032F62;--shiki-dark:#CE9178"> feature/my-second-feature</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> add</span><span style="color:#032F62;--shiki-dark:#CE9178"> .</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> commit</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -m</span><span style="color:#032F62;--shiki-dark:#CE9178"> "Moving these changes to their own branch"</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> push</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -u</span><span style="color:#032F62;--shiki-dark:#CE9178"> origin</span><span style="color:#032F62;--shiki-dark:#CE9178"> feature/my-second-feature</span></span></code></pre>`,G,y,Ie='<a aria-hidden="true" tabindex="-1" href="#amend-a-previous-commit"><span class="icon icon-link"></span></a><a href="#amend-a-previous-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Amend a previous commit',pe,_,$e="You’ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then there’s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.",de,N,lt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> commit</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --amend</span></span></code></pre>',Y,x,ze="If you’ve already <code>git push</code>ed the original commit, <em>amend</em>ing it would change history and isn’t allowed with <code>git push</code> by default. However, this can be overcome by forcing the push to overwrite the old commit in history with the amended commit.",ke,Z,ot='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> push</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --force</span></span></code></pre>',K,b,je='<a aria-hidden="true" tabindex="-1" href="#go-back-to-an-old-commit"><span class="icon icon-link"></span></a><a href="#go-back-to-an-old-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Go back to an old commit',me,w,Re="This command will rewind history locally to the specified git commit.",ue,U,rt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> reset</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --hard</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> &#x3C;</span><span style="color:#032F62;--shiki-dark:#CE9178">commit</span><span style="color:#032F62;--shiki-dark:#CE9178"> has</span><span style="color:#24292E;--shiki-dark:#E6E6E6">h</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">></span></span></code></pre>',W,D,Se="If you want to erase the changes that followed on the remote copy, you can additionally run:",Ce,X,ct='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> push</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -f</span></span></code></pre>',J,F,Oe="Which will force git to push your current history and overwrite whatever currently exists on remote.",fe,g,qe='<a aria-hidden="true" tabindex="-1" href="#merge-changes-from-branch-a-into-branch-b"><span class="icon icon-link"></span></a><a href="#merge-changes-from-branch-a-into-branch-b" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Merge changes from branch A into branch B',ye,A,Be="This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.",be,T,Ge="First, make sure you have the latest remote changes locally.",ge,Q,ht=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> fetch</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> pull</span></span></code></pre>`,V,H,Ne="Make sure you have the branch you want to merge changes <em>into</em> checked out locally:",ve,ee,pt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> &#x3C;</span><span style="color:#032F62;--shiki-dark:#CE9178">Branch</span><span style="color:#24292E;--shiki-dark:#E6E6E6">B</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">></span></span></code></pre>',te,M,Ye="And then merge the changes from branch A in:",Ee,ae,dt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> merge</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> &#x3C;</span><span style="color:#032F62;--shiki-dark:#CE9178">Branch</span><span style="color:#24292E;--shiki-dark:#E6E6E6">A</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">></span></span></code></pre>',se,v,Ze='<a aria-hidden="true" tabindex="-1" href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"><span class="icon icon-link"></span></a><a href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Rebase changes in a branch onto a newer commit from the parent branch',_e,L,Ke="This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.",xe,P,Ue="Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:",we,ie,kt=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#032F62;--shiki-dark:#CE9178"> main</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> fetch</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> pull</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#032F62;--shiki-dark:#CE9178"> delta</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> fetch</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> pull</span></span></code></pre>`,ne,I,We="The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:",De,le,mt=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#032F62;--shiki-dark:#CE9178"> delta</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> rebase</span><span style="color:#032F62;--shiki-dark:#CE9178"> main</span></span></code></pre>`,oe,E,Xe='<a aria-hidden="true" tabindex="-1" href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"><span class="icon icon-link"></span></a><a href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Move changes from a protected branch to a feature branch after accidentally committing without switching branches first',Fe,$,Je="Often I will pull latest from the <code>main</code> branch and start making changes for the ticket I’m working on. After some progress I will then commit my changes, forgetting that I didn’t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I can’t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways I’ve found to do this.",Ae,z,Qe="Option 1 works conceptually by taking the following actions:",Te,j,Ve="<li>Undo my last commit to <code>main</code></li> <li>create &amp; checkout a new feature branch</li> <li>commit my changes to it</li>",He,re,ut=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> reset</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --soft</span><span style="color:#032F62;--shiki-dark:#CE9178"> HEAD~1</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -b</span><span style="color:#032F62;--shiki-dark:#CE9178"> feature/my-new-feature</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> commit</span></span></code></pre>`,ce,R,et="Option 2:",Me,S,tt="<li>Create a branch from my commit locally</li> <li>Push my new branch with changes</li> <li>Checkout my local <code>main</code> branch</li> <li>Reset it to the same commit as on <code>origin</code></li>";return{c(){l=o("h2"),l.innerHTML=f,u=i(),d=o("p"),d.textContent=h,p=i(),C=o("ol"),C.innerHTML=Pe,he=i(),B=new k(!1),G=i(),y=o("h2"),y.innerHTML=Ie,pe=i(),_=o("p"),_.textContent=$e,de=i(),N=new k(!1),Y=i(),x=o("p"),x.innerHTML=ze,ke=i(),Z=new k(!1),K=i(),b=o("h2"),b.innerHTML=je,me=i(),w=o("p"),w.textContent=Re,ue=i(),U=new k(!1),W=i(),D=o("p"),D.textContent=Se,Ce=i(),X=new k(!1),J=i(),F=o("p"),F.textContent=Oe,fe=i(),g=o("h2"),g.innerHTML=qe,ye=i(),A=o("p"),A.textContent=Be,be=i(),T=o("p"),T.textContent=Ge,ge=i(),Q=new k(!1),V=i(),H=o("p"),H.innerHTML=Ne,ve=i(),ee=new k(!1),te=i(),M=o("p"),M.textContent=Ye,Ee=i(),ae=new k(!1),se=i(),v=o("h2"),v.innerHTML=Ze,_e=i(),L=o("p"),L.textContent=Ke,xe=i(),P=o("p"),P.innerHTML=Ue,we=i(),ie=new k(!1),ne=i(),I=o("p"),I.innerHTML=We,De=i(),le=new k(!1),oe=i(),E=o("h2"),E.innerHTML=Xe,Fe=i(),$=o("p"),$.innerHTML=Je,Ae=i(),z=o("p"),z.textContent=Qe,Te=i(),j=o("ol"),j.innerHTML=Ve,He=i(),re=new k(!1),ce=i(),R=o("p"),R.textContent=et,Me=i(),S=o("ol"),S.innerHTML=tt,this.h()},l(e){l=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(l)!=="svelte-18cqt3l"&&(l.innerHTML=f),u=n(e),d=r(e,"P",{["data-svelte-h"]:!0}),c(d)!=="svelte-xkd71n"&&(d.textContent=h),p=n(e),C=r(e,"OL",{["data-svelte-h"]:!0}),c(C)!=="svelte-nowu74"&&(C.innerHTML=Pe),he=n(e),B=m(e,!1),G=n(e),y=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(y)!=="svelte-1vmpya9"&&(y.innerHTML=Ie),pe=n(e),_=r(e,"P",{["data-svelte-h"]:!0}),c(_)!=="svelte-da15cb"&&(_.textContent=$e),de=n(e),N=m(e,!1),Y=n(e),x=r(e,"P",{["data-svelte-h"]:!0}),c(x)!=="svelte-epbufz"&&(x.innerHTML=ze),ke=n(e),Z=m(e,!1),K=n(e),b=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(b)!=="svelte-1dnle15"&&(b.innerHTML=je),me=n(e),w=r(e,"P",{["data-svelte-h"]:!0}),c(w)!=="svelte-ee1o77"&&(w.textContent=Re),ue=n(e),U=m(e,!1),W=n(e),D=r(e,"P",{["data-svelte-h"]:!0}),c(D)!=="svelte-1yazrsz"&&(D.textContent=Se),Ce=n(e),X=m(e,!1),J=n(e),F=r(e,"P",{["data-svelte-h"]:!0}),c(F)!=="svelte-1agz04c"&&(F.textContent=Oe),fe=n(e),g=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(g)!=="svelte-pj200v"&&(g.innerHTML=qe),ye=n(e),A=r(e,"P",{["data-svelte-h"]:!0}),c(A)!=="svelte-1q9iaj3"&&(A.textContent=Be),be=n(e),T=r(e,"P",{["data-svelte-h"]:!0}),c(T)!=="svelte-1qmoy2f"&&(T.textContent=Ge),ge=n(e),Q=m(e,!1),V=n(e),H=r(e,"P",{["data-svelte-h"]:!0}),c(H)!=="svelte-1il9orw"&&(H.innerHTML=Ne),ve=n(e),ee=m(e,!1),te=n(e),M=r(e,"P",{["data-svelte-h"]:!0}),c(M)!=="svelte-ihf4o6"&&(M.textContent=Ye),Ee=n(e),ae=m(e,!1),se=n(e),v=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(v)!=="svelte-8zjcwg"&&(v.innerHTML=Ze),_e=n(e),L=r(e,"P",{["data-svelte-h"]:!0}),c(L)!=="svelte-zryt13"&&(L.textContent=Ke),xe=n(e),P=r(e,"P",{["data-svelte-h"]:!0}),c(P)!=="svelte-g99txi"&&(P.innerHTML=Ue),we=n(e),ie=m(e,!1),ne=n(e),I=r(e,"P",{["data-svelte-h"]:!0}),c(I)!=="svelte-1aztn92"&&(I.innerHTML=We),De=n(e),le=m(e,!1),oe=n(e),E=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(E)!=="svelte-jytbzs"&&(E.innerHTML=Xe),Fe=n(e),$=r(e,"P",{["data-svelte-h"]:!0}),c($)!=="svelte-p3l8ro"&&($.innerHTML=Je),Ae=n(e),z=r(e,"P",{["data-svelte-h"]:!0}),c(z)!=="svelte-7v7nlf"&&(z.textContent=Qe),Te=n(e),j=r(e,"OL",{["data-svelte-h"]:!0}),c(j)!=="svelte-151cf32"&&(j.innerHTML=Ve),He=n(e),re=m(e,!1),ce=n(e),R=r(e,"P",{["data-svelte-h"]:!0}),c(R)!=="svelte-epaes7"&&(R.textContent=et),Me=n(e),S=r(e,"OL",{["data-svelte-h"]:!0}),c(S)!=="svelte-17wcmxd"&&(S.innerHTML=tt),this.h()},h(){q(l,"id","create-a-branch-with-current-changes"),B.a=G,q(y,"id","amend-a-previous-commit"),N.a=Y,Z.a=K,q(b,"id","go-back-to-an-old-commit"),U.a=W,X.a=J,q(g,"id","merge-changes-from-branch-a-into-branch-b"),Q.a=V,ee.a=te,ae.a=se,q(v,"id","rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"),ie.a=ne,le.a=oe,q(E,"id","move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"),re.a=ce},m(e,t){a(e,l,t),a(e,u,t),a(e,d,t),a(e,p,t),a(e,C,t),a(e,he,t),B.m(nt,e,t),a(e,G,t),a(e,y,t),a(e,pe,t),a(e,_,t),a(e,de,t),N.m(lt,e,t),a(e,Y,t),a(e,x,t),a(e,ke,t),Z.m(ot,e,t),a(e,K,t),a(e,b,t),a(e,me,t),a(e,w,t),a(e,ue,t),U.m(rt,e,t),a(e,W,t),a(e,D,t),a(e,Ce,t),X.m(ct,e,t),a(e,J,t),a(e,F,t),a(e,fe,t),a(e,g,t),a(e,ye,t),a(e,A,t),a(e,be,t),a(e,T,t),a(e,ge,t),Q.m(ht,e,t),a(e,V,t),a(e,H,t),a(e,ve,t),ee.m(pt,e,t),a(e,te,t),a(e,M,t),a(e,Ee,t),ae.m(dt,e,t),a(e,se,t),a(e,v,t),a(e,_e,t),a(e,L,t),a(e,xe,t),a(e,P,t),a(e,we,t),ie.m(kt,e,t),a(e,ne,t),a(e,I,t),a(e,De,t),le.m(mt,e,t),a(e,oe,t),a(e,E,t),a(e,Fe,t),a(e,$,t),a(e,Ae,t),a(e,z,t),a(e,Te,t),a(e,j,t),a(e,He,t),re.m(ut,e,t),a(e,ce,t),a(e,R,t),a(e,Me,t),a(e,S,t)},p:ft,d(e){e&&(s(l),s(u),s(d),s(p),s(C),s(he),B.d(),s(G),s(y),s(pe),s(_),s(de),N.d(),s(Y),s(x),s(ke),Z.d(),s(K),s(b),s(me),s(w),s(ue),U.d(),s(W),s(D),s(Ce),X.d(),s(J),s(F),s(fe),s(g),s(ye),s(A),s(be),s(T),s(ge),Q.d(),s(V),s(H),s(ve),ee.d(),s(te),s(M),s(Ee),ae.d(),s(se),s(v),s(_e),s(L),s(xe),s(P),s(we),ie.d(),s(ne),s(I),s(De),le.d(),s(oe),s(E),s(Fe),s($),s(Ae),s(z),s(Te),s(j),s(He),re.d(),s(ce),s(R),s(Me),s(S))}}}function Tt(O){let l,f;const u=[O[0],it];let d={$$slots:{default:[At]},$$scope:{ctx:O}};for(let h=0;h<u.length;h+=1)d=Le(d,u[h]);return l=new Ft({props:d}),{c(){gt(l.$$.fragment)},l(h){vt(l.$$.fragment,h)},m(h,p){Et(l,h,p),f=!0},p(h,[p]){const C=p&1?Dt(u,[p&1&&st(h[0]),p&0&&st(it)]):{};p&2&&(C.$$scope={dirty:p,ctx:h}),l.$set(C)},i(h){f||(_t(l.$$.fragment,h),f=!0)},o(h){xt(l.$$.fragment,h),f=!1},d(h){wt(l,h)}}}const it={title:"git-cheatsheet",description:"Some common scenarios and how to resolve them using git.",slug:"git-cheatsheet",publish:!0,lastmod:"2023-06-28T00:00:00.000Z",date:"2022-05-24T00:00:00.000Z",aliases:[null],tags:["status/seedling"],timeToRead:4,internalLinks:[],flashcards:[]};function Ht(O,l,f){return O.$$set=u=>{f(0,l=Le(Le({},l),at(u)))},l=at(l),[l]}class $t extends yt{constructor(l){super(),bt(this,l,Ht,Tt,Ct,{})}}export{$t as default,it as metadata};
