import{t as r,a as i}from"./Bj2ZHtgv.js";import"./DBHxkW5N.js";import{s,f as B,R as l}from"./fxLts69-.js";import{h as a}from"./RJ7APweJ.js";import{l as m,s as g}from"./BMf7CqPI.js";import{M as b}from"./CFquw8Ap.js";import{T as f}from"./BzjUxtto.js";const c={title:"Structural types increase data compatibility",description:"Structural types are only concerned with the shape of data, rather than the names of types. This makes data types more compatible.",slug:"notes/structural-types-increase-compatibility",publish:!0,lastmod:"2024-02-04T00:00:00.000Z",date:"2024-02-04T00:00:00.000Z",aliases:null,tags:["status/seedling","topic/typescript"],readTime:3,internalLinks:["/notes/structural-branded-types-nominal"],flashcards:[]},{title:q,description:_,slug:L,publish:$,lastmod:G,date:M,aliases:P,tags:Q,readTime:z,internalLinks:K,flashcards:O}=c;var w=r("<thead><tr><th></th><th>Nominal</th><th>Structural</th></tr></thead> <tbody><tr><td>Languages</td><td>C, C++, Java, C#</td><td>TypeScript, Go</td></tr><tr><td>Type compatibility requirements</td><td>Structure and name</td><td>Structure</td></tr><tr><td>Specificity</td><td>Strict</td><td>Flexible</td></tr></tbody>",1),C=r('<p>Typescript uses an approach to types called “structural typing”. Structural types are compatible if they share the same structure: the same named members and those members have the same types. This differs from languages such as C & C++ which use an approach called “nominal typing.” Nominal types are only equivalent if they share the same structure <strong>and name</strong>. Here’s a quick reference:</p> <!> <p>I find it easiest to understand how structural types work with code examples:</p> <!><!> <p>This approach is really convenient on the web where it’s common for data to come from external APIs; they may change the data provided. Structural typing makes it easy to handle extra data. In the <code>a2 = b</code> example above, the extra data on <code>b</code> is “sliced” off, narrowing it to an <code>A</code> object. The extra field on <code>B</code> doesn’t cause any issues! This makes it easy to opt-in to using additional data on a type when I’m ready, and to continue working until then.</p> <p>TypeScript type compatibility can <em>reduce clarity</em> that a developer could otherwise provide using a named type. This might be an issue when trying to distinguish between <em>structurally</em> equivalent types that are <em>nominally</em> different. As an example, consider a <code>UserID</code> and <code>PostID</code> that are both represented as strings:</p> <!><!> <p>These are two different <em>named</em> types but because they are <em>structurally</em> identical TypeScript will allow you to assign a <code>UserID</code> value to a <code>PostID</code> object. Yikes! Compatibility makes problems like this possible.</p> <p>Fortunately, it can be solved in TypeScript. <a href="/notes/structural-branded-types-nominal">Type branding removes structural type compatibility</a>, and can be used to prevent this type of problem.</p>',1);function W(d,k){const h=m(k,["children","$$slots","$$events","$$legacy"]);b(d,g(()=>h,c,{children:(y,v)=>{var e=C(),t=s(B(e),2);f(t,{children:(D,E)=>{var u=w();l(2),i(D,u)}});var n=s(t,4);a(n,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBAglC8UDeUCGAuKA7ArgWwCMIAnKAXwG4AoUSKAIQWTU10JIBooDMBnYYgEssAc3LUqAeklQABqgCMsqIN5QIADzAAbQQGNBwbSCi0IAEzRrUWOTGUB7AgCsIe4FW0RgaBZjiIKBhQCgBMAMziUjLyocqq2A4+mjr6hsam4BZWdrIAdAWe3mihTEGY4aEKUdIMOD6GavzEOO44xNB4qMB6ABYQvBzRULwOKj56NtzQqLy8giJY2cBjqJl0svZQTq7uVIpMqKEUULUAaqi65lTDsgTxaim6BkYmZpazaHL0ji5uHl4fDwGGVggpwgBWLjAgBEqAIehhlFu9ygk1sRCs80Wy1Wtk2v12PmGREmOF40EMKmsIxwkGIFJ8DgAZqZ+iMBK1gO1oCzYPtSogCCdzpdBOYgA"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> A</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666"> &#125;;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> B</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> b</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// &#96;a1&#96; is explicitly typed as an &#96;A&#96; object</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">a1</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">A</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123; </span><span style="color:#998418;--shiki-dark:#B8A965">a</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2F798A;--shiki-dark:#4C9A91">123</span><span style="color:#999999;--shiki-dark:#666666"> &#125;;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// &#96;a2&#96; is not explicitly typed as &#96;A&#96;...</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">a2</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123; </span><span style="color:#998418;--shiki-dark:#B8A965">a</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2F798A;--shiki-dark:#4C9A91">321</span><span style="color:#999999;--shiki-dark:#666666"> &#125;;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// But its structure matches,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// so it can be assigned to a type &#96;A&#96; object</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">a1</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a2</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> // Valid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// &#96;b&#96; is explicitly typed as a &#96;B&#96; object</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">b</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">B</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#998418;--shiki-dark:#B8A965">a</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2F798A;--shiki-dark:#4C9A91">135</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#998418;--shiki-dark:#B8A965">b</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">abc</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">&#125;;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// &#96;b&#96; can be assigned to an &#96;A&#96; object </span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// because it is a superset of the structure of A</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">a2</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> b</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> // Valid</span></span></code></pre>`);var o=s(n);a(o,()=>`<pre class="code-copy-target hidden">type A = &#123; a: number &#125;;
type B = &#123; a: number, b: string &#125;;

// &#96;a1&#96; is explicitly typed as an &#96;A&#96; object
let a1: A = &#123; a: 123 &#125;;
// &#96;a2&#96; is not explicitly typed as &#96;A&#96;...
let a2 = &#123; a: 321 &#125;;
// But its structure matches,
// so it can be assigned to a type &#96;A&#96; object
a1 = a2; // Valid

// &#96;b&#96; is explicitly typed as a &#96;B&#96; object
let b: B = &#123;a: 135, b: "abc"&#125;;
// &#96;b&#96; can be assigned to an &#96;A&#96; object 
// because it is a superset of the structure of A
a2 = b; // Valid</pre>`);var p=s(o,6);a(p,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark twoslash lsp" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" ts twoslash highlight="[object Object]" data-tsplay="https://typescriptlang.org/play/#code/C4TwDgpgBAqgzhATgSQCJQLxTsRBLAOwHMBuAKFEigAUB7HNTbXQ0ssgGwmCgFcFEALlgDGWAEQBDDh0kFx5LjzD1gwug3RZ+SEkA"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> UserID</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> string</span></code></span>UserID</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> PostID</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> string</span></code></span>PostID</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">user</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span></code></span>user</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> UserID</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> string</span></code></span>UserID</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">allan</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line highlighted"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">post</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span></code></span>post</span></span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> PostID</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> string</span></code></span>PostID</span></span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> </span><span style="color:#B07D48;--shiki-dark:#BD976A"><span class="twoslash-hover"><span class="twoslash-popup-container"><code class="twoslash-popup-code"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">user</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span></code></span>user</span></span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>`);var A=s(p);a(A,()=>`<pre class="code-copy-target hidden">type UserID = string;
type PostID = string;

let user: UserID = "allan";
let post: PostID = user;</pre>`),l(4),i(y,e)},$$slots:{default:!0}}))}export{W as default,c as metadata};
