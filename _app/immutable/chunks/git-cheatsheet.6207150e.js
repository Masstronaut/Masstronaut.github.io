import{s as Xt,C as tt,N as xt,f as o,a as i,I as h,e as p,g as r,u as c,c as l,K as d,j as q,i as a,A as Jt,d as s}from"./scheduler.e9e6880c.js";import{S as Qt,i as Vt,b as ea,d as ta,m as aa,a as sa,t as ia,e as la}from"./index.ebf47752.js";import{g as na,a as Dt}from"./spread.8a54911c.js";import{M as oa}from"./MDSveXNoteLayout.67ad1c23.js";function ra(O){let n,y='<a aria-hidden="true" tabindex="-1" href="#create-a-branch-with-current-changes"><span class="icon icon-link"></span></a><a href="#create-a-branch-with-current-changes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Create a branch with current changes',f,u,k="Sometimes I’m working on a problem and end up side-tracked and solve another problem, but forgot to switch branches first. Doh! This one is an easy fix:",m,C,at="<li>Create a new branch and checkout to it (single step)</li> <li>Stage the changes</li> <li>Commit changes to it</li> <li>Push the branch to the remote/tracking</li>",Pe,N,Ft=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -b</span><span style="color:#032F62;--shiki-dark:#CE9178"> feature/my-second-feature</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> add</span><span style="color:#032F62;--shiki-dark:#CE9178"> .</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> commit</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -m</span><span style="color:#032F62;--shiki-dark:#CE9178"> "Moving these changes to their own branch"</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> push</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -u</span><span style="color:#032F62;--shiki-dark:#CE9178"> origin</span><span style="color:#032F62;--shiki-dark:#CE9178"> feature/my-second-feature</span></span></code></pre>`,G,Y,Ht=`<pre class="code-copy-target hidden">git checkout -b feature/my-second-feature
git add .
git commit -m "Moving these changes to their own branch"
git push -u origin feature/my-second-feature</pre>`,Z,g,st='<a aria-hidden="true" tabindex="-1" href="#amend-a-previous-commit"><span class="icon icon-link"></span></a><a href="#amend-a-previous-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Amend a previous commit',Ie,E,it="You’ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then there’s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.",$e,K,Tt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> commit</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --amend</span></span></code></pre>',U,W,Mt='<pre class="code-copy-target hidden">git commit --amend</pre>',X,x,lt="If you’ve already <code>git push</code>ed the original commit, <em>amend</em>ing it would change history and isn’t allowed with <code>git push</code> by default. However, this can be overcome by forcing the push to overwrite the old commit in history with the amended commit.",ze,J,Lt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> push</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --force</span></span></code></pre>',Q,V,Pt='<pre class="code-copy-target hidden">git push --force</pre>',ee,_,nt='<a aria-hidden="true" tabindex="-1" href="#go-back-to-an-old-commit"><span class="icon icon-link"></span></a><a href="#go-back-to-an-old-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Go back to an old commit',je,D,ot="This command will rewind history locally to the specified git commit.",Be,te,It='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> reset</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --hard</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> &#x3C;</span><span style="color:#032F62;--shiki-dark:#CE9178">commit</span><span style="color:#032F62;--shiki-dark:#CE9178"> has</span><span style="color:#24292E;--shiki-dark:#E6E6E6">h</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">></span></span></code></pre>',ae,se,$t='<pre class="code-copy-target hidden">git reset --hard &lt;commit hash&gt;</pre>',ie,A,rt="If you want to erase the changes that followed on the remote copy, you can additionally run:",Re,le,zt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> push</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -f</span></span></code></pre>',ne,oe,jt='<pre class="code-copy-target hidden">git push -f</pre>',re,F,ct="Which will force git to push your current history and overwrite whatever currently exists on remote.",Se,b,ht='<a aria-hidden="true" tabindex="-1" href="#merge-changes-from-branch-a-into-branch-b"><span class="icon icon-link"></span></a><a href="#merge-changes-from-branch-a-into-branch-b" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Merge changes from branch A into branch B',Oe,H,pt="This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.",qe,T,dt="First, make sure you have the latest remote changes locally.",Ne,ce,Bt=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> fetch</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> pull</span></span></code></pre>`,he,pe,Rt=`<pre class="code-copy-target hidden">git fetch
git pull</pre>`,de,M,kt="Make sure you have the branch you want to merge changes <em>into</em> checked out locally:",Ge,ke,St='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> &#x3C;</span><span style="color:#032F62;--shiki-dark:#CE9178">Branch</span><span style="color:#24292E;--shiki-dark:#E6E6E6">B</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">></span></span></code></pre>',me,ue,Ot='<pre class="code-copy-target hidden">git checkout &lt;BranchB&gt;</pre>',fe,L,mt="And then merge the changes from branch A in:",Ye,Ce,qt='<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> merge</span><span style="color:#D73A49;--shiki-dark:#D4D4D4"> &#x3C;</span><span style="color:#032F62;--shiki-dark:#CE9178">Branch</span><span style="color:#24292E;--shiki-dark:#E6E6E6">A</span><span style="color:#D73A49;--shiki-dark:#D4D4D4">></span></span></code></pre>',ye,ge,Nt='<pre class="code-copy-target hidden">git merge &lt;BranchA&gt;</pre>',_e,v,ut='<a aria-hidden="true" tabindex="-1" href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"><span class="icon icon-link"></span></a><a href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Rebase changes in a branch onto a newer commit from the parent branch',Ze,P,ft="This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.",Ke,I,Ct="Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:",Ue,be,Gt=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#032F62;--shiki-dark:#CE9178"> main</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> fetch</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> pull</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#032F62;--shiki-dark:#CE9178"> delta</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> fetch</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> pull</span></span></code></pre>`,ve,we,Yt=`<pre class="code-copy-target hidden">git checkout main
git fetch
git pull
git checkout delta
git fetch
git pull</pre>`,Ee,$,yt="The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:",We,xe,Zt=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#032F62;--shiki-dark:#CE9178"> delta</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> rebase</span><span style="color:#032F62;--shiki-dark:#CE9178"> main</span></span></code></pre>`,De,Ae,Kt=`<pre class="code-copy-target hidden">git checkout delta
git rebase main</pre>`,Fe,w,gt='<a aria-hidden="true" tabindex="-1" href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"><span class="icon icon-link"></span></a><a href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Move changes from a protected branch to a feature branch after accidentally committing without switching branches first',Xe,z,_t="Often I will pull latest from the <code>main</code> branch and start making changes for the ticket I’m working on. After some progress I will then commit my changes, forgetting that I didn’t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I can’t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways I’ve found to do this.",Je,j,bt="Option 1 works conceptually by taking the following actions:",Qe,B,vt="<li>Undo my last commit to <code>main</code></li> <li>create &amp; checkout a new feature branch</li> <li>commit my changes to it</li>",Ve,He,Ut=`<pre class="shiki shiki-themes github-light slack-dark" style="background-color:#fff;--shiki-dark-bg:#222222;color:#24292e;--shiki-dark:#E6E6E6" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> reset</span><span style="color:#005CC5;--shiki-dark:#CE9178"> --soft</span><span style="color:#032F62;--shiki-dark:#CE9178"> HEAD~1</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> checkout</span><span style="color:#005CC5;--shiki-dark:#CE9178"> -b</span><span style="color:#032F62;--shiki-dark:#CE9178"> feature/my-new-feature</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#DCDCAA">git</span><span style="color:#032F62;--shiki-dark:#CE9178"> commit</span></span></code></pre>`,Te,Me,Wt=`<pre class="code-copy-target hidden">git reset --soft HEAD~1
git checkout -b feature/my-new-feature
git commit</pre>`,Le,R,wt="Option 2:",et,S,Et="<li>Create a branch from my commit locally</li> <li>Push my new branch with changes</li> <li>Checkout my local <code>main</code> branch</li> <li>Reset it to the same commit as on <code>origin</code></li>";return{c(){n=o("h2"),n.innerHTML=y,f=i(),u=o("p"),u.textContent=k,m=i(),C=o("ol"),C.innerHTML=at,Pe=i(),N=new h(!1),G=p(),Y=new h(!1),Z=i(),g=o("h2"),g.innerHTML=st,Ie=i(),E=o("p"),E.textContent=it,$e=i(),K=new h(!1),U=p(),W=new h(!1),X=i(),x=o("p"),x.innerHTML=lt,ze=i(),J=new h(!1),Q=p(),V=new h(!1),ee=i(),_=o("h2"),_.innerHTML=nt,je=i(),D=o("p"),D.textContent=ot,Be=i(),te=new h(!1),ae=p(),se=new h(!1),ie=i(),A=o("p"),A.textContent=rt,Re=i(),le=new h(!1),ne=p(),oe=new h(!1),re=i(),F=o("p"),F.textContent=ct,Se=i(),b=o("h2"),b.innerHTML=ht,Oe=i(),H=o("p"),H.textContent=pt,qe=i(),T=o("p"),T.textContent=dt,Ne=i(),ce=new h(!1),he=p(),pe=new h(!1),de=i(),M=o("p"),M.innerHTML=kt,Ge=i(),ke=new h(!1),me=p(),ue=new h(!1),fe=i(),L=o("p"),L.textContent=mt,Ye=i(),Ce=new h(!1),ye=p(),ge=new h(!1),_e=i(),v=o("h2"),v.innerHTML=ut,Ze=i(),P=o("p"),P.textContent=ft,Ke=i(),I=o("p"),I.innerHTML=Ct,Ue=i(),be=new h(!1),ve=p(),we=new h(!1),Ee=i(),$=o("p"),$.innerHTML=yt,We=i(),xe=new h(!1),De=p(),Ae=new h(!1),Fe=i(),w=o("h2"),w.innerHTML=gt,Xe=i(),z=o("p"),z.innerHTML=_t,Je=i(),j=o("p"),j.textContent=bt,Qe=i(),B=o("ol"),B.innerHTML=vt,Ve=i(),He=new h(!1),Te=p(),Me=new h(!1),Le=i(),R=o("p"),R.textContent=wt,et=i(),S=o("ol"),S.innerHTML=Et,this.h()},l(e){n=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(n)!=="svelte-18cqt3l"&&(n.innerHTML=y),f=l(e),u=r(e,"P",{["data-svelte-h"]:!0}),c(u)!=="svelte-xkd71n"&&(u.textContent=k),m=l(e),C=r(e,"OL",{["data-svelte-h"]:!0}),c(C)!=="svelte-nowu74"&&(C.innerHTML=at),Pe=l(e),N=d(e,!1),G=p(),Y=d(e,!1),Z=l(e),g=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(g)!=="svelte-1vmpya9"&&(g.innerHTML=st),Ie=l(e),E=r(e,"P",{["data-svelte-h"]:!0}),c(E)!=="svelte-da15cb"&&(E.textContent=it),$e=l(e),K=d(e,!1),U=p(),W=d(e,!1),X=l(e),x=r(e,"P",{["data-svelte-h"]:!0}),c(x)!=="svelte-epbufz"&&(x.innerHTML=lt),ze=l(e),J=d(e,!1),Q=p(),V=d(e,!1),ee=l(e),_=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(_)!=="svelte-1dnle15"&&(_.innerHTML=nt),je=l(e),D=r(e,"P",{["data-svelte-h"]:!0}),c(D)!=="svelte-ee1o77"&&(D.textContent=ot),Be=l(e),te=d(e,!1),ae=p(),se=d(e,!1),ie=l(e),A=r(e,"P",{["data-svelte-h"]:!0}),c(A)!=="svelte-1yazrsz"&&(A.textContent=rt),Re=l(e),le=d(e,!1),ne=p(),oe=d(e,!1),re=l(e),F=r(e,"P",{["data-svelte-h"]:!0}),c(F)!=="svelte-1agz04c"&&(F.textContent=ct),Se=l(e),b=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(b)!=="svelte-pj200v"&&(b.innerHTML=ht),Oe=l(e),H=r(e,"P",{["data-svelte-h"]:!0}),c(H)!=="svelte-1q9iaj3"&&(H.textContent=pt),qe=l(e),T=r(e,"P",{["data-svelte-h"]:!0}),c(T)!=="svelte-1qmoy2f"&&(T.textContent=dt),Ne=l(e),ce=d(e,!1),he=p(),pe=d(e,!1),de=l(e),M=r(e,"P",{["data-svelte-h"]:!0}),c(M)!=="svelte-1il9orw"&&(M.innerHTML=kt),Ge=l(e),ke=d(e,!1),me=p(),ue=d(e,!1),fe=l(e),L=r(e,"P",{["data-svelte-h"]:!0}),c(L)!=="svelte-ihf4o6"&&(L.textContent=mt),Ye=l(e),Ce=d(e,!1),ye=p(),ge=d(e,!1),_e=l(e),v=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(v)!=="svelte-8zjcwg"&&(v.innerHTML=ut),Ze=l(e),P=r(e,"P",{["data-svelte-h"]:!0}),c(P)!=="svelte-zryt13"&&(P.textContent=ft),Ke=l(e),I=r(e,"P",{["data-svelte-h"]:!0}),c(I)!=="svelte-g99txi"&&(I.innerHTML=Ct),Ue=l(e),be=d(e,!1),ve=p(),we=d(e,!1),Ee=l(e),$=r(e,"P",{["data-svelte-h"]:!0}),c($)!=="svelte-1aztn92"&&($.innerHTML=yt),We=l(e),xe=d(e,!1),De=p(),Ae=d(e,!1),Fe=l(e),w=r(e,"H2",{id:!0,["data-svelte-h"]:!0}),c(w)!=="svelte-jytbzs"&&(w.innerHTML=gt),Xe=l(e),z=r(e,"P",{["data-svelte-h"]:!0}),c(z)!=="svelte-p3l8ro"&&(z.innerHTML=_t),Je=l(e),j=r(e,"P",{["data-svelte-h"]:!0}),c(j)!=="svelte-7v7nlf"&&(j.textContent=bt),Qe=l(e),B=r(e,"OL",{["data-svelte-h"]:!0}),c(B)!=="svelte-151cf32"&&(B.innerHTML=vt),Ve=l(e),He=d(e,!1),Te=p(),Me=d(e,!1),Le=l(e),R=r(e,"P",{["data-svelte-h"]:!0}),c(R)!=="svelte-epaes7"&&(R.textContent=wt),et=l(e),S=r(e,"OL",{["data-svelte-h"]:!0}),c(S)!=="svelte-17wcmxd"&&(S.innerHTML=Et),this.h()},h(){q(n,"id","create-a-branch-with-current-changes"),N.a=G,Y.a=Z,q(g,"id","amend-a-previous-commit"),K.a=U,W.a=X,J.a=Q,V.a=ee,q(_,"id","go-back-to-an-old-commit"),te.a=ae,se.a=ie,le.a=ne,oe.a=re,q(b,"id","merge-changes-from-branch-a-into-branch-b"),ce.a=he,pe.a=de,ke.a=me,ue.a=fe,Ce.a=ye,ge.a=_e,q(v,"id","rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"),be.a=ve,we.a=Ee,xe.a=De,Ae.a=Fe,q(w,"id","move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"),He.a=Te,Me.a=Le},m(e,t){a(e,n,t),a(e,f,t),a(e,u,t),a(e,m,t),a(e,C,t),a(e,Pe,t),N.m(Ft,e,t),a(e,G,t),Y.m(Ht,e,t),a(e,Z,t),a(e,g,t),a(e,Ie,t),a(e,E,t),a(e,$e,t),K.m(Tt,e,t),a(e,U,t),W.m(Mt,e,t),a(e,X,t),a(e,x,t),a(e,ze,t),J.m(Lt,e,t),a(e,Q,t),V.m(Pt,e,t),a(e,ee,t),a(e,_,t),a(e,je,t),a(e,D,t),a(e,Be,t),te.m(It,e,t),a(e,ae,t),se.m($t,e,t),a(e,ie,t),a(e,A,t),a(e,Re,t),le.m(zt,e,t),a(e,ne,t),oe.m(jt,e,t),a(e,re,t),a(e,F,t),a(e,Se,t),a(e,b,t),a(e,Oe,t),a(e,H,t),a(e,qe,t),a(e,T,t),a(e,Ne,t),ce.m(Bt,e,t),a(e,he,t),pe.m(Rt,e,t),a(e,de,t),a(e,M,t),a(e,Ge,t),ke.m(St,e,t),a(e,me,t),ue.m(Ot,e,t),a(e,fe,t),a(e,L,t),a(e,Ye,t),Ce.m(qt,e,t),a(e,ye,t),ge.m(Nt,e,t),a(e,_e,t),a(e,v,t),a(e,Ze,t),a(e,P,t),a(e,Ke,t),a(e,I,t),a(e,Ue,t),be.m(Gt,e,t),a(e,ve,t),we.m(Yt,e,t),a(e,Ee,t),a(e,$,t),a(e,We,t),xe.m(Zt,e,t),a(e,De,t),Ae.m(Kt,e,t),a(e,Fe,t),a(e,w,t),a(e,Xe,t),a(e,z,t),a(e,Je,t),a(e,j,t),a(e,Qe,t),a(e,B,t),a(e,Ve,t),He.m(Ut,e,t),a(e,Te,t),Me.m(Wt,e,t),a(e,Le,t),a(e,R,t),a(e,et,t),a(e,S,t)},p:Jt,d(e){e&&(s(n),s(f),s(u),s(m),s(C),s(Pe),s(G),N.d(),Y.d(),s(Z),s(g),s(Ie),s(E),s($e),s(U),K.d(),W.d(),s(X),s(x),s(ze),s(Q),J.d(),V.d(),s(ee),s(_),s(je),s(D),s(Be),s(ae),te.d(),se.d(),s(ie),s(A),s(Re),s(ne),le.d(),oe.d(),s(re),s(F),s(Se),s(b),s(Oe),s(H),s(qe),s(T),s(Ne),s(he),ce.d(),pe.d(),s(de),s(M),s(Ge),s(me),ke.d(),ue.d(),s(fe),s(L),s(Ye),s(ye),Ce.d(),ge.d(),s(_e),s(v),s(Ze),s(P),s(Ke),s(I),s(Ue),s(ve),be.d(),we.d(),s(Ee),s($),s(We),s(De),xe.d(),Ae.d(),s(Fe),s(w),s(Xe),s(z),s(Je),s(j),s(Qe),s(B),s(Ve),s(Te),He.d(),Me.d(),s(Le),s(R),s(et),s(S))}}}function ca(O){let n,y;const f=[O[0],At];let u={$$slots:{default:[ra]},$$scope:{ctx:O}};for(let k=0;k<f.length;k+=1)u=tt(u,f[k]);return n=new oa({props:u}),{c(){ea(n.$$.fragment)},l(k){ta(n.$$.fragment,k)},m(k,m){aa(n,k,m),y=!0},p(k,[m]){const C=m&1?na(f,[m&1&&Dt(k[0]),m&0&&Dt(At)]):{};m&2&&(C.$$scope={dirty:m,ctx:k}),n.$set(C)},i(k){y||(sa(n.$$.fragment,k),y=!0)},o(k){ia(n.$$.fragment,k),y=!1},d(k){la(n,k)}}}const At={title:"git-cheatsheet",description:"Some common scenarios and how to resolve them using git.",slug:"git-cheatsheet",publish:!0,lastmod:"2023-06-28T00:00:00.000Z",date:"2022-05-24T00:00:00.000Z",aliases:[null],tags:["status/seedling"],timeToRead:4,internalLinks:[],flashcards:[]};function ha(O,n,y){return O.$$set=f=>{y(0,n=tt(tt({},n),xt(f)))},n=xt(n),[n]}class ua extends Qt{constructor(n){super(),Vt(this,n,ha,ca,Xt,{})}}export{ua as default,At as metadata};
