import{s as Jt,p as tt,q as xt,e as o,a as i,H as h,u as p,c as r,m as c,g as l,v as d,o as G,i as a,n as Kt,f as s}from"./scheduler.D0NR2qGA.js";import{S as Qt,i as Vt,c as ea,a as ta,m as aa,t as sa,b as ia,d as la}from"./index.BbYnIXAR.js";import{g as na,a as Bt}from"./spread.CgU5AtxT.js";import{M as oa}from"./MDSveXNoteLayout.BwDqN6nG.js";function ra(R){let n,_='<a aria-hidden="true" tabindex="-1" href="#create-a-branch-with-current-changes"><span class="icon icon-link"></span></a><a href="#create-a-branch-with-current-changes" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Create a branch with current changes',u,f,k="Sometimes I’m working on a problem and end up side-tracked and solve another problem, but forgot to switch branches first. Doh! This one is an easy fix:",m,y,at="<li>Create a new branch and checkout to it (single step)</li> <li>Stage the changes</li> <li>Commit changes to it</li> <li>Push the branch to the remote/tracking</li>",Ee,N,Ht=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -b</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-second-feature</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> add</span><span style="color:#B56959;--shiki-dark:#C98A7D"> .</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -m</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">Moving these changes to their own branch</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -u</span><span style="color:#B56959;--shiki-dark:#C98A7D"> origin</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-second-feature</span></span></code></pre>`,Y,Z,Tt=`<pre class="code-copy-target hidden">git checkout -b feature/my-second-feature
git add .
git commit -m "Moving these changes to their own branch"
git push -u origin feature/my-second-feature</pre>`,F,b,st='<a aria-hidden="true" tabindex="-1" href="#amend-a-previous-commit"><span class="icon icon-link"></span></a><a href="#amend-a-previous-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Amend a previous commit',Ie,w,it="You’ve finished your code, submitted the PR, and the CICD server spits out an issue with a 1-line change. You fix it and commit your change, just to get the next one. Then there’s another, and another, and another one. Rather than having many simple changes for 1 error at a time, you can amend your previous commit with the change so the commit history is cleaner.",$e,U,Mt='<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --amend</span></span></code></pre>',W,X,Lt='<pre class="code-copy-target hidden">git commit --amend</pre>',J,x,lt="If you’ve already <code>git push</code>ed the original commit, <em>amend</em>ing it would change history and isn’t allowed with <code>git push</code> by default. However, this can be overcome by forcing the push to overwrite the old commit in history with the amended commit.",ze,K,Pt='<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --force</span></span></code></pre>',Q,V,Et='<pre class="code-copy-target hidden">git push --force</pre>',ee,g,nt='<a aria-hidden="true" tabindex="-1" href="#go-back-to-an-old-commit"><span class="icon icon-link"></span></a><a href="#go-back-to-an-old-commit" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Go back to an old commit',Se,B,ot="This command will rewind history locally to the specified git commit.",je,te,It='<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> reset</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --hard</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">commit</span><span style="color:#B56959;--shiki-dark:#C98A7D"> has</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">h</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>',ae,se,$t='<pre class="code-copy-target hidden">git reset --hard &lt;commit hash&gt;</pre>',ie,D,rt="If you want to erase the changes that followed on the remote copy, you can additionally run:",qe,le,zt='<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -f</span></span></code></pre>',ne,oe,St='<pre class="code-copy-target hidden">git push -f</pre>',re,H,ct="Which will force git to push your current history and overwrite whatever currently exists on remote.",Oe,v,ht='<a aria-hidden="true" tabindex="-1" href="#merge-changes-from-branch-a-into-branch-b"><span class="icon icon-link"></span></a><a href="#merge-changes-from-branch-a-into-branch-b" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Merge changes from branch A into branch B',Re,T,pt="This is generally not the best way to go as it replays all the changes in the git history. Instead consider a rebase.",Ge,M,dt="First, make sure you have the latest remote changes locally.",Ne,ce,jt=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span></code></pre>`,he,pe,qt=`<pre class="code-copy-target hidden">git fetch
git pull</pre>`,de,L,kt="Make sure you have the branch you want to merge changes <em>into</em> checked out locally:",Ye,ke,Ot='<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Branch</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">B</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>',me,fe,Rt='<pre class="code-copy-target hidden">git checkout &lt;BranchB&gt;</pre>',ue,P,mt="And then merge the changes from branch A in:",Ze,ye,Gt='<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> merge</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Branch</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">A</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span></span></code></pre>',_e,be,Nt='<pre class="code-copy-target hidden">git merge &lt;BranchA&gt;</pre>',ge,A,ft='<a aria-hidden="true" tabindex="-1" href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"><span class="icon icon-link"></span></a><a href="#rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Rebase changes in a branch onto a newer commit from the parent branch',Fe,E,ut="This creates a clean, linear history of changes and avoids the need for merge resolutions when completing a PR.",Ue,I,yt="Make sure you have the latest commits from the branch you made changes to (<code>delta</code> in this example) and the <code>main</code> branch that has been updated:",We,ve,Yt=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> delta</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pull</span></span></code></pre>`,Ae,Ce,Zt=`<pre class="code-copy-target hidden">git checkout main
git fetch
git pull
git checkout delta
git fetch
git pull</pre>`,we,$,_t="The rebase the changes in <code>delta</code> onto the latest commits from <code>main</code>. Note that this needs to be done while <code>delta</code> is checked out:",Xe,xe,Ft=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> delta</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> rebase</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span></code></pre>`,Be,De,Ut=`<pre class="code-copy-target hidden">git checkout delta
git rebase main</pre>`,He,C,bt='<a aria-hidden="true" tabindex="-1" href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"><span class="icon icon-link"></span></a><a href="#move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Move changes from a protected branch to a feature branch after accidentally committing without switching branches first',Je,z,gt="Often I will pull latest from the <code>main</code> branch and start making changes for the ticket I’m working on. After some progress I will then commit my changes, forgetting that I didn’t make a feature branch first. Since the <code>main</code> branch is protected and requires a PR to push to <code>origin</code> (the remote copy), I can’t do anything with those changes. In this scenario I need to move my changes from <code>main</code> to a feature branch. There are a couple ways I’ve found to do this.",Ke,S,vt="Option 1 works conceptually by taking the following actions:",Qe,j,At="<li>Undo my last commit to <code>main</code></li> <li>create &amp; checkout a new feature branch</li> <li>commit my changes to it</li>",Ve,Te,Wt=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> reset</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --soft</span><span style="color:#B56959;--shiki-dark:#C98A7D"> HEAD~1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -b</span><span style="color:#B56959;--shiki-dark:#C98A7D"> feature/my-new-feature</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> commit</span></span></code></pre>`,Me,Le,Xt=`<pre class="code-copy-target hidden">git reset --soft HEAD~1
git checkout -b feature/my-new-feature
git commit</pre>`,Pe,q,Ct="Option 2:",et,O,wt="<li>Create a branch from my commit locally</li> <li>Push my new branch with changes</li> <li>Checkout my local <code>main</code> branch</li> <li>Reset it to the same commit as on <code>origin</code></li>";return{c(){n=o("h2"),n.innerHTML=_,u=i(),f=o("p"),f.textContent=k,m=i(),y=o("ol"),y.innerHTML=at,Ee=i(),N=new h(!1),Y=p(),Z=new h(!1),F=i(),b=o("h2"),b.innerHTML=st,Ie=i(),w=o("p"),w.textContent=it,$e=i(),U=new h(!1),W=p(),X=new h(!1),J=i(),x=o("p"),x.innerHTML=lt,ze=i(),K=new h(!1),Q=p(),V=new h(!1),ee=i(),g=o("h2"),g.innerHTML=nt,Se=i(),B=o("p"),B.textContent=ot,je=i(),te=new h(!1),ae=p(),se=new h(!1),ie=i(),D=o("p"),D.textContent=rt,qe=i(),le=new h(!1),ne=p(),oe=new h(!1),re=i(),H=o("p"),H.textContent=ct,Oe=i(),v=o("h2"),v.innerHTML=ht,Re=i(),T=o("p"),T.textContent=pt,Ge=i(),M=o("p"),M.textContent=dt,Ne=i(),ce=new h(!1),he=p(),pe=new h(!1),de=i(),L=o("p"),L.innerHTML=kt,Ye=i(),ke=new h(!1),me=p(),fe=new h(!1),ue=i(),P=o("p"),P.textContent=mt,Ze=i(),ye=new h(!1),_e=p(),be=new h(!1),ge=i(),A=o("h2"),A.innerHTML=ft,Fe=i(),E=o("p"),E.textContent=ut,Ue=i(),I=o("p"),I.innerHTML=yt,We=i(),ve=new h(!1),Ae=p(),Ce=new h(!1),we=i(),$=o("p"),$.innerHTML=_t,Xe=i(),xe=new h(!1),Be=p(),De=new h(!1),He=i(),C=o("h2"),C.innerHTML=bt,Je=i(),z=o("p"),z.innerHTML=gt,Ke=i(),S=o("p"),S.textContent=vt,Qe=i(),j=o("ol"),j.innerHTML=At,Ve=i(),Te=new h(!1),Me=p(),Le=new h(!1),Pe=i(),q=o("p"),q.textContent=Ct,et=i(),O=o("ol"),O.innerHTML=wt,this.h()},l(e){n=r(e,"H2",{id:!0,"data-svelte-h":!0}),c(n)!=="svelte-18cqt3l"&&(n.innerHTML=_),u=l(e),f=r(e,"P",{"data-svelte-h":!0}),c(f)!=="svelte-xkd71n"&&(f.textContent=k),m=l(e),y=r(e,"OL",{"data-svelte-h":!0}),c(y)!=="svelte-nowu74"&&(y.innerHTML=at),Ee=l(e),N=d(e,!1),Y=p(),Z=d(e,!1),F=l(e),b=r(e,"H2",{id:!0,"data-svelte-h":!0}),c(b)!=="svelte-1vmpya9"&&(b.innerHTML=st),Ie=l(e),w=r(e,"P",{"data-svelte-h":!0}),c(w)!=="svelte-da15cb"&&(w.textContent=it),$e=l(e),U=d(e,!1),W=p(),X=d(e,!1),J=l(e),x=r(e,"P",{"data-svelte-h":!0}),c(x)!=="svelte-epbufz"&&(x.innerHTML=lt),ze=l(e),K=d(e,!1),Q=p(),V=d(e,!1),ee=l(e),g=r(e,"H2",{id:!0,"data-svelte-h":!0}),c(g)!=="svelte-1dnle15"&&(g.innerHTML=nt),Se=l(e),B=r(e,"P",{"data-svelte-h":!0}),c(B)!=="svelte-ee1o77"&&(B.textContent=ot),je=l(e),te=d(e,!1),ae=p(),se=d(e,!1),ie=l(e),D=r(e,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1yazrsz"&&(D.textContent=rt),qe=l(e),le=d(e,!1),ne=p(),oe=d(e,!1),re=l(e),H=r(e,"P",{"data-svelte-h":!0}),c(H)!=="svelte-1agz04c"&&(H.textContent=ct),Oe=l(e),v=r(e,"H2",{id:!0,"data-svelte-h":!0}),c(v)!=="svelte-pj200v"&&(v.innerHTML=ht),Re=l(e),T=r(e,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1q9iaj3"&&(T.textContent=pt),Ge=l(e),M=r(e,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1qmoy2f"&&(M.textContent=dt),Ne=l(e),ce=d(e,!1),he=p(),pe=d(e,!1),de=l(e),L=r(e,"P",{"data-svelte-h":!0}),c(L)!=="svelte-1il9orw"&&(L.innerHTML=kt),Ye=l(e),ke=d(e,!1),me=p(),fe=d(e,!1),ue=l(e),P=r(e,"P",{"data-svelte-h":!0}),c(P)!=="svelte-ihf4o6"&&(P.textContent=mt),Ze=l(e),ye=d(e,!1),_e=p(),be=d(e,!1),ge=l(e),A=r(e,"H2",{id:!0,"data-svelte-h":!0}),c(A)!=="svelte-8zjcwg"&&(A.innerHTML=ft),Fe=l(e),E=r(e,"P",{"data-svelte-h":!0}),c(E)!=="svelte-zryt13"&&(E.textContent=ut),Ue=l(e),I=r(e,"P",{"data-svelte-h":!0}),c(I)!=="svelte-g99txi"&&(I.innerHTML=yt),We=l(e),ve=d(e,!1),Ae=p(),Ce=d(e,!1),we=l(e),$=r(e,"P",{"data-svelte-h":!0}),c($)!=="svelte-1aztn92"&&($.innerHTML=_t),Xe=l(e),xe=d(e,!1),Be=p(),De=d(e,!1),He=l(e),C=r(e,"H2",{id:!0,"data-svelte-h":!0}),c(C)!=="svelte-jytbzs"&&(C.innerHTML=bt),Je=l(e),z=r(e,"P",{"data-svelte-h":!0}),c(z)!=="svelte-p3l8ro"&&(z.innerHTML=gt),Ke=l(e),S=r(e,"P",{"data-svelte-h":!0}),c(S)!=="svelte-7v7nlf"&&(S.textContent=vt),Qe=l(e),j=r(e,"OL",{"data-svelte-h":!0}),c(j)!=="svelte-151cf32"&&(j.innerHTML=At),Ve=l(e),Te=d(e,!1),Me=p(),Le=d(e,!1),Pe=l(e),q=r(e,"P",{"data-svelte-h":!0}),c(q)!=="svelte-epaes7"&&(q.textContent=Ct),et=l(e),O=r(e,"OL",{"data-svelte-h":!0}),c(O)!=="svelte-17wcmxd"&&(O.innerHTML=wt),this.h()},h(){G(n,"id","create-a-branch-with-current-changes"),N.a=Y,Z.a=F,G(b,"id","amend-a-previous-commit"),U.a=W,X.a=J,K.a=Q,V.a=ee,G(g,"id","go-back-to-an-old-commit"),te.a=ae,se.a=ie,le.a=ne,oe.a=re,G(v,"id","merge-changes-from-branch-a-into-branch-b"),ce.a=he,pe.a=de,ke.a=me,fe.a=ue,ye.a=_e,be.a=ge,G(A,"id","rebase-changes-in-a-branch-onto-a-newer-commit-from-the-parent-branch"),ve.a=Ae,Ce.a=we,xe.a=Be,De.a=He,G(C,"id","move-changes-from-a-protected-branch-to-a-feature-branch-after-accidentally-committing-without-switching-branches-first"),Te.a=Me,Le.a=Pe},m(e,t){a(e,n,t),a(e,u,t),a(e,f,t),a(e,m,t),a(e,y,t),a(e,Ee,t),N.m(Ht,e,t),a(e,Y,t),Z.m(Tt,e,t),a(e,F,t),a(e,b,t),a(e,Ie,t),a(e,w,t),a(e,$e,t),U.m(Mt,e,t),a(e,W,t),X.m(Lt,e,t),a(e,J,t),a(e,x,t),a(e,ze,t),K.m(Pt,e,t),a(e,Q,t),V.m(Et,e,t),a(e,ee,t),a(e,g,t),a(e,Se,t),a(e,B,t),a(e,je,t),te.m(It,e,t),a(e,ae,t),se.m($t,e,t),a(e,ie,t),a(e,D,t),a(e,qe,t),le.m(zt,e,t),a(e,ne,t),oe.m(St,e,t),a(e,re,t),a(e,H,t),a(e,Oe,t),a(e,v,t),a(e,Re,t),a(e,T,t),a(e,Ge,t),a(e,M,t),a(e,Ne,t),ce.m(jt,e,t),a(e,he,t),pe.m(qt,e,t),a(e,de,t),a(e,L,t),a(e,Ye,t),ke.m(Ot,e,t),a(e,me,t),fe.m(Rt,e,t),a(e,ue,t),a(e,P,t),a(e,Ze,t),ye.m(Gt,e,t),a(e,_e,t),be.m(Nt,e,t),a(e,ge,t),a(e,A,t),a(e,Fe,t),a(e,E,t),a(e,Ue,t),a(e,I,t),a(e,We,t),ve.m(Yt,e,t),a(e,Ae,t),Ce.m(Zt,e,t),a(e,we,t),a(e,$,t),a(e,Xe,t),xe.m(Ft,e,t),a(e,Be,t),De.m(Ut,e,t),a(e,He,t),a(e,C,t),a(e,Je,t),a(e,z,t),a(e,Ke,t),a(e,S,t),a(e,Qe,t),a(e,j,t),a(e,Ve,t),Te.m(Wt,e,t),a(e,Me,t),Le.m(Xt,e,t),a(e,Pe,t),a(e,q,t),a(e,et,t),a(e,O,t)},p:Kt,d(e){e&&(s(n),s(u),s(f),s(m),s(y),s(Ee),s(Y),N.d(),Z.d(),s(F),s(b),s(Ie),s(w),s($e),s(W),U.d(),X.d(),s(J),s(x),s(ze),s(Q),K.d(),V.d(),s(ee),s(g),s(Se),s(B),s(je),s(ae),te.d(),se.d(),s(ie),s(D),s(qe),s(ne),le.d(),oe.d(),s(re),s(H),s(Oe),s(v),s(Re),s(T),s(Ge),s(M),s(Ne),s(he),ce.d(),pe.d(),s(de),s(L),s(Ye),s(me),ke.d(),fe.d(),s(ue),s(P),s(Ze),s(_e),ye.d(),be.d(),s(ge),s(A),s(Fe),s(E),s(Ue),s(I),s(We),s(Ae),ve.d(),Ce.d(),s(we),s($),s(Xe),s(Be),xe.d(),De.d(),s(He),s(C),s(Je),s(z),s(Ke),s(S),s(Qe),s(j),s(Ve),s(Me),Te.d(),Le.d(),s(Pe),s(q),s(et),s(O))}}}function ca(R){let n,_;const u=[R[0],Dt];let f={$$slots:{default:[ra]},$$scope:{ctx:R}};for(let k=0;k<u.length;k+=1)f=tt(f,u[k]);return n=new oa({props:f}),{c(){ea(n.$$.fragment)},l(k){ta(n.$$.fragment,k)},m(k,m){aa(n,k,m),_=!0},p(k,[m]){const y=m&1?na(u,[m&1&&Bt(k[0]),m&0&&Bt(Dt)]):{};m&2&&(y.$$scope={dirty:m,ctx:k}),n.$set(y)},i(k){_||(sa(n.$$.fragment,k),_=!0)},o(k){ia(n.$$.fragment,k),_=!1},d(k){la(n,k)}}}const Dt={title:"git-cheatsheet",description:"Some common scenarios and how to resolve them using git.",slug:"notes/git-cheatsheet",publish:!0,lastmod:"2023-06-28T00:00:00.000Z",date:"2022-05-24T00:00:00.000Z",aliases:null,tags:["status/seedling"],readTime:5,internalLinks:[],flashcards:[]};function ha(R,n,_){return R.$$set=u=>{_(0,n=tt(tt({},n),xt(u)))},n=xt(n),[n]}class fa extends Qt{constructor(n){super(),Vt(this,n,ha,ca,Jt,{})}}export{fa as default,Dt as metadata};
