import{t as k,a as d}from"./Bj2ZHtgv.js";import"./DBHxkW5N.js";import{s as n,f as c,R as h}from"./fxLts69-.js";import{h as o}from"./RJ7APweJ.js";import{l as y,s as m}from"./BMf7CqPI.js";import{M as D}from"./cfkvY3O2.js";const l={title:"Dynamically generate TypeScript Playground links",description:"TypeScript playground has a URL param to specify the code content. This makes it possible to always have up-to-date playground links for example code!",slug:"notes/dynamic-ts-playground-links",publish:!0,lastmod:"2024-05-11T00:00:00.000Z",date:"2024-05-09T00:00:00.000Z",aliases:null,tags:["status/budding"],readTime:2,internalLinks:["/notes/branded-types","/notes/make-example-code-interactive","/notes/code-block-tsplay-demo-link"],flashcards:[]},{title:v,description:S,slug:w,publish:E,lastmod:L,date:x,aliases:I,tags:F,readTime:P,internalLinks:$,flashcards:_}=l;var g=k('<p>Recently I was presenting a talk at SeattleJS on <a href="/notes/branded-types">Branded Types</a> using my blog post as the visual content. I wanted to do some live coding, so I decided to add TypeScript playground links to my code snippets.</p> <p>Fun fact: it’s possible to <a href="https://www.typescriptlang.org/play/?#handbook-9" rel="nofollow">dynamically generate TypeScript playground links</a>!</p> <p>The process is fairly simple:</p> <ol><li>Use <code>lz-string</code> to base64 encode and zip the source code and URI encode the result (use <code>LZString.compressToEncodedURIComponent()</code>, an easy one-liner)</li> <li>Append the encoded string to a playground URL</li> <li>Put the link on the code block</li></ol> <p>I love this solution because it generates an updated link every time I build my site. I’m guaranteed to have up-to-date playground links and don’t have to do anything after the initial setup. Awesome!</p> <p>I followed <a href="https://www.typescriptlang.org/play/?#handbook-9" rel="nofollow">the TS playground docs</a> to write the code that generates TS playground links. I updated my code highlighter function to generate the TS playground links and add them to a <code>data-tsplay</code> attribute on the containing <code>&lt;pre&gt;</code> tag for each TS code block. Check it out:</p> <!><!> <p>With that I have playground links available in my output HTML. The last step I have to <a href="/notes/make-example-code-interactive">Make example code interactive</a> on my blog is to <a href="/notes/code-block-tsplay-demo-link">Add a demo link to TypeScript code blocks</a>.</p> <p>I’m so glad I ended up doing this. Being able to quickly pop open a live editor to make changes and show runtime values made my Seattle JS talk much better!</p>',1);function R(i,e){const r=y(e,["children","$$slots","$$events","$$legacy"]);D(i,m(()=>r,l,{children:(p,A)=>{var s=g(),a=n(c(s),12);o(a,()=>`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" js filename="mdsvex.config.js"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> LZString</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">lz-string</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> codeToHtml</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> transformerTwoslash</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">@shikijs/twoslash</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lex</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parse</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">fenceparser</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// ---cut---</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">/** </span><span style="color:#999999;--shiki-dark:#666666">@</span><span style="color:#1E754F;--shiki-dark:#4D9375">type</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> Exclude&#x3C;import('mdsvex').MdsvexOptions['highlight'],false | undefined>['highlighter'] */</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> ShikiTwoslashHighlighter</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lang</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> meta</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsPlaygroundLink</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> undefined</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">lang</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">ts</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">			// Generate a TS Playground link</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">			tsPlaygroundLink</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#96;</span><span style="color:#B56959;--shiki-dark:#C98A7D">https://typescriptlang.org/play/#code/</span><span style="color:#1E754F;--shiki-dark:#4D9375">$&#123;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">				LZString</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">compressToEncodedURIComponent</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B56959;--shiki-dark:#C98A7D">code</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">			&#125;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#96;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">		&#125;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> html</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> codeToHtml</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">		transformers</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">			transformerTwoslash</span><span style="color:#999999;--shiki-dark:#666666">(&#123;</span><span style="color:#998418;--shiki-dark:#B8A965"> explicitTrigger</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> &#125;),</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">			// This custom transformer adds the data-tsplay attribute</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">			&#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">				name</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">TSPlaygroundLinkInserter</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">				pre</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">el</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">					if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">tsPlaygroundLink</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#AB5959;--shiki-dark:#CB7676"> undefined</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">						el</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">properties</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">data-tsplay</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">'</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsPlaygroundLink</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">				&#125;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">			&#125;,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">			// other transformers...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">		],</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">		// other config options...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	&#125;);</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">	</span></span></code></pre>`);var t=n(a);o(t,()=>`<pre class="code-copy-target hidden">import LZString from 'lz-string';
import &#123; codeToHtml &#125; from 'shiki';
import &#123; transformerTwoslash &#125; from '@shikijs/twoslash';
import &#123; lex, parse &#125; from 'fenceparser';
// ---cut---
/** @type Exclude&lt;import('mdsvex').MdsvexOptions['highlight'],false | undefined&gt;['highlighter'] */
async function ShikiTwoslashHighlighter(code, lang, meta) &#123;
	let tsPlaygroundLink = undefined;
		if (lang === 'ts') &#123;
			// Generate a TS Playground link
			tsPlaygroundLink = &#96;https://typescriptlang.org/play/#code/$&#123;
				LZString.compressToEncodedURIComponent(code)
			&#125;&#96;;
		&#125;
	const html = await codeToHtml(code, &#123;
		transformers: [
			transformerTwoslash(&#123; explicitTrigger: true &#125;),
			// This custom transformer adds the data-tsplay attribute
			&#123;
				name: 'TSPlaygroundLinkInserter',
				pre(el) &#123;
					if (tsPlaygroundLink !== undefined)
						el.properties['data-tsplay'] = tsPlaygroundLink;
				&#125;
			&#125;,
			// other transformers...
		],
		// other config options...
	&#125;);
	</pre>`),h(4),d(p,s)},$$slots:{default:!0}}))}export{R as default,l as metadata};
