import{s as J,C as P,a5 as R,f as d,a as c,I as U,e as Z,g as h,u as y,c as m,K as j,i as l,A as K,d as t}from"./scheduler.7131e7f1.js";import{S as N,i as W,b as X,d as Q,m as V,a as Y,t as ss,e as as}from"./index.9e889c2d.js";import{g as es,a as z}from"./spread.8a54911c.js";import{M as ns}from"./MDSveXNoteLayout.afbaebc6.js";function ls(B){let a,k='Recently I was presenting a talk at SeattleJS on <a href="/notes/branded-types">Branded Types</a> using my blog post as the visual content. I wanted to do some live coding, so I decided to add TypeScript playground links to my code snippets.',p,o,e='Fun fact: it’s possible to <a href="https://www.typescriptlang.org/play/?#handbook-9" rel="nofollow">dynamically generate TypeScript playground links</a>!',i,r,E="The process is fairly simple:",x,u,H="<li>Use <code>lz-string</code> to base64 encode and zip the source code and URI encode the result (use <code>LZString.compressToEncodedURIComponent()</code>, an easy one-liner)</li> <li>Append the encoded string to a playground URL</li> <li>Put the link on the code block</li>",b,D,I="I love this solution because it generates an updated link every time I build my site. I’m guaranteed to have up-to-date playground links and don’t have to do anything after the initial setup. Awesome!",L,f,M='I followed <a href="https://www.typescriptlang.org/play/?#handbook-9" rel="nofollow">the TS playground docs</a> to write the code that generates TS playground links. I updated my code highlighter function to generate the TS playground links and add them to a <code>data-tsplay</code> attribute on the containing <code>&lt;pre&gt;</code> tag for each TS code block. Check it out:',w,C,O=`<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0" js filename="mdsvex.config.js"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> LZString</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">lz-string</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> codeToHtml</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> transformerTwoslash</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">@shikijs/twoslash</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lex</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> parse</span><span style="color:#999999;--shiki-dark:#666666"> &#125;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">fenceparser</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// ---cut---</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">/** </span><span style="color:#999999;--shiki-dark:#666666">@</span><span style="color:#1E754F;--shiki-dark:#4D9375">type</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> Exclude&#x3C;import('mdsvex').MdsvexOptions['highlight'],false | undefined>['highlighter'] */</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> ShikiTwoslashHighlighter</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lang</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> meta</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsPlaygroundLink</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> undefined</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">lang</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">ts</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">			// Generate a TS Playground link</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">			tsPlaygroundLink</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> &#96;</span><span style="color:#B56959;--shiki-dark:#C98A7D">https://typescriptlang.org/play/#code/</span><span style="color:#999999;--shiki-dark:#666666">$&#123;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">				LZString</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">compressToEncodedURIComponent</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B56959;--shiki-dark:#C98A7D">code</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">			&#125;</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">&#96;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">		&#125;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> html</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> codeToHtml</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">		transformers</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">			transformerTwoslash</span><span style="color:#999999;--shiki-dark:#666666">(&#123;</span><span style="color:#998418;--shiki-dark:#B8A965"> explicitTrigger</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> &#125;),</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">			// This custom transformer adds the data-tsplay attribute</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">			&#123;</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">				name</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695999;--shiki-dark:#C98A7D99"> '</span><span style="color:#B56959;--shiki-dark:#C98A7D">TSPlaygroundLinkInserter</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">				pre</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">el</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> &#123;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">					if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">tsPlaygroundLink</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#AB5959;--shiki-dark:#CB7676"> undefined</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">						el</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">properties</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">data-tsplay</span><span style="color:#B5695999;--shiki-dark:#C98A7D99">'</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsPlaygroundLink</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">				&#125;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">			&#125;,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">			// other transformers...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">		],</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">		// other config options...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	&#125;);</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">	</span></span></code></pre>`,T,v,G=`<pre class="code-copy-target hidden">import LZString from 'lz-string';
import &#123; codeToHtml &#125; from 'shiki';
import &#123; transformerTwoslash &#125; from '@shikijs/twoslash';
import &#123; lex, parse &#125; from 'fenceparser';
// ---cut---
/** @type Exclude&lt;import('mdsvex').MdsvexOptions['highlight'],false | undefined&gt;['highlighter'] */
async function ShikiTwoslashHighlighter(code, lang, meta) &#123;
	let tsPlaygroundLink = undefined;
		if (lang === 'ts') &#123;
			// Generate a TS Playground link
			tsPlaygroundLink = &#96;https://typescriptlang.org/play/#code/$&#123;
				LZString.compressToEncodedURIComponent(code)
			&#125;&#96;;
		&#125;
	const html = await codeToHtml(code, &#123;
		transformers: [
			transformerTwoslash(&#123; explicitTrigger: true &#125;),
			// This custom transformer adds the data-tsplay attribute
			&#123;
				name: 'TSPlaygroundLinkInserter',
				pre(el) &#123;
					if (tsPlaygroundLink !== undefined)
						el.properties['data-tsplay'] = tsPlaygroundLink;
				&#125;
			&#125;,
			// other transformers...
		],
		// other config options...
	&#125;);
	</pre>`,_,g,F='With that I have playground links available in my output HTML. The last step I have to <a href="/notes/make-example-code-interactive">Make example code interactive</a> on my blog is to <a href="/notes/code-block-tsplay-demo-link">Add a demo link to TypeScript code blocks</a>.',S,A,$="I’m so glad I ended up doing this. Being able to quickly pop open a live editor to make changes and show runtime values made my Seattle JS talk much better!";return{c(){a=d("p"),a.innerHTML=k,p=c(),o=d("p"),o.innerHTML=e,i=c(),r=d("p"),r.textContent=E,x=c(),u=d("ol"),u.innerHTML=H,b=c(),D=d("p"),D.textContent=I,L=c(),f=d("p"),f.innerHTML=M,w=c(),C=new U(!1),T=Z(),v=new U(!1),_=c(),g=d("p"),g.innerHTML=F,S=c(),A=d("p"),A.textContent=$,this.h()},l(s){a=h(s,"P",{"data-svelte-h":!0}),y(a)!=="svelte-hi0k58"&&(a.innerHTML=k),p=m(s),o=h(s,"P",{"data-svelte-h":!0}),y(o)!=="svelte-8sm578"&&(o.innerHTML=e),i=m(s),r=h(s,"P",{"data-svelte-h":!0}),y(r)!=="svelte-f06i2j"&&(r.textContent=E),x=m(s),u=h(s,"OL",{"data-svelte-h":!0}),y(u)!=="svelte-19piibu"&&(u.innerHTML=H),b=m(s),D=h(s,"P",{"data-svelte-h":!0}),y(D)!=="svelte-4sy04y"&&(D.textContent=I),L=m(s),f=h(s,"P",{"data-svelte-h":!0}),y(f)!=="svelte-rtpeqb"&&(f.innerHTML=M),w=m(s),C=j(s,!1),T=Z(),v=j(s,!1),_=m(s),g=h(s,"P",{"data-svelte-h":!0}),y(g)!=="svelte-1ftledo"&&(g.innerHTML=F),S=m(s),A=h(s,"P",{"data-svelte-h":!0}),y(A)!=="svelte-1abnvd7"&&(A.textContent=$),this.h()},h(){C.a=T,v.a=_},m(s,n){l(s,a,n),l(s,p,n),l(s,o,n),l(s,i,n),l(s,r,n),l(s,x,n),l(s,u,n),l(s,b,n),l(s,D,n),l(s,L,n),l(s,f,n),l(s,w,n),C.m(O,s,n),l(s,T,n),v.m(G,s,n),l(s,_,n),l(s,g,n),l(s,S,n),l(s,A,n)},p:K,d(s){s&&(t(a),t(p),t(o),t(i),t(r),t(x),t(u),t(b),t(D),t(L),t(f),t(w),t(T),C.d(),v.d(),t(_),t(g),t(S),t(A))}}}function ts(B){let a,k;const p=[B[0],q];let o={$$slots:{default:[ls]},$$scope:{ctx:B}};for(let e=0;e<p.length;e+=1)o=P(o,p[e]);return a=new ns({props:o}),{c(){X(a.$$.fragment)},l(e){Q(a.$$.fragment,e)},m(e,i){V(a,e,i),k=!0},p(e,[i]){const r=i&1?es(p,[i&1&&z(e[0]),i&0&&z(q)]):{};i&2&&(r.$$scope={dirty:i,ctx:e}),a.$set(r)},i(e){k||(Y(a.$$.fragment,e),k=!0)},o(e){ss(a.$$.fragment,e),k=!1},d(e){as(a,e)}}}const q={title:"Dynamically generate TypeScript Playground links",description:"TypeScript playground has a URL param to specify the code content. This makes it possible to always have up-to-date playground links for example code!",slug:"notes/dynamic-ts-playground-links",publish:!0,lastmod:"2024-05-11T00:00:00.000Z",date:"2024-05-09T00:00:00.000Z",aliases:null,tags:["status/budding"],readTime:2,internalLinks:["/notes/branded-types","/notes/make-example-code-interactive","/notes/code-block-tsplay-demo-link"],flashcards:[]};function is(B,a,k){return B.$$set=p=>{k(0,a=P(P({},a),R(p)))},a=R(a),[a]}class ds extends N{constructor(a){super(),W(this,a,is,ts,J,{})}}export{ds as default,q as metadata};
