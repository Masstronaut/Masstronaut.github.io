import{s as H,p as x,q as w,e as h,a as v,c as f,m as _,g,o as $,i as u,n as b,f as d}from"./scheduler.ewBkyc9q.js";import{S as C,i as k,c as q,a as P,m as I,t as S,b as j,d as A}from"./index.DpmaPz1F.js";import{g as D,a as L}from"./spread.CgU5AtxT.js";import{M as R}from"./MDSveXNoteLayout.B7y1uy0H.js";function Z(c){let e,r="This is an idea <em>Louis</em> shared with me which I have start noticed frequently. It’s similar @RayDalio’s idea that situations are common and we should therefore develop Principles that help us handle these situations.",l,n,t="A similar notion (also from <em>Louis</em>) is that things rhyme but don’t repeat. The meaning is that many situations sound similar, but aren’t exactly the same. Identifying the rhyme makes it easier to effectively navigate these situations.",s,i,y='<a aria-hidden="true" tabindex="-1" href="#real-world-examples"><span class="icon icon-link"></span></a><a href="#real-world-examples" aria-hidden="true" tabindex="-1"><span class="icon icon-link"></span></a>Real-world examples',p,o,T='My daily journal practice splits my life into a series of 1-day Agile sprints, which are in turn a specific implementation of <a href="/notes/learning-process">The learning process</a>.';return{c(){e=h("p"),e.innerHTML=r,l=v(),n=h("p"),n.innerHTML=t,s=v(),i=h("h2"),i.innerHTML=y,p=v(),o=h("p"),o.innerHTML=T,this.h()},l(a){e=f(a,"P",{"data-svelte-h":!0}),_(e)!=="svelte-198h7o2"&&(e.innerHTML=r),l=g(a),n=f(a,"P",{"data-svelte-h":!0}),_(n)!=="svelte-v7bcu2"&&(n.innerHTML=t),s=g(a),i=f(a,"H2",{id:!0,"data-svelte-h":!0}),_(i)!=="svelte-17c22r1"&&(i.innerHTML=y),p=g(a),o=f(a,"P",{"data-svelte-h":!0}),_(o)!=="svelte-1tuv1w7"&&(o.innerHTML=T),this.h()},h(){$(i,"id","real-world-examples")},m(a,m){u(a,e,m),u(a,l,m),u(a,n,m),u(a,s,m),u(a,i,m),u(a,p,m),u(a,o,m)},p:b,d(a){a&&(d(e),d(l),d(n),d(s),d(i),d(p),d(o))}}}function N(c){let e,r;const l=[c[0],M];let n={$$slots:{default:[Z]},$$scope:{ctx:c}};for(let t=0;t<l.length;t+=1)n=x(n,l[t]);return e=new R({props:n}),{c(){q(e.$$.fragment)},l(t){P(e.$$.fragment,t)},m(t,s){I(e,t,s),r=!0},p(t,[s]){const i=s&1?D(l,[s&1&&L(t[0]),s&0&&L(M)]):{};s&2&&(i.$$scope={dirty:s,ctx:t}),e.$set(i)},i(t){r||(S(e.$$.fragment,t),r=!0)},o(t){j(e.$$.fragment,t),r=!1},d(t){A(e,t)}}}const M={title:"The world is recursive",description:"The same things happen across domains and contexts all over the world. Very little is unique or novel.",slug:"notes/world-recursive",publish:!0,lastmod:"2021-04-14T00:00:00.000Z",date:"2021-04-14T00:00:00.000Z",aliases:["The world is recursive"],tags:["status/seedling","taxonomy/idea"],readTime:1,internalLinks:["/notes/learning-process"],flashcards:[]};function V(c,e,r){return c.$$set=l=>{r(0,e=x(x({},e),w(l)))},e=w(e),[e]}class E extends C{constructor(e){super(),k(this,e,V,N,H,{})}}export{E as default,M as metadata};
