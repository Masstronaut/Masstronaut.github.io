import{s as b,C as A,a3 as C,f,a as v,a4 as T,g as U,u as h,c as g,a5 as z,i,A as x,d}from"./scheduler.5beeadad.js";import{S as D,i as L,b as O,d as H,m as M,a as $,t as k,e as S}from"./index.bfd99307.js";import{g as q,a as N}from"./spread.8a54911c.js";import{M as P}from"./MDSveXNoteLayout.2a006cba.js";function j(y){let s,o='When working with union types, I often want to narrow the type to something specific. One way to do this is using <a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#assertion-functions" rel="nofollow">assertion functions</a> which assert that after theyâ€™ve been invoked, I can be certain that the type is what was asserted. The following assertion function will assert that a user is an admin:',l,r,e=`<pre class="shiki twoslash lsp" style="background-color: #ffffff; color: #24292f" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='function assertIsAdmin(user: NormalUser | AdminUser): asserts user is AdminUser' >assertIsAdmin</data-lsp></span><span style="color: #24292F">(</span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type NormalUser = User &amp; &#123;&#10;    role: "user";&#10;&#125;' >NormalUser</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #CF222E">asserts</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">is</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F"> &#123;</span></div><div class='line dim'><span style="color: #24292F">	</span><span style="color: #CF222E">if</span><span style="color: #24292F">( </span><span style="color: #0A3069">"admin"</span><span style="color: #24292F"> </span><span style="color: #CF222E">!==</span><span style="color: #24292F"> <data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp>.<data-lsp lsp='(property) role: "admin" | "user"' >role</data-lsp> ) </span><span style="color: #CF222E">throw</span><span style="color: #24292F"> </span><span style="color: #CF222E">new</span><span style="color: #24292F"> </span><span style="color: #0550AE"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style="color: #24292F">(</span><span style="color: #0A3069">"user is not an Admin"</span><span style="color: #24292F">);</span></div><div class='line dim'><span style="color: #24292F">&#125;</span></div><div class='line dim'><span style="color: #6E7781">// Notice the arrow function syntax here</span></div><div class='line dim'><span style="color: #CF222E">const</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='const assertIsAdmin2: (user: NormalUser | AdminUser) => asserts user is AdminUser' >assertIsAdmin2</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=</span><span style="color: #24292F"> (</span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type NormalUser = User &amp; &#123;&#10;    role: "user";&#10;&#125;' >NormalUser</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F">)</span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #CF222E">asserts</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">is</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">=&gt;</span><span style="color: #24292F"> &#123;</span></div><div class='line dim'><span style="color: #24292F">  </span><span style="color: #CF222E">if</span><span style="color: #24292F">( </span><span style="color: #0A3069">"admin"</span><span style="color: #24292F"> </span><span style="color: #CF222E">!==</span><span style="color: #24292F"> <data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp>.<data-lsp lsp='(property) role: "admin" | "user"' >role</data-lsp> ) </span><span style="color: #CF222E">throw</span><span style="color: #24292F"> </span><span style="color: #CF222E">new</span><span style="color: #24292F"> </span><span style="color: #0550AE"><data-lsp lsp='var Error: ErrorConstructor&#10;new (message?: string | undefined) => Error' >Error</data-lsp></span><span style="color: #24292F">(</span><span style="color: #0A3069">"user is not an Admin"</span><span style="color: #24292F">);</span></div><div class='line dim'><span style="color: #24292F">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='function adminOnly(user: NormalUser | AdminUser): void' >adminOnly</data-lsp></span><span style="color: #24292F">(</span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type NormalUser = User &amp; &#123;&#10;    role: "user";&#10;&#125;' >NormalUser</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F">)&#123;</span></div><div class='line highlight'><span style="color: #24292F">  </span><span style="color: #8250DF"><data-err><data-lsp lsp='const assertIsAdmin2: (user: AdminUser | NormalUser) => asserts user is AdminUser' >assertIsAdmin2</data-lsp></data-err></span><span style="color: #24292F">(<data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp>);</span></div><span class="error"><span>Assertions require every name in the call target to be declared with an explicit type annotation.</span><span class="code">2775</span></span><span class="error-behind">Assertions require every name in the call target to be declared with an explicit type annotation.</span><div class='line dim'><span style="color: #24292F">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='function deleteOrganization(user: AdminUser, organizationId: string): void' >deleteOrganization</data-lsp></span><span style="color: #24292F">(</span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser' >user</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F">, </span><span style="color: #953800"><data-lsp lsp='(parameter) organizationId: string' >organizationId</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">)&#123;</span></div><div class='line dim'><span style="color: #24292F">  </span><span style="color: #6E7781">// ...</span></div><div class='line dim'><span style="color: #24292F">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: #CF222E">function</span><span style="color: #24292F"> </span><span style="color: #8250DF"><data-lsp lsp='function attemptDeleteOrganization(user: NormalUser | AdminUser, organizationId: string): void' >attemptDeleteOrganization</data-lsp></span><span style="color: #24292F">(</span><span style="color: #953800"><data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type NormalUser = User &amp; &#123;&#10;    role: "user";&#10;&#125;' >NormalUser</data-lsp></span><span style="color: #24292F"> </span><span style="color: #CF222E">|</span><span style="color: #24292F"> </span><span style="color: #953800"><data-lsp lsp='type AdminUser = User &amp; &#123;&#10;    role: "admin";&#10;&#125;' >AdminUser</data-lsp></span><span style="color: #24292F">, </span><span style="color: #953800"><data-lsp lsp='(parameter) organizationId: string' >organizationId</data-lsp></span><span style="color: #CF222E">:</span><span style="color: #24292F"> </span><span style="color: #0550AE">string</span><span style="color: #24292F">)&#123;</span></div><div class='line highlight'><span style="color: #24292F">	</span><span style="color: #8250DF"><data-lsp lsp='function assertIsAdmin(user: AdminUser | NormalUser): asserts user is AdminUser' >assertIsAdmin</data-lsp></span><span style="color: #24292F">(<data-lsp lsp='(parameter) user: AdminUser | NormalUser' >user</data-lsp>);</span></div><div class='line highlight'><span style="color: #24292F">	</span><span style="color: #8250DF"><data-lsp lsp='function deleteOrganization(user: AdminUser, organizationId: string): void' >deleteOrganization</data-lsp></span><span style="color: #24292F">(<data-lsp lsp='(parameter) user: AdminUser' style='border-bottom: solid 2px lightgrey;'>user</data-lsp>, <data-lsp lsp='(parameter) organizationId: string' >organizationId</data-lsp>);</span></div><div class='meta-line'><span class='popover-prefix'>                     </span><span class='popover'><div class='arrow'></div>(parameter) user: AdminUser</span></div><div class='line dim'><span style="color: #24292F">&#125;</span></div></code></div></pre>`,n,t,E="<code>assertIsAdmin</code> <em>asserts</em> that the <code>user</code> is an <code>AdminUser</code>. There are a couple things to note here:",u,c,_='<li>The <code>function</code> keyword is required. Notice that using <code>assertIsAdmin2</code>, the version with an arrow function, causes an error. This is because of an implementation detail of the compiler; <a href="https://github.com/microsoft/TypeScript/issues/56147#issuecomment-1768592995" rel="nofollow">the control flow graph is computed <em>before</em> type inferencing</a>.</li> <li>Any code that sits below a call to <code>assertIsAdmin</code> will have the type of <code>user</code> narrowed to <code>AdminUser</code>.</li>',F,m,w="At the bottom in <code>attemptDeleteOrganization</code>, you can see that <code>user</code>â€™s type has been narrowed to <code>AdminUser</code> after the call to <code>assertIsAdmin</code>.";return{c(){s=f("p"),s.innerHTML=o,l=v(),r=new T(!1),n=v(),t=f("p"),t.innerHTML=E,u=v(),c=f("ol"),c.innerHTML=_,F=v(),m=f("p"),m.innerHTML=w,this.h()},l(a){s=U(a,"P",{["data-svelte-h"]:!0}),h(s)!=="svelte-1d5e8gd"&&(s.innerHTML=o),l=g(a),r=z(a,!1),n=g(a),t=U(a,"P",{["data-svelte-h"]:!0}),h(t)!=="svelte-1ju18a3"&&(t.innerHTML=E),u=g(a),c=U(a,"OL",{["data-svelte-h"]:!0}),h(c)!=="svelte-qpynp2"&&(c.innerHTML=_),F=g(a),m=U(a,"P",{["data-svelte-h"]:!0}),h(m)!=="svelte-gy7ufp"&&(m.innerHTML=w),this.h()},h(){r.a=n},m(a,p){i(a,s,p),i(a,l,p),r.m(e,a,p),i(a,n,p),i(a,t,p),i(a,u,p),i(a,c,p),i(a,F,p),i(a,m,p)},p:x,d(a){a&&(d(s),d(l),r.d(),d(n),d(t),d(u),d(c),d(F),d(m))}}}function Z(y){let s,o;const l=[y[0],I];let r={$$slots:{default:[j]},$$scope:{ctx:y}};for(let e=0;e<l.length;e+=1)r=A(r,l[e]);return s=new P({props:r}),{c(){O(s.$$.fragment)},l(e){H(s.$$.fragment,e)},m(e,n){M(s,e,n),o=!0},p(e,[n]){const t=n&1?q(l,[n&1&&N(e[0]),n&0&&N(I)]):{};n&2&&(t.$$scope={dirty:n,ctx:e}),s.$set(t)},i(e){o||($(s.$$.fragment,e),o=!0)},o(e){k(s.$$.fragment,e),o=!1},d(e){S(s,e)}}}const I={title:"TypeScript assertion functions increase type safety",description:"Assertion functions let the programmer narrow types using a named function, making type narrowing much more readable.",slug:"assertion-functions",publish:!0,lastmod:"2024-02-16T00:00:00.000Z",date:"2024-02-16T00:00:00.000Z",aliases:null,tags:["status/seedling"],timeToRead:1,internalLinks:[],flashcards:[]};function R(y,s,o){return y.$$set=l=>{o(0,s=A(A({},s),C(l)))},s=C(s),[s]}class J extends D{constructor(s){super(),L(this,s,R,Z,b,{})}}export{J as default,I as metadata};
